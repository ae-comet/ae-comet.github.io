"use strict";
(self["webpackChunkhiyoko3_github_io"] = self["webpackChunkhiyoko3_github_io"] || []).push([[368],{

/***/ 262:
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "B": () => (/* binding */ effectScope),
/* harmony export */   "BK": () => (/* binding */ toRefs),
/* harmony export */   "Bj": () => (/* binding */ EffectScope),
/* harmony export */   "EB": () => (/* binding */ onScopeDispose),
/* harmony export */   "Fl": () => (/* binding */ computed),
/* harmony export */   "IU": () => (/* binding */ toRaw),
/* harmony export */   "Jd": () => (/* binding */ pauseTracking),
/* harmony export */   "OT": () => (/* binding */ readonly),
/* harmony export */   "PG": () => (/* binding */ isReactive),
/* harmony export */   "SU": () => (/* binding */ unref),
/* harmony export */   "Um": () => (/* binding */ shallowReactive),
/* harmony export */   "Vh": () => (/* binding */ toRef),
/* harmony export */   "WL": () => (/* binding */ proxyRefs),
/* harmony export */   "X$": () => (/* binding */ trigger),
/* harmony export */   "X3": () => (/* binding */ isProxy),
/* harmony export */   "XI": () => (/* binding */ shallowRef),
/* harmony export */   "Xl": () => (/* binding */ markRaw),
/* harmony export */   "dq": () => (/* binding */ isRef),
/* harmony export */   "iH": () => (/* binding */ ref),
/* harmony export */   "j": () => (/* binding */ track),
/* harmony export */   "lk": () => (/* binding */ resetTracking),
/* harmony export */   "qj": () => (/* binding */ reactive),
/* harmony export */   "qq": () => (/* binding */ ReactiveEffect),
/* harmony export */   "yT": () => (/* binding */ isShallow)
/* harmony export */ });
/* unused harmony exports ITERATE_KEY, customRef, deferredComputed, effect, enableTracking, getCurrentScope, isReadonly, shallowReadonly, stop, triggerRef */
/* harmony import */ var _vue_shared__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(577);


function warn(msg, ...args) {
    console.warn(`[Vue warn] ${msg}`, ...args);
}

let activeEffectScope;
class EffectScope {
    constructor(detached = false) {
        /**
         * @internal
         */
        this.active = true;
        /**
         * @internal
         */
        this.effects = [];
        /**
         * @internal
         */
        this.cleanups = [];
        if (!detached && activeEffectScope) {
            this.parent = activeEffectScope;
            this.index =
                (activeEffectScope.scopes || (activeEffectScope.scopes = [])).push(this) - 1;
        }
    }
    run(fn) {
        if (this.active) {
            const currentEffectScope = activeEffectScope;
            try {
                activeEffectScope = this;
                return fn();
            }
            finally {
                activeEffectScope = currentEffectScope;
            }
        }
        else if ((false)) {}
    }
    /**
     * This should only be called on non-detached scopes
     * @internal
     */
    on() {
        activeEffectScope = this;
    }
    /**
     * This should only be called on non-detached scopes
     * @internal
     */
    off() {
        activeEffectScope = this.parent;
    }
    stop(fromParent) {
        if (this.active) {
            let i, l;
            for (i = 0, l = this.effects.length; i < l; i++) {
                this.effects[i].stop();
            }
            for (i = 0, l = this.cleanups.length; i < l; i++) {
                this.cleanups[i]();
            }
            if (this.scopes) {
                for (i = 0, l = this.scopes.length; i < l; i++) {
                    this.scopes[i].stop(true);
                }
            }
            // nested scope, dereference from parent to avoid memory leaks
            if (this.parent && !fromParent) {
                // optimized O(1) removal
                const last = this.parent.scopes.pop();
                if (last && last !== this) {
                    this.parent.scopes[this.index] = last;
                    last.index = this.index;
                }
            }
            this.active = false;
        }
    }
}
function effectScope(detached) {
    return new EffectScope(detached);
}
function recordEffectScope(effect, scope = activeEffectScope) {
    if (scope && scope.active) {
        scope.effects.push(effect);
    }
}
function getCurrentScope() {
    return activeEffectScope;
}
function onScopeDispose(fn) {
    if (activeEffectScope) {
        activeEffectScope.cleanups.push(fn);
    }
    else if ((false)) {}
}

const createDep = (effects) => {
    const dep = new Set(effects);
    dep.w = 0;
    dep.n = 0;
    return dep;
};
const wasTracked = (dep) => (dep.w & trackOpBit) > 0;
const newTracked = (dep) => (dep.n & trackOpBit) > 0;
const initDepMarkers = ({ deps }) => {
    if (deps.length) {
        for (let i = 0; i < deps.length; i++) {
            deps[i].w |= trackOpBit; // set was tracked
        }
    }
};
const finalizeDepMarkers = (effect) => {
    const { deps } = effect;
    if (deps.length) {
        let ptr = 0;
        for (let i = 0; i < deps.length; i++) {
            const dep = deps[i];
            if (wasTracked(dep) && !newTracked(dep)) {
                dep.delete(effect);
            }
            else {
                deps[ptr++] = dep;
            }
            // clear bits
            dep.w &= ~trackOpBit;
            dep.n &= ~trackOpBit;
        }
        deps.length = ptr;
    }
};

const targetMap = new WeakMap();
// The number of effects currently being tracked recursively.
let effectTrackDepth = 0;
let trackOpBit = 1;
/**
 * The bitwise track markers support at most 30 levels of recursion.
 * This value is chosen to enable modern JS engines to use a SMI on all platforms.
 * When recursion depth is greater, fall back to using a full cleanup.
 */
const maxMarkerBits = 30;
let activeEffect;
const ITERATE_KEY = Symbol(( false) ? 0 : '');
const MAP_KEY_ITERATE_KEY = Symbol(( false) ? 0 : '');
class ReactiveEffect {
    constructor(fn, scheduler = null, scope) {
        this.fn = fn;
        this.scheduler = scheduler;
        this.active = true;
        this.deps = [];
        this.parent = undefined;
        recordEffectScope(this, scope);
    }
    run() {
        if (!this.active) {
            return this.fn();
        }
        let parent = activeEffect;
        let lastShouldTrack = shouldTrack;
        while (parent) {
            if (parent === this) {
                return;
            }
            parent = parent.parent;
        }
        try {
            this.parent = activeEffect;
            activeEffect = this;
            shouldTrack = true;
            trackOpBit = 1 << ++effectTrackDepth;
            if (effectTrackDepth <= maxMarkerBits) {
                initDepMarkers(this);
            }
            else {
                cleanupEffect(this);
            }
            return this.fn();
        }
        finally {
            if (effectTrackDepth <= maxMarkerBits) {
                finalizeDepMarkers(this);
            }
            trackOpBit = 1 << --effectTrackDepth;
            activeEffect = this.parent;
            shouldTrack = lastShouldTrack;
            this.parent = undefined;
            if (this.deferStop) {
                this.stop();
            }
        }
    }
    stop() {
        // stopped while running itself - defer the cleanup
        if (activeEffect === this) {
            this.deferStop = true;
        }
        else if (this.active) {
            cleanupEffect(this);
            if (this.onStop) {
                this.onStop();
            }
            this.active = false;
        }
    }
}
function cleanupEffect(effect) {
    const { deps } = effect;
    if (deps.length) {
        for (let i = 0; i < deps.length; i++) {
            deps[i].delete(effect);
        }
        deps.length = 0;
    }
}
function effect(fn, options) {
    if (fn.effect) {
        fn = fn.effect.fn;
    }
    const _effect = new ReactiveEffect(fn);
    if (options) {
        extend(_effect, options);
        if (options.scope)
            recordEffectScope(_effect, options.scope);
    }
    if (!options || !options.lazy) {
        _effect.run();
    }
    const runner = _effect.run.bind(_effect);
    runner.effect = _effect;
    return runner;
}
function stop(runner) {
    runner.effect.stop();
}
let shouldTrack = true;
const trackStack = [];
function pauseTracking() {
    trackStack.push(shouldTrack);
    shouldTrack = false;
}
function enableTracking() {
    trackStack.push(shouldTrack);
    shouldTrack = true;
}
function resetTracking() {
    const last = trackStack.pop();
    shouldTrack = last === undefined ? true : last;
}
function track(target, type, key) {
    if (shouldTrack && activeEffect) {
        let depsMap = targetMap.get(target);
        if (!depsMap) {
            targetMap.set(target, (depsMap = new Map()));
        }
        let dep = depsMap.get(key);
        if (!dep) {
            depsMap.set(key, (dep = createDep()));
        }
        const eventInfo = ( false)
            ? 0
            : undefined;
        trackEffects(dep, eventInfo);
    }
}
function trackEffects(dep, debuggerEventExtraInfo) {
    let shouldTrack = false;
    if (effectTrackDepth <= maxMarkerBits) {
        if (!newTracked(dep)) {
            dep.n |= trackOpBit; // set newly tracked
            shouldTrack = !wasTracked(dep);
        }
    }
    else {
        // Full cleanup mode.
        shouldTrack = !dep.has(activeEffect);
    }
    if (shouldTrack) {
        dep.add(activeEffect);
        activeEffect.deps.push(dep);
        if (false) {}
    }
}
function trigger(target, type, key, newValue, oldValue, oldTarget) {
    const depsMap = targetMap.get(target);
    if (!depsMap) {
        // never been tracked
        return;
    }
    let deps = [];
    if (type === "clear" /* CLEAR */) {
        // collection being cleared
        // trigger all effects for target
        deps = [...depsMap.values()];
    }
    else if (key === 'length' && (0,_vue_shared__WEBPACK_IMPORTED_MODULE_0__/* .isArray */ .kJ)(target)) {
        depsMap.forEach((dep, key) => {
            if (key === 'length' || key >= newValue) {
                deps.push(dep);
            }
        });
    }
    else {
        // schedule runs for SET | ADD | DELETE
        if (key !== void 0) {
            deps.push(depsMap.get(key));
        }
        // also run for iteration key on ADD | DELETE | Map.SET
        switch (type) {
            case "add" /* ADD */:
                if (!(0,_vue_shared__WEBPACK_IMPORTED_MODULE_0__/* .isArray */ .kJ)(target)) {
                    deps.push(depsMap.get(ITERATE_KEY));
                    if ((0,_vue_shared__WEBPACK_IMPORTED_MODULE_0__/* .isMap */ ._N)(target)) {
                        deps.push(depsMap.get(MAP_KEY_ITERATE_KEY));
                    }
                }
                else if ((0,_vue_shared__WEBPACK_IMPORTED_MODULE_0__/* .isIntegerKey */ .S0)(key)) {
                    // new index added to array -> length changes
                    deps.push(depsMap.get('length'));
                }
                break;
            case "delete" /* DELETE */:
                if (!(0,_vue_shared__WEBPACK_IMPORTED_MODULE_0__/* .isArray */ .kJ)(target)) {
                    deps.push(depsMap.get(ITERATE_KEY));
                    if ((0,_vue_shared__WEBPACK_IMPORTED_MODULE_0__/* .isMap */ ._N)(target)) {
                        deps.push(depsMap.get(MAP_KEY_ITERATE_KEY));
                    }
                }
                break;
            case "set" /* SET */:
                if ((0,_vue_shared__WEBPACK_IMPORTED_MODULE_0__/* .isMap */ ._N)(target)) {
                    deps.push(depsMap.get(ITERATE_KEY));
                }
                break;
        }
    }
    const eventInfo = ( false)
        ? 0
        : undefined;
    if (deps.length === 1) {
        if (deps[0]) {
            if ((false)) {}
            else {
                triggerEffects(deps[0]);
            }
        }
    }
    else {
        const effects = [];
        for (const dep of deps) {
            if (dep) {
                effects.push(...dep);
            }
        }
        if ((false)) {}
        else {
            triggerEffects(createDep(effects));
        }
    }
}
function triggerEffects(dep, debuggerEventExtraInfo) {
    // spread into array for stabilization
    const effects = (0,_vue_shared__WEBPACK_IMPORTED_MODULE_0__/* .isArray */ .kJ)(dep) ? dep : [...dep];
    for (const effect of effects) {
        if (effect.computed) {
            triggerEffect(effect, debuggerEventExtraInfo);
        }
    }
    for (const effect of effects) {
        if (!effect.computed) {
            triggerEffect(effect, debuggerEventExtraInfo);
        }
    }
}
function triggerEffect(effect, debuggerEventExtraInfo) {
    if (effect !== activeEffect || effect.allowRecurse) {
        if (false) {}
        if (effect.scheduler) {
            effect.scheduler();
        }
        else {
            effect.run();
        }
    }
}

const isNonTrackableKeys = /*#__PURE__*/ (0,_vue_shared__WEBPACK_IMPORTED_MODULE_0__/* .makeMap */ .fY)(`__proto__,__v_isRef,__isVue`);
const builtInSymbols = new Set(
/*#__PURE__*/
Object.getOwnPropertyNames(Symbol)
    // ios10.x Object.getOwnPropertyNames(Symbol) can enumerate 'arguments' and 'caller'
    // but accessing them on Symbol leads to TypeError because Symbol is a strict mode
    // function
    .filter(key => key !== 'arguments' && key !== 'caller')
    .map(key => Symbol[key])
    .filter(_vue_shared__WEBPACK_IMPORTED_MODULE_0__/* .isSymbol */ .yk));
const get = /*#__PURE__*/ createGetter();
const shallowGet = /*#__PURE__*/ createGetter(false, true);
const readonlyGet = /*#__PURE__*/ createGetter(true);
const shallowReadonlyGet = /*#__PURE__*/ createGetter(true, true);
const arrayInstrumentations = /*#__PURE__*/ createArrayInstrumentations();
function createArrayInstrumentations() {
    const instrumentations = {};
    ['includes', 'indexOf', 'lastIndexOf'].forEach(key => {
        instrumentations[key] = function (...args) {
            const arr = toRaw(this);
            for (let i = 0, l = this.length; i < l; i++) {
                track(arr, "get" /* GET */, i + '');
            }
            // we run the method using the original args first (which may be reactive)
            const res = arr[key](...args);
            if (res === -1 || res === false) {
                // if that didn't work, run it again using raw values.
                return arr[key](...args.map(toRaw));
            }
            else {
                return res;
            }
        };
    });
    ['push', 'pop', 'shift', 'unshift', 'splice'].forEach(key => {
        instrumentations[key] = function (...args) {
            pauseTracking();
            const res = toRaw(this)[key].apply(this, args);
            resetTracking();
            return res;
        };
    });
    return instrumentations;
}
function createGetter(isReadonly = false, shallow = false) {
    return function get(target, key, receiver) {
        if (key === "__v_isReactive" /* IS_REACTIVE */) {
            return !isReadonly;
        }
        else if (key === "__v_isReadonly" /* IS_READONLY */) {
            return isReadonly;
        }
        else if (key === "__v_isShallow" /* IS_SHALLOW */) {
            return shallow;
        }
        else if (key === "__v_raw" /* RAW */ &&
            receiver ===
                (isReadonly
                    ? shallow
                        ? shallowReadonlyMap
                        : readonlyMap
                    : shallow
                        ? shallowReactiveMap
                        : reactiveMap).get(target)) {
            return target;
        }
        const targetIsArray = (0,_vue_shared__WEBPACK_IMPORTED_MODULE_0__/* .isArray */ .kJ)(target);
        if (!isReadonly && targetIsArray && (0,_vue_shared__WEBPACK_IMPORTED_MODULE_0__/* .hasOwn */ .RI)(arrayInstrumentations, key)) {
            return Reflect.get(arrayInstrumentations, key, receiver);
        }
        const res = Reflect.get(target, key, receiver);
        if ((0,_vue_shared__WEBPACK_IMPORTED_MODULE_0__/* .isSymbol */ .yk)(key) ? builtInSymbols.has(key) : isNonTrackableKeys(key)) {
            return res;
        }
        if (!isReadonly) {
            track(target, "get" /* GET */, key);
        }
        if (shallow) {
            return res;
        }
        if (isRef(res)) {
            // ref unwrapping - skip unwrap for Array + integer key.
            return targetIsArray && (0,_vue_shared__WEBPACK_IMPORTED_MODULE_0__/* .isIntegerKey */ .S0)(key) ? res : res.value;
        }
        if ((0,_vue_shared__WEBPACK_IMPORTED_MODULE_0__/* .isObject */ .Kn)(res)) {
            // Convert returned value into a proxy as well. we do the isObject check
            // here to avoid invalid value warning. Also need to lazy access readonly
            // and reactive here to avoid circular dependency.
            return isReadonly ? readonly(res) : reactive(res);
        }
        return res;
    };
}
const set = /*#__PURE__*/ createSetter();
const shallowSet = /*#__PURE__*/ createSetter(true);
function createSetter(shallow = false) {
    return function set(target, key, value, receiver) {
        let oldValue = target[key];
        if (isReadonly(oldValue) && isRef(oldValue) && !isRef(value)) {
            return false;
        }
        if (!shallow && !isReadonly(value)) {
            if (!isShallow(value)) {
                value = toRaw(value);
                oldValue = toRaw(oldValue);
            }
            if (!(0,_vue_shared__WEBPACK_IMPORTED_MODULE_0__/* .isArray */ .kJ)(target) && isRef(oldValue) && !isRef(value)) {
                oldValue.value = value;
                return true;
            }
        }
        const hadKey = (0,_vue_shared__WEBPACK_IMPORTED_MODULE_0__/* .isArray */ .kJ)(target) && (0,_vue_shared__WEBPACK_IMPORTED_MODULE_0__/* .isIntegerKey */ .S0)(key)
            ? Number(key) < target.length
            : (0,_vue_shared__WEBPACK_IMPORTED_MODULE_0__/* .hasOwn */ .RI)(target, key);
        const result = Reflect.set(target, key, value, receiver);
        // don't trigger if target is something up in the prototype chain of original
        if (target === toRaw(receiver)) {
            if (!hadKey) {
                trigger(target, "add" /* ADD */, key, value);
            }
            else if ((0,_vue_shared__WEBPACK_IMPORTED_MODULE_0__/* .hasChanged */ .aU)(value, oldValue)) {
                trigger(target, "set" /* SET */, key, value, oldValue);
            }
        }
        return result;
    };
}
function deleteProperty(target, key) {
    const hadKey = (0,_vue_shared__WEBPACK_IMPORTED_MODULE_0__/* .hasOwn */ .RI)(target, key);
    const oldValue = target[key];
    const result = Reflect.deleteProperty(target, key);
    if (result && hadKey) {
        trigger(target, "delete" /* DELETE */, key, undefined, oldValue);
    }
    return result;
}
function has(target, key) {
    const result = Reflect.has(target, key);
    if (!(0,_vue_shared__WEBPACK_IMPORTED_MODULE_0__/* .isSymbol */ .yk)(key) || !builtInSymbols.has(key)) {
        track(target, "has" /* HAS */, key);
    }
    return result;
}
function ownKeys(target) {
    track(target, "iterate" /* ITERATE */, (0,_vue_shared__WEBPACK_IMPORTED_MODULE_0__/* .isArray */ .kJ)(target) ? 'length' : ITERATE_KEY);
    return Reflect.ownKeys(target);
}
const mutableHandlers = {
    get,
    set,
    deleteProperty,
    has,
    ownKeys
};
const readonlyHandlers = {
    get: readonlyGet,
    set(target, key) {
        if ((false)) {}
        return true;
    },
    deleteProperty(target, key) {
        if ((false)) {}
        return true;
    }
};
const shallowReactiveHandlers = /*#__PURE__*/ (0,_vue_shared__WEBPACK_IMPORTED_MODULE_0__/* .extend */ .l7)({}, mutableHandlers, {
    get: shallowGet,
    set: shallowSet
});
// Props handlers are special in the sense that it should not unwrap top-level
// refs (in order to allow refs to be explicitly passed down), but should
// retain the reactivity of the normal readonly object.
const shallowReadonlyHandlers = /*#__PURE__*/ (0,_vue_shared__WEBPACK_IMPORTED_MODULE_0__/* .extend */ .l7)({}, readonlyHandlers, {
    get: shallowReadonlyGet
});

const toShallow = (value) => value;
const getProto = (v) => Reflect.getPrototypeOf(v);
function get$1(target, key, isReadonly = false, isShallow = false) {
    // #1772: readonly(reactive(Map)) should return readonly + reactive version
    // of the value
    target = target["__v_raw" /* RAW */];
    const rawTarget = toRaw(target);
    const rawKey = toRaw(key);
    if (!isReadonly) {
        if (key !== rawKey) {
            track(rawTarget, "get" /* GET */, key);
        }
        track(rawTarget, "get" /* GET */, rawKey);
    }
    const { has } = getProto(rawTarget);
    const wrap = isShallow ? toShallow : isReadonly ? toReadonly : toReactive;
    if (has.call(rawTarget, key)) {
        return wrap(target.get(key));
    }
    else if (has.call(rawTarget, rawKey)) {
        return wrap(target.get(rawKey));
    }
    else if (target !== rawTarget) {
        // #3602 readonly(reactive(Map))
        // ensure that the nested reactive `Map` can do tracking for itself
        target.get(key);
    }
}
function has$1(key, isReadonly = false) {
    const target = this["__v_raw" /* RAW */];
    const rawTarget = toRaw(target);
    const rawKey = toRaw(key);
    if (!isReadonly) {
        if (key !== rawKey) {
            track(rawTarget, "has" /* HAS */, key);
        }
        track(rawTarget, "has" /* HAS */, rawKey);
    }
    return key === rawKey
        ? target.has(key)
        : target.has(key) || target.has(rawKey);
}
function size(target, isReadonly = false) {
    target = target["__v_raw" /* RAW */];
    !isReadonly && track(toRaw(target), "iterate" /* ITERATE */, ITERATE_KEY);
    return Reflect.get(target, 'size', target);
}
function add(value) {
    value = toRaw(value);
    const target = toRaw(this);
    const proto = getProto(target);
    const hadKey = proto.has.call(target, value);
    if (!hadKey) {
        target.add(value);
        trigger(target, "add" /* ADD */, value, value);
    }
    return this;
}
function set$1(key, value) {
    value = toRaw(value);
    const target = toRaw(this);
    const { has, get } = getProto(target);
    let hadKey = has.call(target, key);
    if (!hadKey) {
        key = toRaw(key);
        hadKey = has.call(target, key);
    }
    else if ((false)) {}
    const oldValue = get.call(target, key);
    target.set(key, value);
    if (!hadKey) {
        trigger(target, "add" /* ADD */, key, value);
    }
    else if ((0,_vue_shared__WEBPACK_IMPORTED_MODULE_0__/* .hasChanged */ .aU)(value, oldValue)) {
        trigger(target, "set" /* SET */, key, value, oldValue);
    }
    return this;
}
function deleteEntry(key) {
    const target = toRaw(this);
    const { has, get } = getProto(target);
    let hadKey = has.call(target, key);
    if (!hadKey) {
        key = toRaw(key);
        hadKey = has.call(target, key);
    }
    else if ((false)) {}
    const oldValue = get ? get.call(target, key) : undefined;
    // forward the operation before queueing reactions
    const result = target.delete(key);
    if (hadKey) {
        trigger(target, "delete" /* DELETE */, key, undefined, oldValue);
    }
    return result;
}
function clear() {
    const target = toRaw(this);
    const hadItems = target.size !== 0;
    const oldTarget = ( false)
        ? 0
        : undefined;
    // forward the operation before queueing reactions
    const result = target.clear();
    if (hadItems) {
        trigger(target, "clear" /* CLEAR */, undefined, undefined, oldTarget);
    }
    return result;
}
function createForEach(isReadonly, isShallow) {
    return function forEach(callback, thisArg) {
        const observed = this;
        const target = observed["__v_raw" /* RAW */];
        const rawTarget = toRaw(target);
        const wrap = isShallow ? toShallow : isReadonly ? toReadonly : toReactive;
        !isReadonly && track(rawTarget, "iterate" /* ITERATE */, ITERATE_KEY);
        return target.forEach((value, key) => {
            // important: make sure the callback is
            // 1. invoked with the reactive map as `this` and 3rd arg
            // 2. the value received should be a corresponding reactive/readonly.
            return callback.call(thisArg, wrap(value), wrap(key), observed);
        });
    };
}
function createIterableMethod(method, isReadonly, isShallow) {
    return function (...args) {
        const target = this["__v_raw" /* RAW */];
        const rawTarget = toRaw(target);
        const targetIsMap = (0,_vue_shared__WEBPACK_IMPORTED_MODULE_0__/* .isMap */ ._N)(rawTarget);
        const isPair = method === 'entries' || (method === Symbol.iterator && targetIsMap);
        const isKeyOnly = method === 'keys' && targetIsMap;
        const innerIterator = target[method](...args);
        const wrap = isShallow ? toShallow : isReadonly ? toReadonly : toReactive;
        !isReadonly &&
            track(rawTarget, "iterate" /* ITERATE */, isKeyOnly ? MAP_KEY_ITERATE_KEY : ITERATE_KEY);
        // return a wrapped iterator which returns observed versions of the
        // values emitted from the real iterator
        return {
            // iterator protocol
            next() {
                const { value, done } = innerIterator.next();
                return done
                    ? { value, done }
                    : {
                        value: isPair ? [wrap(value[0]), wrap(value[1])] : wrap(value),
                        done
                    };
            },
            // iterable protocol
            [Symbol.iterator]() {
                return this;
            }
        };
    };
}
function createReadonlyMethod(type) {
    return function (...args) {
        if ((false)) {}
        return type === "delete" /* DELETE */ ? false : this;
    };
}
function createInstrumentations() {
    const mutableInstrumentations = {
        get(key) {
            return get$1(this, key);
        },
        get size() {
            return size(this);
        },
        has: has$1,
        add,
        set: set$1,
        delete: deleteEntry,
        clear,
        forEach: createForEach(false, false)
    };
    const shallowInstrumentations = {
        get(key) {
            return get$1(this, key, false, true);
        },
        get size() {
            return size(this);
        },
        has: has$1,
        add,
        set: set$1,
        delete: deleteEntry,
        clear,
        forEach: createForEach(false, true)
    };
    const readonlyInstrumentations = {
        get(key) {
            return get$1(this, key, true);
        },
        get size() {
            return size(this, true);
        },
        has(key) {
            return has$1.call(this, key, true);
        },
        add: createReadonlyMethod("add" /* ADD */),
        set: createReadonlyMethod("set" /* SET */),
        delete: createReadonlyMethod("delete" /* DELETE */),
        clear: createReadonlyMethod("clear" /* CLEAR */),
        forEach: createForEach(true, false)
    };
    const shallowReadonlyInstrumentations = {
        get(key) {
            return get$1(this, key, true, true);
        },
        get size() {
            return size(this, true);
        },
        has(key) {
            return has$1.call(this, key, true);
        },
        add: createReadonlyMethod("add" /* ADD */),
        set: createReadonlyMethod("set" /* SET */),
        delete: createReadonlyMethod("delete" /* DELETE */),
        clear: createReadonlyMethod("clear" /* CLEAR */),
        forEach: createForEach(true, true)
    };
    const iteratorMethods = ['keys', 'values', 'entries', Symbol.iterator];
    iteratorMethods.forEach(method => {
        mutableInstrumentations[method] = createIterableMethod(method, false, false);
        readonlyInstrumentations[method] = createIterableMethod(method, true, false);
        shallowInstrumentations[method] = createIterableMethod(method, false, true);
        shallowReadonlyInstrumentations[method] = createIterableMethod(method, true, true);
    });
    return [
        mutableInstrumentations,
        readonlyInstrumentations,
        shallowInstrumentations,
        shallowReadonlyInstrumentations
    ];
}
const [mutableInstrumentations, readonlyInstrumentations, shallowInstrumentations, shallowReadonlyInstrumentations] = /* #__PURE__*/ createInstrumentations();
function createInstrumentationGetter(isReadonly, shallow) {
    const instrumentations = shallow
        ? isReadonly
            ? shallowReadonlyInstrumentations
            : shallowInstrumentations
        : isReadonly
            ? readonlyInstrumentations
            : mutableInstrumentations;
    return (target, key, receiver) => {
        if (key === "__v_isReactive" /* IS_REACTIVE */) {
            return !isReadonly;
        }
        else if (key === "__v_isReadonly" /* IS_READONLY */) {
            return isReadonly;
        }
        else if (key === "__v_raw" /* RAW */) {
            return target;
        }
        return Reflect.get((0,_vue_shared__WEBPACK_IMPORTED_MODULE_0__/* .hasOwn */ .RI)(instrumentations, key) && key in target
            ? instrumentations
            : target, key, receiver);
    };
}
const mutableCollectionHandlers = {
    get: /*#__PURE__*/ createInstrumentationGetter(false, false)
};
const shallowCollectionHandlers = {
    get: /*#__PURE__*/ createInstrumentationGetter(false, true)
};
const readonlyCollectionHandlers = {
    get: /*#__PURE__*/ createInstrumentationGetter(true, false)
};
const shallowReadonlyCollectionHandlers = {
    get: /*#__PURE__*/ createInstrumentationGetter(true, true)
};
function checkIdentityKeys(target, has, key) {
    const rawKey = toRaw(key);
    if (rawKey !== key && has.call(target, rawKey)) {
        const type = toRawType(target);
        console.warn(`Reactive ${type} contains both the raw and reactive ` +
            `versions of the same object${type === `Map` ? ` as keys` : ``}, ` +
            `which can lead to inconsistencies. ` +
            `Avoid differentiating between the raw and reactive versions ` +
            `of an object and only use the reactive version if possible.`);
    }
}

const reactiveMap = new WeakMap();
const shallowReactiveMap = new WeakMap();
const readonlyMap = new WeakMap();
const shallowReadonlyMap = new WeakMap();
function targetTypeMap(rawType) {
    switch (rawType) {
        case 'Object':
        case 'Array':
            return 1 /* COMMON */;
        case 'Map':
        case 'Set':
        case 'WeakMap':
        case 'WeakSet':
            return 2 /* COLLECTION */;
        default:
            return 0 /* INVALID */;
    }
}
function getTargetType(value) {
    return value["__v_skip" /* SKIP */] || !Object.isExtensible(value)
        ? 0 /* INVALID */
        : targetTypeMap((0,_vue_shared__WEBPACK_IMPORTED_MODULE_0__/* .toRawType */ .W7)(value));
}
function reactive(target) {
    // if trying to observe a readonly proxy, return the readonly version.
    if (isReadonly(target)) {
        return target;
    }
    return createReactiveObject(target, false, mutableHandlers, mutableCollectionHandlers, reactiveMap);
}
/**
 * Return a shallowly-reactive copy of the original object, where only the root
 * level properties are reactive. It also does not auto-unwrap refs (even at the
 * root level).
 */
function shallowReactive(target) {
    return createReactiveObject(target, false, shallowReactiveHandlers, shallowCollectionHandlers, shallowReactiveMap);
}
/**
 * Creates a readonly copy of the original object. Note the returned copy is not
 * made reactive, but `readonly` can be called on an already reactive object.
 */
function readonly(target) {
    return createReactiveObject(target, true, readonlyHandlers, readonlyCollectionHandlers, readonlyMap);
}
/**
 * Returns a reactive-copy of the original object, where only the root level
 * properties are readonly, and does NOT unwrap refs nor recursively convert
 * returned properties.
 * This is used for creating the props proxy object for stateful components.
 */
function shallowReadonly(target) {
    return createReactiveObject(target, true, shallowReadonlyHandlers, shallowReadonlyCollectionHandlers, shallowReadonlyMap);
}
function createReactiveObject(target, isReadonly, baseHandlers, collectionHandlers, proxyMap) {
    if (!(0,_vue_shared__WEBPACK_IMPORTED_MODULE_0__/* .isObject */ .Kn)(target)) {
        if ((false)) {}
        return target;
    }
    // target is already a Proxy, return it.
    // exception: calling readonly() on a reactive object
    if (target["__v_raw" /* RAW */] &&
        !(isReadonly && target["__v_isReactive" /* IS_REACTIVE */])) {
        return target;
    }
    // target already has corresponding Proxy
    const existingProxy = proxyMap.get(target);
    if (existingProxy) {
        return existingProxy;
    }
    // only specific value types can be observed.
    const targetType = getTargetType(target);
    if (targetType === 0 /* INVALID */) {
        return target;
    }
    const proxy = new Proxy(target, targetType === 2 /* COLLECTION */ ? collectionHandlers : baseHandlers);
    proxyMap.set(target, proxy);
    return proxy;
}
function isReactive(value) {
    if (isReadonly(value)) {
        return isReactive(value["__v_raw" /* RAW */]);
    }
    return !!(value && value["__v_isReactive" /* IS_REACTIVE */]);
}
function isReadonly(value) {
    return !!(value && value["__v_isReadonly" /* IS_READONLY */]);
}
function isShallow(value) {
    return !!(value && value["__v_isShallow" /* IS_SHALLOW */]);
}
function isProxy(value) {
    return isReactive(value) || isReadonly(value);
}
function toRaw(observed) {
    const raw = observed && observed["__v_raw" /* RAW */];
    return raw ? toRaw(raw) : observed;
}
function markRaw(value) {
    (0,_vue_shared__WEBPACK_IMPORTED_MODULE_0__/* .def */ .Nj)(value, "__v_skip" /* SKIP */, true);
    return value;
}
const toReactive = (value) => (0,_vue_shared__WEBPACK_IMPORTED_MODULE_0__/* .isObject */ .Kn)(value) ? reactive(value) : value;
const toReadonly = (value) => (0,_vue_shared__WEBPACK_IMPORTED_MODULE_0__/* .isObject */ .Kn)(value) ? readonly(value) : value;

function trackRefValue(ref) {
    if (shouldTrack && activeEffect) {
        ref = toRaw(ref);
        if ((false)) {}
        else {
            trackEffects(ref.dep || (ref.dep = createDep()));
        }
    }
}
function triggerRefValue(ref, newVal) {
    ref = toRaw(ref);
    if (ref.dep) {
        if ((false)) {}
        else {
            triggerEffects(ref.dep);
        }
    }
}
function isRef(r) {
    return !!(r && r.__v_isRef === true);
}
function ref(value) {
    return createRef(value, false);
}
function shallowRef(value) {
    return createRef(value, true);
}
function createRef(rawValue, shallow) {
    if (isRef(rawValue)) {
        return rawValue;
    }
    return new RefImpl(rawValue, shallow);
}
class RefImpl {
    constructor(value, __v_isShallow) {
        this.__v_isShallow = __v_isShallow;
        this.dep = undefined;
        this.__v_isRef = true;
        this._rawValue = __v_isShallow ? value : toRaw(value);
        this._value = __v_isShallow ? value : toReactive(value);
    }
    get value() {
        trackRefValue(this);
        return this._value;
    }
    set value(newVal) {
        newVal = this.__v_isShallow ? newVal : toRaw(newVal);
        if ((0,_vue_shared__WEBPACK_IMPORTED_MODULE_0__/* .hasChanged */ .aU)(newVal, this._rawValue)) {
            this._rawValue = newVal;
            this._value = this.__v_isShallow ? newVal : toReactive(newVal);
            triggerRefValue(this, newVal);
        }
    }
}
function triggerRef(ref) {
    triggerRefValue(ref, ( false) ? 0 : void 0);
}
function unref(ref) {
    return isRef(ref) ? ref.value : ref;
}
const shallowUnwrapHandlers = {
    get: (target, key, receiver) => unref(Reflect.get(target, key, receiver)),
    set: (target, key, value, receiver) => {
        const oldValue = target[key];
        if (isRef(oldValue) && !isRef(value)) {
            oldValue.value = value;
            return true;
        }
        else {
            return Reflect.set(target, key, value, receiver);
        }
    }
};
function proxyRefs(objectWithRefs) {
    return isReactive(objectWithRefs)
        ? objectWithRefs
        : new Proxy(objectWithRefs, shallowUnwrapHandlers);
}
class CustomRefImpl {
    constructor(factory) {
        this.dep = undefined;
        this.__v_isRef = true;
        const { get, set } = factory(() => trackRefValue(this), () => triggerRefValue(this));
        this._get = get;
        this._set = set;
    }
    get value() {
        return this._get();
    }
    set value(newVal) {
        this._set(newVal);
    }
}
function customRef(factory) {
    return new CustomRefImpl(factory);
}
function toRefs(object) {
    if (false) {}
    const ret = (0,_vue_shared__WEBPACK_IMPORTED_MODULE_0__/* .isArray */ .kJ)(object) ? new Array(object.length) : {};
    for (const key in object) {
        ret[key] = toRef(object, key);
    }
    return ret;
}
class ObjectRefImpl {
    constructor(_object, _key, _defaultValue) {
        this._object = _object;
        this._key = _key;
        this._defaultValue = _defaultValue;
        this.__v_isRef = true;
    }
    get value() {
        const val = this._object[this._key];
        return val === undefined ? this._defaultValue : val;
    }
    set value(newVal) {
        this._object[this._key] = newVal;
    }
}
function toRef(object, key, defaultValue) {
    const val = object[key];
    return isRef(val)
        ? val
        : new ObjectRefImpl(object, key, defaultValue);
}

class ComputedRefImpl {
    constructor(getter, _setter, isReadonly, isSSR) {
        this._setter = _setter;
        this.dep = undefined;
        this.__v_isRef = true;
        this._dirty = true;
        this.effect = new ReactiveEffect(getter, () => {
            if (!this._dirty) {
                this._dirty = true;
                triggerRefValue(this);
            }
        });
        this.effect.computed = this;
        this.effect.active = this._cacheable = !isSSR;
        this["__v_isReadonly" /* IS_READONLY */] = isReadonly;
    }
    get value() {
        // the computed ref may get wrapped by other proxies e.g. readonly() #3376
        const self = toRaw(this);
        trackRefValue(self);
        if (self._dirty || !self._cacheable) {
            self._dirty = false;
            self._value = self.effect.run();
        }
        return self._value;
    }
    set value(newValue) {
        this._setter(newValue);
    }
}
function computed(getterOrOptions, debugOptions, isSSR = false) {
    let getter;
    let setter;
    const onlyGetter = (0,_vue_shared__WEBPACK_IMPORTED_MODULE_0__/* .isFunction */ .mf)(getterOrOptions);
    if (onlyGetter) {
        getter = getterOrOptions;
        setter = ( false)
            ? 0
            : _vue_shared__WEBPACK_IMPORTED_MODULE_0__/* .NOOP */ .dG;
    }
    else {
        getter = getterOrOptions.get;
        setter = getterOrOptions.set;
    }
    const cRef = new ComputedRefImpl(getter, setter, onlyGetter || !setter, isSSR);
    if (false) {}
    return cRef;
}

var _a;
const tick = /*#__PURE__*/ (/* unused pure expression or super */ null && (Promise.resolve()));
const queue = (/* unused pure expression or super */ null && ([]));
let queued = false;
const scheduler = (fn) => {
    queue.push(fn);
    if (!queued) {
        queued = true;
        tick.then(flush);
    }
};
const flush = () => {
    for (let i = 0; i < queue.length; i++) {
        queue[i]();
    }
    queue.length = 0;
    queued = false;
};
class DeferredComputedRefImpl {
    constructor(getter) {
        this.dep = undefined;
        this._dirty = true;
        this.__v_isRef = true;
        this[_a] = true;
        let compareTarget;
        let hasCompareTarget = false;
        let scheduled = false;
        this.effect = new ReactiveEffect(getter, (computedTrigger) => {
            if (this.dep) {
                if (computedTrigger) {
                    compareTarget = this._value;
                    hasCompareTarget = true;
                }
                else if (!scheduled) {
                    const valueToCompare = hasCompareTarget ? compareTarget : this._value;
                    scheduled = true;
                    hasCompareTarget = false;
                    scheduler(() => {
                        if (this.effect.active && this._get() !== valueToCompare) {
                            triggerRefValue(this);
                        }
                        scheduled = false;
                    });
                }
                // chained upstream computeds are notified synchronously to ensure
                // value invalidation in case of sync access; normal effects are
                // deferred to be triggered in scheduler.
                for (const e of this.dep) {
                    if (e.computed instanceof DeferredComputedRefImpl) {
                        e.scheduler(true /* computedTrigger */);
                    }
                }
            }
            this._dirty = true;
        });
        this.effect.computed = this;
    }
    _get() {
        if (this._dirty) {
            this._dirty = false;
            return (this._value = this.effect.run());
        }
        return this._value;
    }
    get value() {
        trackRefValue(this);
        // the computed ref may get wrapped by other proxies e.g. readonly() #3376
        return toRaw(this)._get();
    }
}
_a = "__v_isReadonly" /* IS_READONLY */;
function deferredComputed(getter) {
    return new DeferredComputedRefImpl(getter);
}




/***/ }),

/***/ 252:
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "$d": () => (/* binding */ callWithAsyncErrorHandling),
/* harmony export */   "FN": () => (/* binding */ getCurrentInstance),
/* harmony export */   "Fl": () => (/* binding */ computed),
/* harmony export */   "HY": () => (/* binding */ Fragment),
/* harmony export */   "JJ": () => (/* binding */ provide),
/* harmony export */   "Jd": () => (/* binding */ onBeforeUnmount),
/* harmony export */   "Ko": () => (/* binding */ renderList),
/* harmony export */   "LL": () => (/* binding */ resolveDynamicComponent),
/* harmony export */   "P$": () => (/* binding */ BaseTransition),
/* harmony export */   "Q2": () => (/* binding */ resolveDirective),
/* harmony export */   "Q6": () => (/* binding */ getTransitionRawChildren),
/* harmony export */   "U2": () => (/* binding */ resolveTransitionHooks),
/* harmony export */   "Uk": () => (/* binding */ createTextVNode),
/* harmony export */   "Us": () => (/* binding */ createRenderer),
/* harmony export */   "Wm": () => (/* binding */ createVNode),
/* harmony export */   "Xn": () => (/* binding */ onBeforeUpdate),
/* harmony export */   "Y3": () => (/* binding */ nextTick),
/* harmony export */   "Y8": () => (/* binding */ useTransitionState),
/* harmony export */   "YP": () => (/* binding */ watch),
/* harmony export */   "ZK": () => (/* binding */ warn),
/* harmony export */   "_": () => (/* binding */ createBaseVNode),
/* harmony export */   "aZ": () => (/* binding */ defineComponent),
/* harmony export */   "bv": () => (/* binding */ onMounted),
/* harmony export */   "dG": () => (/* binding */ mergeProps),
/* harmony export */   "dl": () => (/* binding */ onActivated),
/* harmony export */   "f3": () => (/* binding */ inject),
/* harmony export */   "h": () => (/* binding */ h),
/* harmony export */   "iD": () => (/* binding */ createElementBlock),
/* harmony export */   "ic": () => (/* binding */ onUpdated),
/* harmony export */   "j4": () => (/* binding */ createBlock),
/* harmony export */   "lR": () => (/* binding */ Teleport),
/* harmony export */   "m0": () => (/* binding */ watchEffect),
/* harmony export */   "mx": () => (/* binding */ toHandlers),
/* harmony export */   "nK": () => (/* binding */ setTransitionHooks),
/* harmony export */   "se": () => (/* binding */ onDeactivated),
/* harmony export */   "up": () => (/* binding */ resolveComponent),
/* harmony export */   "w5": () => (/* binding */ withCtx),
/* harmony export */   "wF": () => (/* binding */ onBeforeMount),
/* harmony export */   "wg": () => (/* binding */ openBlock),
/* harmony export */   "wy": () => (/* binding */ withDirectives)
/* harmony export */ });
/* unused harmony exports Comment, KeepAlive, Static, Suspense, Text, callWithErrorHandling, cloneVNode, compatUtils, createCommentVNode, createHydrationRenderer, createPropsRestProxy, createSlots, createStaticVNode, defineAsyncComponent, defineEmits, defineExpose, defineProps, devtools, guardReactiveProps, handleError, initCustomFormatter, isMemoSame, isRuntimeOnly, isVNode, mergeDefaults, onErrorCaptured, onRenderTracked, onRenderTriggered, onServerPrefetch, onUnmounted, popScopeId, pushScopeId, queuePostFlushCb, registerRuntimeCompiler, renderSlot, resolveFilter, setBlockTracking, setDevtoolsHook, ssrContextKey, ssrUtils, transformVNodeArgs, useAttrs, useSSRContext, useSlots, version, watchPostEffect, watchSyncEffect, withAsyncContext, withDefaults, withMemo, withScopeId */
/* harmony import */ var _vue_reactivity__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(262);
/* harmony import */ var _vue_shared__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(577);





const stack = [];
function pushWarningContext(vnode) {
    stack.push(vnode);
}
function popWarningContext() {
    stack.pop();
}
function warn(msg, ...args) {
    // avoid props formatting or warn handler tracking deps that might be mutated
    // during patch, leading to infinite recursion.
    (0,_vue_reactivity__WEBPACK_IMPORTED_MODULE_0__/* .pauseTracking */ .Jd)();
    const instance = stack.length ? stack[stack.length - 1].component : null;
    const appWarnHandler = instance && instance.appContext.config.warnHandler;
    const trace = getComponentTrace();
    if (appWarnHandler) {
        callWithErrorHandling(appWarnHandler, instance, 11 /* APP_WARN_HANDLER */, [
            msg + args.join(''),
            instance && instance.proxy,
            trace
                .map(({ vnode }) => `at <${formatComponentName(instance, vnode.type)}>`)
                .join('\n'),
            trace
        ]);
    }
    else {
        const warnArgs = [`[Vue warn]: ${msg}`, ...args];
        /* istanbul ignore if */
        if (trace.length &&
            // avoid spamming console during tests
            !false) {
            warnArgs.push(`\n`, ...formatTrace(trace));
        }
        console.warn(...warnArgs);
    }
    (0,_vue_reactivity__WEBPACK_IMPORTED_MODULE_0__/* .resetTracking */ .lk)();
}
function getComponentTrace() {
    let currentVNode = stack[stack.length - 1];
    if (!currentVNode) {
        return [];
    }
    // we can't just use the stack because it will be incomplete during updates
    // that did not start from the root. Re-construct the parent chain using
    // instance parent pointers.
    const normalizedStack = [];
    while (currentVNode) {
        const last = normalizedStack[0];
        if (last && last.vnode === currentVNode) {
            last.recurseCount++;
        }
        else {
            normalizedStack.push({
                vnode: currentVNode,
                recurseCount: 0
            });
        }
        const parentInstance = currentVNode.component && currentVNode.component.parent;
        currentVNode = parentInstance && parentInstance.vnode;
    }
    return normalizedStack;
}
/* istanbul ignore next */
function formatTrace(trace) {
    const logs = [];
    trace.forEach((entry, i) => {
        logs.push(...(i === 0 ? [] : [`\n`]), ...formatTraceEntry(entry));
    });
    return logs;
}
function formatTraceEntry({ vnode, recurseCount }) {
    const postfix = recurseCount > 0 ? `... (${recurseCount} recursive calls)` : ``;
    const isRoot = vnode.component ? vnode.component.parent == null : false;
    const open = ` at <${formatComponentName(vnode.component, vnode.type, isRoot)}`;
    const close = `>` + postfix;
    return vnode.props
        ? [open, ...formatProps(vnode.props), close]
        : [open + close];
}
/* istanbul ignore next */
function formatProps(props) {
    const res = [];
    const keys = Object.keys(props);
    keys.slice(0, 3).forEach(key => {
        res.push(...formatProp(key, props[key]));
    });
    if (keys.length > 3) {
        res.push(` ...`);
    }
    return res;
}
/* istanbul ignore next */
function formatProp(key, value, raw) {
    if ((0,_vue_shared__WEBPACK_IMPORTED_MODULE_1__/* .isString */ .HD)(value)) {
        value = JSON.stringify(value);
        return raw ? value : [`${key}=${value}`];
    }
    else if (typeof value === 'number' ||
        typeof value === 'boolean' ||
        value == null) {
        return raw ? value : [`${key}=${value}`];
    }
    else if ((0,_vue_reactivity__WEBPACK_IMPORTED_MODULE_0__/* .isRef */ .dq)(value)) {
        value = formatProp(key, (0,_vue_reactivity__WEBPACK_IMPORTED_MODULE_0__/* .toRaw */ .IU)(value.value), true);
        return raw ? value : [`${key}=Ref<`, value, `>`];
    }
    else if ((0,_vue_shared__WEBPACK_IMPORTED_MODULE_1__/* .isFunction */ .mf)(value)) {
        return [`${key}=fn${value.name ? `<${value.name}>` : ``}`];
    }
    else {
        value = (0,_vue_reactivity__WEBPACK_IMPORTED_MODULE_0__/* .toRaw */ .IU)(value);
        return raw ? value : [`${key}=`, value];
    }
}

const ErrorTypeStrings = {
    ["sp" /* SERVER_PREFETCH */]: 'serverPrefetch hook',
    ["bc" /* BEFORE_CREATE */]: 'beforeCreate hook',
    ["c" /* CREATED */]: 'created hook',
    ["bm" /* BEFORE_MOUNT */]: 'beforeMount hook',
    ["m" /* MOUNTED */]: 'mounted hook',
    ["bu" /* BEFORE_UPDATE */]: 'beforeUpdate hook',
    ["u" /* UPDATED */]: 'updated',
    ["bum" /* BEFORE_UNMOUNT */]: 'beforeUnmount hook',
    ["um" /* UNMOUNTED */]: 'unmounted hook',
    ["a" /* ACTIVATED */]: 'activated hook',
    ["da" /* DEACTIVATED */]: 'deactivated hook',
    ["ec" /* ERROR_CAPTURED */]: 'errorCaptured hook',
    ["rtc" /* RENDER_TRACKED */]: 'renderTracked hook',
    ["rtg" /* RENDER_TRIGGERED */]: 'renderTriggered hook',
    [0 /* SETUP_FUNCTION */]: 'setup function',
    [1 /* RENDER_FUNCTION */]: 'render function',
    [2 /* WATCH_GETTER */]: 'watcher getter',
    [3 /* WATCH_CALLBACK */]: 'watcher callback',
    [4 /* WATCH_CLEANUP */]: 'watcher cleanup function',
    [5 /* NATIVE_EVENT_HANDLER */]: 'native event handler',
    [6 /* COMPONENT_EVENT_HANDLER */]: 'component event handler',
    [7 /* VNODE_HOOK */]: 'vnode hook',
    [8 /* DIRECTIVE_HOOK */]: 'directive hook',
    [9 /* TRANSITION_HOOK */]: 'transition hook',
    [10 /* APP_ERROR_HANDLER */]: 'app errorHandler',
    [11 /* APP_WARN_HANDLER */]: 'app warnHandler',
    [12 /* FUNCTION_REF */]: 'ref function',
    [13 /* ASYNC_COMPONENT_LOADER */]: 'async component loader',
    [14 /* SCHEDULER */]: 'scheduler flush. This is likely a Vue internals bug. ' +
        'Please open an issue at https://new-issue.vuejs.org/?repo=vuejs/core'
};
function callWithErrorHandling(fn, instance, type, args) {
    let res;
    try {
        res = args ? fn(...args) : fn();
    }
    catch (err) {
        handleError(err, instance, type);
    }
    return res;
}
function callWithAsyncErrorHandling(fn, instance, type, args) {
    if ((0,_vue_shared__WEBPACK_IMPORTED_MODULE_1__/* .isFunction */ .mf)(fn)) {
        const res = callWithErrorHandling(fn, instance, type, args);
        if (res && (0,_vue_shared__WEBPACK_IMPORTED_MODULE_1__/* .isPromise */ .tI)(res)) {
            res.catch(err => {
                handleError(err, instance, type);
            });
        }
        return res;
    }
    const values = [];
    for (let i = 0; i < fn.length; i++) {
        values.push(callWithAsyncErrorHandling(fn[i], instance, type, args));
    }
    return values;
}
function handleError(err, instance, type, throwInDev = true) {
    const contextVNode = instance ? instance.vnode : null;
    if (instance) {
        let cur = instance.parent;
        // the exposed instance is the render proxy to keep it consistent with 2.x
        const exposedInstance = instance.proxy;
        // in production the hook receives only the error code
        const errorInfo = ( false) ? 0 : type;
        while (cur) {
            const errorCapturedHooks = cur.ec;
            if (errorCapturedHooks) {
                for (let i = 0; i < errorCapturedHooks.length; i++) {
                    if (errorCapturedHooks[i](err, exposedInstance, errorInfo) === false) {
                        return;
                    }
                }
            }
            cur = cur.parent;
        }
        // app-level handling
        const appErrorHandler = instance.appContext.config.errorHandler;
        if (appErrorHandler) {
            callWithErrorHandling(appErrorHandler, null, 10 /* APP_ERROR_HANDLER */, [err, exposedInstance, errorInfo]);
            return;
        }
    }
    logError(err, type, contextVNode, throwInDev);
}
function logError(err, type, contextVNode, throwInDev = true) {
    if ((false)) {}
    else {
        // recover in prod to reduce the impact on end-user
        console.error(err);
    }
}

let isFlushing = false;
let isFlushPending = false;
const queue = [];
let flushIndex = 0;
const pendingPreFlushCbs = [];
let activePreFlushCbs = null;
let preFlushIndex = 0;
const pendingPostFlushCbs = [];
let activePostFlushCbs = null;
let postFlushIndex = 0;
const resolvedPromise = /*#__PURE__*/ Promise.resolve();
let currentFlushPromise = null;
let currentPreFlushParentJob = null;
const RECURSION_LIMIT = 100;
function nextTick(fn) {
    const p = currentFlushPromise || resolvedPromise;
    return fn ? p.then(this ? fn.bind(this) : fn) : p;
}
// #2768
// Use binary-search to find a suitable position in the queue,
// so that the queue maintains the increasing order of job's id,
// which can prevent the job from being skipped and also can avoid repeated patching.
function findInsertionIndex(id) {
    // the start index should be `flushIndex + 1`
    let start = flushIndex + 1;
    let end = queue.length;
    while (start < end) {
        const middle = (start + end) >>> 1;
        const middleJobId = getId(queue[middle]);
        middleJobId < id ? (start = middle + 1) : (end = middle);
    }
    return start;
}
function queueJob(job) {
    // the dedupe search uses the startIndex argument of Array.includes()
    // by default the search index includes the current job that is being run
    // so it cannot recursively trigger itself again.
    // if the job is a watch() callback, the search will start with a +1 index to
    // allow it recursively trigger itself - it is the user's responsibility to
    // ensure it doesn't end up in an infinite loop.
    if ((!queue.length ||
        !queue.includes(job, isFlushing && job.allowRecurse ? flushIndex + 1 : flushIndex)) &&
        job !== currentPreFlushParentJob) {
        if (job.id == null) {
            queue.push(job);
        }
        else {
            queue.splice(findInsertionIndex(job.id), 0, job);
        }
        queueFlush();
    }
}
function queueFlush() {
    if (!isFlushing && !isFlushPending) {
        isFlushPending = true;
        currentFlushPromise = resolvedPromise.then(flushJobs);
    }
}
function invalidateJob(job) {
    const i = queue.indexOf(job);
    if (i > flushIndex) {
        queue.splice(i, 1);
    }
}
function queueCb(cb, activeQueue, pendingQueue, index) {
    if (!(0,_vue_shared__WEBPACK_IMPORTED_MODULE_1__/* .isArray */ .kJ)(cb)) {
        if (!activeQueue ||
            !activeQueue.includes(cb, cb.allowRecurse ? index + 1 : index)) {
            pendingQueue.push(cb);
        }
    }
    else {
        // if cb is an array, it is a component lifecycle hook which can only be
        // triggered by a job, which is already deduped in the main queue, so
        // we can skip duplicate check here to improve perf
        pendingQueue.push(...cb);
    }
    queueFlush();
}
function queuePreFlushCb(cb) {
    queueCb(cb, activePreFlushCbs, pendingPreFlushCbs, preFlushIndex);
}
function queuePostFlushCb(cb) {
    queueCb(cb, activePostFlushCbs, pendingPostFlushCbs, postFlushIndex);
}
function flushPreFlushCbs(seen, parentJob = null) {
    if (pendingPreFlushCbs.length) {
        currentPreFlushParentJob = parentJob;
        activePreFlushCbs = [...new Set(pendingPreFlushCbs)];
        pendingPreFlushCbs.length = 0;
        if ((false)) {}
        for (preFlushIndex = 0; preFlushIndex < activePreFlushCbs.length; preFlushIndex++) {
            if (false) {}
            activePreFlushCbs[preFlushIndex]();
        }
        activePreFlushCbs = null;
        preFlushIndex = 0;
        currentPreFlushParentJob = null;
        // recursively flush until it drains
        flushPreFlushCbs(seen, parentJob);
    }
}
function flushPostFlushCbs(seen) {
    // flush any pre cbs queued during the flush (e.g. pre watchers)
    flushPreFlushCbs();
    if (pendingPostFlushCbs.length) {
        const deduped = [...new Set(pendingPostFlushCbs)];
        pendingPostFlushCbs.length = 0;
        // #1947 already has active queue, nested flushPostFlushCbs call
        if (activePostFlushCbs) {
            activePostFlushCbs.push(...deduped);
            return;
        }
        activePostFlushCbs = deduped;
        if ((false)) {}
        activePostFlushCbs.sort((a, b) => getId(a) - getId(b));
        for (postFlushIndex = 0; postFlushIndex < activePostFlushCbs.length; postFlushIndex++) {
            if (false) {}
            activePostFlushCbs[postFlushIndex]();
        }
        activePostFlushCbs = null;
        postFlushIndex = 0;
    }
}
const getId = (job) => job.id == null ? Infinity : job.id;
function flushJobs(seen) {
    isFlushPending = false;
    isFlushing = true;
    if ((false)) {}
    flushPreFlushCbs(seen);
    // Sort queue before flush.
    // This ensures that:
    // 1. Components are updated from parent to child. (because parent is always
    //    created before the child so its render effect will have smaller
    //    priority number)
    // 2. If a component is unmounted during a parent component's update,
    //    its update can be skipped.
    queue.sort((a, b) => getId(a) - getId(b));
    // conditional usage of checkRecursiveUpdate must be determined out of
    // try ... catch block since Rollup by default de-optimizes treeshaking
    // inside try-catch. This can leave all warning code unshaked. Although
    // they would get eventually shaken by a minifier like terser, some minifiers
    // would fail to do that (e.g. https://github.com/evanw/esbuild/issues/1610)
    const check = ( false)
        ? 0
        : _vue_shared__WEBPACK_IMPORTED_MODULE_1__/* .NOOP */ .dG;
    try {
        for (flushIndex = 0; flushIndex < queue.length; flushIndex++) {
            const job = queue[flushIndex];
            if (job && job.active !== false) {
                if (false) {}
                // console.log(`running:`, job.id)
                callWithErrorHandling(job, null, 14 /* SCHEDULER */);
            }
        }
    }
    finally {
        flushIndex = 0;
        queue.length = 0;
        flushPostFlushCbs(seen);
        isFlushing = false;
        currentFlushPromise = null;
        // some postFlushCb queued jobs!
        // keep flushing until it drains.
        if (queue.length ||
            pendingPreFlushCbs.length ||
            pendingPostFlushCbs.length) {
            flushJobs(seen);
        }
    }
}
function checkRecursiveUpdates(seen, fn) {
    if (!seen.has(fn)) {
        seen.set(fn, 1);
    }
    else {
        const count = seen.get(fn);
        if (count > RECURSION_LIMIT) {
            const instance = fn.ownerInstance;
            const componentName = instance && getComponentName(instance.type);
            warn(`Maximum recursive updates exceeded${componentName ? ` in component <${componentName}>` : ``}. ` +
                `This means you have a reactive effect that is mutating its own ` +
                `dependencies and thus recursively triggering itself. Possible sources ` +
                `include component template, render function, updated hook or ` +
                `watcher source function.`);
            return true;
        }
        else {
            seen.set(fn, count + 1);
        }
    }
}

/* eslint-disable no-restricted-globals */
let isHmrUpdating = false;
const hmrDirtyComponents = new Set();
// Expose the HMR runtime on the global object
// This makes it entirely tree-shakable without polluting the exports and makes
// it easier to be used in toolings like vue-loader
// Note: for a component to be eligible for HMR it also needs the __hmrId option
// to be set so that its instances can be registered / removed.
if ((false)) {}
const map = new Map();
function registerHMR(instance) {
    const id = instance.type.__hmrId;
    let record = map.get(id);
    if (!record) {
        createRecord(id, instance.type);
        record = map.get(id);
    }
    record.instances.add(instance);
}
function unregisterHMR(instance) {
    map.get(instance.type.__hmrId).instances.delete(instance);
}
function createRecord(id, initialDef) {
    if (map.has(id)) {
        return false;
    }
    map.set(id, {
        initialDef: normalizeClassComponent(initialDef),
        instances: new Set()
    });
    return true;
}
function normalizeClassComponent(component) {
    return isClassComponent(component) ? component.__vccOpts : component;
}
function rerender(id, newRender) {
    const record = map.get(id);
    if (!record) {
        return;
    }
    // update initial record (for not-yet-rendered component)
    record.initialDef.render = newRender;
    [...record.instances].forEach(instance => {
        if (newRender) {
            instance.render = newRender;
            normalizeClassComponent(instance.type).render = newRender;
        }
        instance.renderCache = [];
        // this flag forces child components with slot content to update
        isHmrUpdating = true;
        instance.update();
        isHmrUpdating = false;
    });
}
function reload(id, newComp) {
    const record = map.get(id);
    if (!record)
        return;
    newComp = normalizeClassComponent(newComp);
    // update initial def (for not-yet-rendered components)
    updateComponentDef(record.initialDef, newComp);
    // create a snapshot which avoids the set being mutated during updates
    const instances = [...record.instances];
    for (const instance of instances) {
        const oldComp = normalizeClassComponent(instance.type);
        if (!hmrDirtyComponents.has(oldComp)) {
            // 1. Update existing comp definition to match new one
            if (oldComp !== record.initialDef) {
                updateComponentDef(oldComp, newComp);
            }
            // 2. mark definition dirty. This forces the renderer to replace the
            // component on patch.
            hmrDirtyComponents.add(oldComp);
        }
        // 3. invalidate options resolution cache
        instance.appContext.optionsCache.delete(instance.type);
        // 4. actually update
        if (instance.ceReload) {
            // custom element
            hmrDirtyComponents.add(oldComp);
            instance.ceReload(newComp.styles);
            hmrDirtyComponents.delete(oldComp);
        }
        else if (instance.parent) {
            // 4. Force the parent instance to re-render. This will cause all updated
            // components to be unmounted and re-mounted. Queue the update so that we
            // don't end up forcing the same parent to re-render multiple times.
            queueJob(instance.parent.update);
            // instance is the inner component of an async custom element
            // invoke to reset styles
            if (instance.parent.type.__asyncLoader &&
                instance.parent.ceReload) {
                instance.parent.ceReload(newComp.styles);
            }
        }
        else if (instance.appContext.reload) {
            // root instance mounted via createApp() has a reload method
            instance.appContext.reload();
        }
        else if (typeof window !== 'undefined') {
            // root instance inside tree created via raw render(). Force reload.
            window.location.reload();
        }
        else {
            console.warn('[HMR] Root or manually mounted instance modified. Full reload required.');
        }
    }
    // 5. make sure to cleanup dirty hmr components after update
    queuePostFlushCb(() => {
        for (const instance of instances) {
            hmrDirtyComponents.delete(normalizeClassComponent(instance.type));
        }
    });
}
function updateComponentDef(oldComp, newComp) {
    extend(oldComp, newComp);
    for (const key in oldComp) {
        if (key !== '__file' && !(key in newComp)) {
            delete oldComp[key];
        }
    }
}
function tryWrap(fn) {
    return (id, arg) => {
        try {
            return fn(id, arg);
        }
        catch (e) {
            console.error(e);
            console.warn(`[HMR] Something went wrong during Vue component hot-reload. ` +
                `Full reload required.`);
        }
    };
}

let devtools;
let buffer = [];
let devtoolsNotInstalled = false;
function emit(event, ...args) {
    if (devtools) {
        devtools.emit(event, ...args);
    }
    else if (!devtoolsNotInstalled) {
        buffer.push({ event, args });
    }
}
function setDevtoolsHook(hook, target) {
    var _a, _b;
    devtools = hook;
    if (devtools) {
        devtools.enabled = true;
        buffer.forEach(({ event, args }) => devtools.emit(event, ...args));
        buffer = [];
    }
    else if (
    // handle late devtools injection - only do this if we are in an actual
    // browser environment to avoid the timer handle stalling test runner exit
    // (#4815)
    typeof window !== 'undefined' &&
        // some envs mock window but not fully
        window.HTMLElement &&
        // also exclude jsdom
        !((_b = (_a = window.navigator) === null || _a === void 0 ? void 0 : _a.userAgent) === null || _b === void 0 ? void 0 : _b.includes('jsdom'))) {
        const replay = (target.__VUE_DEVTOOLS_HOOK_REPLAY__ =
            target.__VUE_DEVTOOLS_HOOK_REPLAY__ || []);
        replay.push((newHook) => {
            setDevtoolsHook(newHook, target);
        });
        // clear buffer after 3s - the user probably doesn't have devtools installed
        // at all, and keeping the buffer will cause memory leaks (#4738)
        setTimeout(() => {
            if (!devtools) {
                target.__VUE_DEVTOOLS_HOOK_REPLAY__ = null;
                devtoolsNotInstalled = true;
                buffer = [];
            }
        }, 3000);
    }
    else {
        // non-browser env, assume not installed
        devtoolsNotInstalled = true;
        buffer = [];
    }
}
function devtoolsInitApp(app, version) {
    emit("app:init" /* APP_INIT */, app, version, {
        Fragment,
        Text,
        Comment,
        Static
    });
}
function devtoolsUnmountApp(app) {
    emit("app:unmount" /* APP_UNMOUNT */, app);
}
const devtoolsComponentAdded = /*#__PURE__*/ createDevtoolsComponentHook("component:added" /* COMPONENT_ADDED */);
const devtoolsComponentUpdated = 
/*#__PURE__*/ createDevtoolsComponentHook("component:updated" /* COMPONENT_UPDATED */);
const devtoolsComponentRemoved = 
/*#__PURE__*/ createDevtoolsComponentHook("component:removed" /* COMPONENT_REMOVED */);
function createDevtoolsComponentHook(hook) {
    return (component) => {
        emit(hook, component.appContext.app, component.uid, component.parent ? component.parent.uid : undefined, component);
    };
}
const devtoolsPerfStart = /*#__PURE__*/ (/* unused pure expression or super */ null && (createDevtoolsPerformanceHook("perf:start" /* PERFORMANCE_START */)));
const devtoolsPerfEnd = /*#__PURE__*/ (/* unused pure expression or super */ null && (createDevtoolsPerformanceHook("perf:end" /* PERFORMANCE_END */)));
function createDevtoolsPerformanceHook(hook) {
    return (component, type, time) => {
        emit(hook, component.appContext.app, component.uid, component, type, time);
    };
}
function devtoolsComponentEmit(component, event, params) {
    emit("component:emit" /* COMPONENT_EMIT */, component.appContext.app, component, event, params);
}

function emit$1(instance, event, ...rawArgs) {
    if (instance.isUnmounted)
        return;
    const props = instance.vnode.props || _vue_shared__WEBPACK_IMPORTED_MODULE_1__/* .EMPTY_OBJ */ .kT;
    if ((false)) {}
    let args = rawArgs;
    const isModelListener = event.startsWith('update:');
    // for v-model update:xxx events, apply modifiers on args
    const modelArg = isModelListener && event.slice(7);
    if (modelArg && modelArg in props) {
        const modifiersKey = `${modelArg === 'modelValue' ? 'model' : modelArg}Modifiers`;
        const { number, trim } = props[modifiersKey] || _vue_shared__WEBPACK_IMPORTED_MODULE_1__/* .EMPTY_OBJ */ .kT;
        if (trim) {
            args = rawArgs.map(a => a.trim());
        }
        if (number) {
            args = rawArgs.map(_vue_shared__WEBPACK_IMPORTED_MODULE_1__/* .toNumber */ .He);
        }
    }
    if (( false) || __VUE_PROD_DEVTOOLS__) {
        devtoolsComponentEmit(instance, event, args);
    }
    if ((false)) {}
    let handlerName;
    let handler = props[(handlerName = (0,_vue_shared__WEBPACK_IMPORTED_MODULE_1__/* .toHandlerKey */ .hR)(event))] ||
        // also try camelCase event handler (#2249)
        props[(handlerName = (0,_vue_shared__WEBPACK_IMPORTED_MODULE_1__/* .toHandlerKey */ .hR)((0,_vue_shared__WEBPACK_IMPORTED_MODULE_1__/* .camelize */ ._A)(event)))];
    // for v-model update:xxx events, also trigger kebab-case equivalent
    // for props passed via kebab-case
    if (!handler && isModelListener) {
        handler = props[(handlerName = (0,_vue_shared__WEBPACK_IMPORTED_MODULE_1__/* .toHandlerKey */ .hR)((0,_vue_shared__WEBPACK_IMPORTED_MODULE_1__/* .hyphenate */ .rs)(event)))];
    }
    if (handler) {
        callWithAsyncErrorHandling(handler, instance, 6 /* COMPONENT_EVENT_HANDLER */, args);
    }
    const onceHandler = props[handlerName + `Once`];
    if (onceHandler) {
        if (!instance.emitted) {
            instance.emitted = {};
        }
        else if (instance.emitted[handlerName]) {
            return;
        }
        instance.emitted[handlerName] = true;
        callWithAsyncErrorHandling(onceHandler, instance, 6 /* COMPONENT_EVENT_HANDLER */, args);
    }
}
function normalizeEmitsOptions(comp, appContext, asMixin = false) {
    const cache = appContext.emitsCache;
    const cached = cache.get(comp);
    if (cached !== undefined) {
        return cached;
    }
    const raw = comp.emits;
    let normalized = {};
    // apply mixin/extends props
    let hasExtends = false;
    if (__VUE_OPTIONS_API__ && !(0,_vue_shared__WEBPACK_IMPORTED_MODULE_1__/* .isFunction */ .mf)(comp)) {
        const extendEmits = (raw) => {
            const normalizedFromExtend = normalizeEmitsOptions(raw, appContext, true);
            if (normalizedFromExtend) {
                hasExtends = true;
                (0,_vue_shared__WEBPACK_IMPORTED_MODULE_1__/* .extend */ .l7)(normalized, normalizedFromExtend);
            }
        };
        if (!asMixin && appContext.mixins.length) {
            appContext.mixins.forEach(extendEmits);
        }
        if (comp.extends) {
            extendEmits(comp.extends);
        }
        if (comp.mixins) {
            comp.mixins.forEach(extendEmits);
        }
    }
    if (!raw && !hasExtends) {
        cache.set(comp, null);
        return null;
    }
    if ((0,_vue_shared__WEBPACK_IMPORTED_MODULE_1__/* .isArray */ .kJ)(raw)) {
        raw.forEach(key => (normalized[key] = null));
    }
    else {
        (0,_vue_shared__WEBPACK_IMPORTED_MODULE_1__/* .extend */ .l7)(normalized, raw);
    }
    cache.set(comp, normalized);
    return normalized;
}
// Check if an incoming prop key is a declared emit event listener.
// e.g. With `emits: { click: null }`, props named `onClick` and `onclick` are
// both considered matched listeners.
function isEmitListener(options, key) {
    if (!options || !(0,_vue_shared__WEBPACK_IMPORTED_MODULE_1__/* .isOn */ .F7)(key)) {
        return false;
    }
    key = key.slice(2).replace(/Once$/, '');
    return ((0,_vue_shared__WEBPACK_IMPORTED_MODULE_1__/* .hasOwn */ .RI)(options, key[0].toLowerCase() + key.slice(1)) ||
        (0,_vue_shared__WEBPACK_IMPORTED_MODULE_1__/* .hasOwn */ .RI)(options, (0,_vue_shared__WEBPACK_IMPORTED_MODULE_1__/* .hyphenate */ .rs)(key)) ||
        (0,_vue_shared__WEBPACK_IMPORTED_MODULE_1__/* .hasOwn */ .RI)(options, key));
}

/**
 * mark the current rendering instance for asset resolution (e.g.
 * resolveComponent, resolveDirective) during render
 */
let currentRenderingInstance = null;
let currentScopeId = null;
/**
 * Note: rendering calls maybe nested. The function returns the parent rendering
 * instance if present, which should be restored after the render is done:
 *
 * ```js
 * const prev = setCurrentRenderingInstance(i)
 * // ...render
 * setCurrentRenderingInstance(prev)
 * ```
 */
function setCurrentRenderingInstance(instance) {
    const prev = currentRenderingInstance;
    currentRenderingInstance = instance;
    currentScopeId = (instance && instance.type.__scopeId) || null;
    return prev;
}
/**
 * Set scope id when creating hoisted vnodes.
 * @private compiler helper
 */
function pushScopeId(id) {
    currentScopeId = id;
}
/**
 * Technically we no longer need this after 3.0.8 but we need to keep the same
 * API for backwards compat w/ code generated by compilers.
 * @private
 */
function popScopeId() {
    currentScopeId = null;
}
/**
 * Only for backwards compat
 * @private
 */
const withScopeId = (_id) => withCtx;
/**
 * Wrap a slot function to memoize current rendering instance
 * @private compiler helper
 */
function withCtx(fn, ctx = currentRenderingInstance, isNonScopedSlot // false only
) {
    if (!ctx)
        return fn;
    // already normalized
    if (fn._n) {
        return fn;
    }
    const renderFnWithContext = (...args) => {
        // If a user calls a compiled slot inside a template expression (#1745), it
        // can mess up block tracking, so by default we disable block tracking and
        // force bail out when invoking a compiled slot (indicated by the ._d flag).
        // This isn't necessary if rendering a compiled `<slot>`, so we flip the
        // ._d flag off when invoking the wrapped fn inside `renderSlot`.
        if (renderFnWithContext._d) {
            setBlockTracking(-1);
        }
        const prevInstance = setCurrentRenderingInstance(ctx);
        const res = fn(...args);
        setCurrentRenderingInstance(prevInstance);
        if (renderFnWithContext._d) {
            setBlockTracking(1);
        }
        if (( false) || __VUE_PROD_DEVTOOLS__) {
            devtoolsComponentUpdated(ctx);
        }
        return res;
    };
    // mark normalized to avoid duplicated wrapping
    renderFnWithContext._n = true;
    // mark this as compiled by default
    // this is used in vnode.ts -> normalizeChildren() to set the slot
    // rendering flag.
    renderFnWithContext._c = true;
    // disable block tracking by default
    renderFnWithContext._d = true;
    return renderFnWithContext;
}

/**
 * dev only flag to track whether $attrs was used during render.
 * If $attrs was used during render then the warning for failed attrs
 * fallthrough can be suppressed.
 */
let accessedAttrs = false;
function markAttrsAccessed() {
    accessedAttrs = true;
}
function renderComponentRoot(instance) {
    const { type: Component, vnode, proxy, withProxy, props, propsOptions: [propsOptions], slots, attrs, emit, render, renderCache, data, setupState, ctx, inheritAttrs } = instance;
    let result;
    let fallthroughAttrs;
    const prev = setCurrentRenderingInstance(instance);
    if ((false)) {}
    try {
        if (vnode.shapeFlag & 4 /* STATEFUL_COMPONENT */) {
            // withProxy is a proxy with a different `has` trap only for
            // runtime-compiled render functions using `with` block.
            const proxyToUse = withProxy || proxy;
            result = normalizeVNode(render.call(proxyToUse, proxyToUse, renderCache, props, setupState, data, ctx));
            fallthroughAttrs = attrs;
        }
        else {
            // functional
            const render = Component;
            // in dev, mark attrs accessed if optional props (attrs === props)
            if (false) {}
            result = normalizeVNode(render.length > 1
                ? render(props, ( false)
                    ? 0
                    : { attrs, slots, emit })
                : render(props, null /* we know it doesn't need it */));
            fallthroughAttrs = Component.props
                ? attrs
                : getFunctionalFallthrough(attrs);
        }
    }
    catch (err) {
        blockStack.length = 0;
        handleError(err, instance, 1 /* RENDER_FUNCTION */);
        result = createVNode(Comment);
    }
    // attr merging
    // in dev mode, comments are preserved, and it's possible for a template
    // to have comments along side the root element which makes it a fragment
    let root = result;
    let setRoot = undefined;
    if (false /* DEV_ROOT_FRAGMENT */) {}
    if (fallthroughAttrs && inheritAttrs !== false) {
        const keys = Object.keys(fallthroughAttrs);
        const { shapeFlag } = root;
        if (keys.length) {
            if (shapeFlag & (1 /* ELEMENT */ | 6 /* COMPONENT */)) {
                if (propsOptions && keys.some(_vue_shared__WEBPACK_IMPORTED_MODULE_1__/* .isModelListener */ .tR)) {
                    // If a v-model listener (onUpdate:xxx) has a corresponding declared
                    // prop, it indicates this component expects to handle v-model and
                    // it should not fallthrough.
                    // related: #1543, #1643, #1989
                    fallthroughAttrs = filterModelListeners(fallthroughAttrs, propsOptions);
                }
                root = cloneVNode(root, fallthroughAttrs);
            }
            else if (false) {}
        }
    }
    // inherit directives
    if (vnode.dirs) {
        if (false) {}
        // clone before mutating since the root may be a hoisted vnode
        root = cloneVNode(root);
        root.dirs = root.dirs ? root.dirs.concat(vnode.dirs) : vnode.dirs;
    }
    // inherit transition data
    if (vnode.transition) {
        if (false) {}
        root.transition = vnode.transition;
    }
    if (false) {}
    else {
        result = root;
    }
    setCurrentRenderingInstance(prev);
    return result;
}
/**
 * dev only
 * In dev mode, template root level comments are rendered, which turns the
 * template into a fragment root, but we need to locate the single element
 * root for attrs and scope id processing.
 */
const getChildRoot = (vnode) => {
    const rawChildren = vnode.children;
    const dynamicChildren = vnode.dynamicChildren;
    const childRoot = filterSingleRoot(rawChildren);
    if (!childRoot) {
        return [vnode, undefined];
    }
    const index = rawChildren.indexOf(childRoot);
    const dynamicIndex = dynamicChildren ? dynamicChildren.indexOf(childRoot) : -1;
    const setRoot = (updatedRoot) => {
        rawChildren[index] = updatedRoot;
        if (dynamicChildren) {
            if (dynamicIndex > -1) {
                dynamicChildren[dynamicIndex] = updatedRoot;
            }
            else if (updatedRoot.patchFlag > 0) {
                vnode.dynamicChildren = [...dynamicChildren, updatedRoot];
            }
        }
    };
    return [normalizeVNode(childRoot), setRoot];
};
function filterSingleRoot(children) {
    let singleRoot;
    for (let i = 0; i < children.length; i++) {
        const child = children[i];
        if (isVNode(child)) {
            // ignore user comment
            if (child.type !== Comment || child.children === 'v-if') {
                if (singleRoot) {
                    // has more than 1 non-comment child, return now
                    return;
                }
                else {
                    singleRoot = child;
                }
            }
        }
        else {
            return;
        }
    }
    return singleRoot;
}
const getFunctionalFallthrough = (attrs) => {
    let res;
    for (const key in attrs) {
        if (key === 'class' || key === 'style' || (0,_vue_shared__WEBPACK_IMPORTED_MODULE_1__/* .isOn */ .F7)(key)) {
            (res || (res = {}))[key] = attrs[key];
        }
    }
    return res;
};
const filterModelListeners = (attrs, props) => {
    const res = {};
    for (const key in attrs) {
        if (!(0,_vue_shared__WEBPACK_IMPORTED_MODULE_1__/* .isModelListener */ .tR)(key) || !(key.slice(9) in props)) {
            res[key] = attrs[key];
        }
    }
    return res;
};
const isElementRoot = (vnode) => {
    return (vnode.shapeFlag & (6 /* COMPONENT */ | 1 /* ELEMENT */) ||
        vnode.type === Comment // potential v-if branch switch
    );
};
function shouldUpdateComponent(prevVNode, nextVNode, optimized) {
    const { props: prevProps, children: prevChildren, component } = prevVNode;
    const { props: nextProps, children: nextChildren, patchFlag } = nextVNode;
    const emits = component.emitsOptions;
    // Parent component's render function was hot-updated. Since this may have
    // caused the child component's slots content to have changed, we need to
    // force the child to update as well.
    if (false) {}
    // force child update for runtime directive or transition on component vnode.
    if (nextVNode.dirs || nextVNode.transition) {
        return true;
    }
    if (optimized && patchFlag >= 0) {
        if (patchFlag & 1024 /* DYNAMIC_SLOTS */) {
            // slot content that references values that might have changed,
            // e.g. in a v-for
            return true;
        }
        if (patchFlag & 16 /* FULL_PROPS */) {
            if (!prevProps) {
                return !!nextProps;
            }
            // presence of this flag indicates props are always non-null
            return hasPropsChanged(prevProps, nextProps, emits);
        }
        else if (patchFlag & 8 /* PROPS */) {
            const dynamicProps = nextVNode.dynamicProps;
            for (let i = 0; i < dynamicProps.length; i++) {
                const key = dynamicProps[i];
                if (nextProps[key] !== prevProps[key] &&
                    !isEmitListener(emits, key)) {
                    return true;
                }
            }
        }
    }
    else {
        // this path is only taken by manually written render functions
        // so presence of any children leads to a forced update
        if (prevChildren || nextChildren) {
            if (!nextChildren || !nextChildren.$stable) {
                return true;
            }
        }
        if (prevProps === nextProps) {
            return false;
        }
        if (!prevProps) {
            return !!nextProps;
        }
        if (!nextProps) {
            return true;
        }
        return hasPropsChanged(prevProps, nextProps, emits);
    }
    return false;
}
function hasPropsChanged(prevProps, nextProps, emitsOptions) {
    const nextKeys = Object.keys(nextProps);
    if (nextKeys.length !== Object.keys(prevProps).length) {
        return true;
    }
    for (let i = 0; i < nextKeys.length; i++) {
        const key = nextKeys[i];
        if (nextProps[key] !== prevProps[key] &&
            !isEmitListener(emitsOptions, key)) {
            return true;
        }
    }
    return false;
}
function updateHOCHostEl({ vnode, parent }, el // HostNode
) {
    while (parent && parent.subTree === vnode) {
        (vnode = parent.vnode).el = el;
        parent = parent.parent;
    }
}

const isSuspense = (type) => type.__isSuspense;
// Suspense exposes a component-like API, and is treated like a component
// in the compiler, but internally it's a special built-in type that hooks
// directly into the renderer.
const SuspenseImpl = {
    name: 'Suspense',
    // In order to make Suspense tree-shakable, we need to avoid importing it
    // directly in the renderer. The renderer checks for the __isSuspense flag
    // on a vnode's type and calls the `process` method, passing in renderer
    // internals.
    __isSuspense: true,
    process(n1, n2, container, anchor, parentComponent, parentSuspense, isSVG, slotScopeIds, optimized, 
    // platform-specific impl passed from renderer
    rendererInternals) {
        if (n1 == null) {
            mountSuspense(n2, container, anchor, parentComponent, parentSuspense, isSVG, slotScopeIds, optimized, rendererInternals);
        }
        else {
            patchSuspense(n1, n2, container, anchor, parentComponent, isSVG, slotScopeIds, optimized, rendererInternals);
        }
    },
    hydrate: hydrateSuspense,
    create: createSuspenseBoundary,
    normalize: normalizeSuspenseChildren
};
// Force-casted public typing for h and TSX props inference
const Suspense = ((/* unused pure expression or super */ null && (SuspenseImpl)) );
function triggerEvent(vnode, name) {
    const eventListener = vnode.props && vnode.props[name];
    if ((0,_vue_shared__WEBPACK_IMPORTED_MODULE_1__/* .isFunction */ .mf)(eventListener)) {
        eventListener();
    }
}
function mountSuspense(vnode, container, anchor, parentComponent, parentSuspense, isSVG, slotScopeIds, optimized, rendererInternals) {
    const { p: patch, o: { createElement } } = rendererInternals;
    const hiddenContainer = createElement('div');
    const suspense = (vnode.suspense = createSuspenseBoundary(vnode, parentSuspense, parentComponent, container, hiddenContainer, anchor, isSVG, slotScopeIds, optimized, rendererInternals));
    // start mounting the content subtree in an off-dom container
    patch(null, (suspense.pendingBranch = vnode.ssContent), hiddenContainer, null, parentComponent, suspense, isSVG, slotScopeIds);
    // now check if we have encountered any async deps
    if (suspense.deps > 0) {
        // has async
        // invoke @fallback event
        triggerEvent(vnode, 'onPending');
        triggerEvent(vnode, 'onFallback');
        // mount the fallback tree
        patch(null, vnode.ssFallback, container, anchor, parentComponent, null, // fallback tree will not have suspense context
        isSVG, slotScopeIds);
        setActiveBranch(suspense, vnode.ssFallback);
    }
    else {
        // Suspense has no async deps. Just resolve.
        suspense.resolve();
    }
}
function patchSuspense(n1, n2, container, anchor, parentComponent, isSVG, slotScopeIds, optimized, { p: patch, um: unmount, o: { createElement } }) {
    const suspense = (n2.suspense = n1.suspense);
    suspense.vnode = n2;
    n2.el = n1.el;
    const newBranch = n2.ssContent;
    const newFallback = n2.ssFallback;
    const { activeBranch, pendingBranch, isInFallback, isHydrating } = suspense;
    if (pendingBranch) {
        suspense.pendingBranch = newBranch;
        if (isSameVNodeType(newBranch, pendingBranch)) {
            // same root type but content may have changed.
            patch(pendingBranch, newBranch, suspense.hiddenContainer, null, parentComponent, suspense, isSVG, slotScopeIds, optimized);
            if (suspense.deps <= 0) {
                suspense.resolve();
            }
            else if (isInFallback) {
                patch(activeBranch, newFallback, container, anchor, parentComponent, null, // fallback tree will not have suspense context
                isSVG, slotScopeIds, optimized);
                setActiveBranch(suspense, newFallback);
            }
        }
        else {
            // toggled before pending tree is resolved
            suspense.pendingId++;
            if (isHydrating) {
                // if toggled before hydration is finished, the current DOM tree is
                // no longer valid. set it as the active branch so it will be unmounted
                // when resolved
                suspense.isHydrating = false;
                suspense.activeBranch = pendingBranch;
            }
            else {
                unmount(pendingBranch, parentComponent, suspense);
            }
            // increment pending ID. this is used to invalidate async callbacks
            // reset suspense state
            suspense.deps = 0;
            // discard effects from pending branch
            suspense.effects.length = 0;
            // discard previous container
            suspense.hiddenContainer = createElement('div');
            if (isInFallback) {
                // already in fallback state
                patch(null, newBranch, suspense.hiddenContainer, null, parentComponent, suspense, isSVG, slotScopeIds, optimized);
                if (suspense.deps <= 0) {
                    suspense.resolve();
                }
                else {
                    patch(activeBranch, newFallback, container, anchor, parentComponent, null, // fallback tree will not have suspense context
                    isSVG, slotScopeIds, optimized);
                    setActiveBranch(suspense, newFallback);
                }
            }
            else if (activeBranch && isSameVNodeType(newBranch, activeBranch)) {
                // toggled "back" to current active branch
                patch(activeBranch, newBranch, container, anchor, parentComponent, suspense, isSVG, slotScopeIds, optimized);
                // force resolve
                suspense.resolve(true);
            }
            else {
                // switched to a 3rd branch
                patch(null, newBranch, suspense.hiddenContainer, null, parentComponent, suspense, isSVG, slotScopeIds, optimized);
                if (suspense.deps <= 0) {
                    suspense.resolve();
                }
            }
        }
    }
    else {
        if (activeBranch && isSameVNodeType(newBranch, activeBranch)) {
            // root did not change, just normal patch
            patch(activeBranch, newBranch, container, anchor, parentComponent, suspense, isSVG, slotScopeIds, optimized);
            setActiveBranch(suspense, newBranch);
        }
        else {
            // root node toggled
            // invoke @pending event
            triggerEvent(n2, 'onPending');
            // mount pending branch in off-dom container
            suspense.pendingBranch = newBranch;
            suspense.pendingId++;
            patch(null, newBranch, suspense.hiddenContainer, null, parentComponent, suspense, isSVG, slotScopeIds, optimized);
            if (suspense.deps <= 0) {
                // incoming branch has no async deps, resolve now.
                suspense.resolve();
            }
            else {
                const { timeout, pendingId } = suspense;
                if (timeout > 0) {
                    setTimeout(() => {
                        if (suspense.pendingId === pendingId) {
                            suspense.fallback(newFallback);
                        }
                    }, timeout);
                }
                else if (timeout === 0) {
                    suspense.fallback(newFallback);
                }
            }
        }
    }
}
let hasWarned = false;
function createSuspenseBoundary(vnode, parent, parentComponent, container, hiddenContainer, anchor, isSVG, slotScopeIds, optimized, rendererInternals, isHydrating = false) {
    /* istanbul ignore if */
    if (false) {}
    const { p: patch, m: move, um: unmount, n: next, o: { parentNode, remove } } = rendererInternals;
    const timeout = (0,_vue_shared__WEBPACK_IMPORTED_MODULE_1__/* .toNumber */ .He)(vnode.props && vnode.props.timeout);
    const suspense = {
        vnode,
        parent,
        parentComponent,
        isSVG,
        container,
        hiddenContainer,
        anchor,
        deps: 0,
        pendingId: 0,
        timeout: typeof timeout === 'number' ? timeout : -1,
        activeBranch: null,
        pendingBranch: null,
        isInFallback: true,
        isHydrating,
        isUnmounted: false,
        effects: [],
        resolve(resume = false) {
            if ((false)) {}
            const { vnode, activeBranch, pendingBranch, pendingId, effects, parentComponent, container } = suspense;
            if (suspense.isHydrating) {
                suspense.isHydrating = false;
            }
            else if (!resume) {
                const delayEnter = activeBranch &&
                    pendingBranch.transition &&
                    pendingBranch.transition.mode === 'out-in';
                if (delayEnter) {
                    activeBranch.transition.afterLeave = () => {
                        if (pendingId === suspense.pendingId) {
                            move(pendingBranch, container, anchor, 0 /* ENTER */);
                        }
                    };
                }
                // this is initial anchor on mount
                let { anchor } = suspense;
                // unmount current active tree
                if (activeBranch) {
                    // if the fallback tree was mounted, it may have been moved
                    // as part of a parent suspense. get the latest anchor for insertion
                    anchor = next(activeBranch);
                    unmount(activeBranch, parentComponent, suspense, true);
                }
                if (!delayEnter) {
                    // move content from off-dom container to actual container
                    move(pendingBranch, container, anchor, 0 /* ENTER */);
                }
            }
            setActiveBranch(suspense, pendingBranch);
            suspense.pendingBranch = null;
            suspense.isInFallback = false;
            // flush buffered effects
            // check if there is a pending parent suspense
            let parent = suspense.parent;
            let hasUnresolvedAncestor = false;
            while (parent) {
                if (parent.pendingBranch) {
                    // found a pending parent suspense, merge buffered post jobs
                    // into that parent
                    parent.effects.push(...effects);
                    hasUnresolvedAncestor = true;
                    break;
                }
                parent = parent.parent;
            }
            // no pending parent suspense, flush all jobs
            if (!hasUnresolvedAncestor) {
                queuePostFlushCb(effects);
            }
            suspense.effects = [];
            // invoke @resolve event
            triggerEvent(vnode, 'onResolve');
        },
        fallback(fallbackVNode) {
            if (!suspense.pendingBranch) {
                return;
            }
            const { vnode, activeBranch, parentComponent, container, isSVG } = suspense;
            // invoke @fallback event
            triggerEvent(vnode, 'onFallback');
            const anchor = next(activeBranch);
            const mountFallback = () => {
                if (!suspense.isInFallback) {
                    return;
                }
                // mount the fallback tree
                patch(null, fallbackVNode, container, anchor, parentComponent, null, // fallback tree will not have suspense context
                isSVG, slotScopeIds, optimized);
                setActiveBranch(suspense, fallbackVNode);
            };
            const delayEnter = fallbackVNode.transition && fallbackVNode.transition.mode === 'out-in';
            if (delayEnter) {
                activeBranch.transition.afterLeave = mountFallback;
            }
            suspense.isInFallback = true;
            // unmount current active branch
            unmount(activeBranch, parentComponent, null, // no suspense so unmount hooks fire now
            true // shouldRemove
            );
            if (!delayEnter) {
                mountFallback();
            }
        },
        move(container, anchor, type) {
            suspense.activeBranch &&
                move(suspense.activeBranch, container, anchor, type);
            suspense.container = container;
        },
        next() {
            return suspense.activeBranch && next(suspense.activeBranch);
        },
        registerDep(instance, setupRenderEffect) {
            const isInPendingSuspense = !!suspense.pendingBranch;
            if (isInPendingSuspense) {
                suspense.deps++;
            }
            const hydratedEl = instance.vnode.el;
            instance
                .asyncDep.catch(err => {
                handleError(err, instance, 0 /* SETUP_FUNCTION */);
            })
                .then(asyncSetupResult => {
                // retry when the setup() promise resolves.
                // component may have been unmounted before resolve.
                if (instance.isUnmounted ||
                    suspense.isUnmounted ||
                    suspense.pendingId !== instance.suspenseId) {
                    return;
                }
                // retry from this component
                instance.asyncResolved = true;
                const { vnode } = instance;
                if ((false)) {}
                handleSetupResult(instance, asyncSetupResult, false);
                if (hydratedEl) {
                    // vnode may have been replaced if an update happened before the
                    // async dep is resolved.
                    vnode.el = hydratedEl;
                }
                const placeholder = !hydratedEl && instance.subTree.el;
                setupRenderEffect(instance, vnode, 
                // component may have been moved before resolve.
                // if this is not a hydration, instance.subTree will be the comment
                // placeholder.
                parentNode(hydratedEl || instance.subTree.el), 
                // anchor will not be used if this is hydration, so only need to
                // consider the comment placeholder case.
                hydratedEl ? null : next(instance.subTree), suspense, isSVG, optimized);
                if (placeholder) {
                    remove(placeholder);
                }
                updateHOCHostEl(instance, vnode.el);
                if ((false)) {}
                // only decrease deps count if suspense is not already resolved
                if (isInPendingSuspense && --suspense.deps === 0) {
                    suspense.resolve();
                }
            });
        },
        unmount(parentSuspense, doRemove) {
            suspense.isUnmounted = true;
            if (suspense.activeBranch) {
                unmount(suspense.activeBranch, parentComponent, parentSuspense, doRemove);
            }
            if (suspense.pendingBranch) {
                unmount(suspense.pendingBranch, parentComponent, parentSuspense, doRemove);
            }
        }
    };
    return suspense;
}
function hydrateSuspense(node, vnode, parentComponent, parentSuspense, isSVG, slotScopeIds, optimized, rendererInternals, hydrateNode) {
    /* eslint-disable no-restricted-globals */
    const suspense = (vnode.suspense = createSuspenseBoundary(vnode, parentSuspense, parentComponent, node.parentNode, document.createElement('div'), null, isSVG, slotScopeIds, optimized, rendererInternals, true /* hydrating */));
    // there are two possible scenarios for server-rendered suspense:
    // - success: ssr content should be fully resolved
    // - failure: ssr content should be the fallback branch.
    // however, on the client we don't really know if it has failed or not
    // attempt to hydrate the DOM assuming it has succeeded, but we still
    // need to construct a suspense boundary first
    const result = hydrateNode(node, (suspense.pendingBranch = vnode.ssContent), parentComponent, suspense, slotScopeIds, optimized);
    if (suspense.deps === 0) {
        suspense.resolve();
    }
    return result;
    /* eslint-enable no-restricted-globals */
}
function normalizeSuspenseChildren(vnode) {
    const { shapeFlag, children } = vnode;
    const isSlotChildren = shapeFlag & 32 /* SLOTS_CHILDREN */;
    vnode.ssContent = normalizeSuspenseSlot(isSlotChildren ? children.default : children);
    vnode.ssFallback = isSlotChildren
        ? normalizeSuspenseSlot(children.fallback)
        : createVNode(Comment);
}
function normalizeSuspenseSlot(s) {
    let block;
    if ((0,_vue_shared__WEBPACK_IMPORTED_MODULE_1__/* .isFunction */ .mf)(s)) {
        const trackBlock = isBlockTreeEnabled && s._c;
        if (trackBlock) {
            // disableTracking: false
            // allow block tracking for compiled slots
            // (see ./componentRenderContext.ts)
            s._d = false;
            openBlock();
        }
        s = s();
        if (trackBlock) {
            s._d = true;
            block = currentBlock;
            closeBlock();
        }
    }
    if ((0,_vue_shared__WEBPACK_IMPORTED_MODULE_1__/* .isArray */ .kJ)(s)) {
        const singleChild = filterSingleRoot(s);
        if (false) {}
        s = singleChild;
    }
    s = normalizeVNode(s);
    if (block && !s.dynamicChildren) {
        s.dynamicChildren = block.filter(c => c !== s);
    }
    return s;
}
function queueEffectWithSuspense(fn, suspense) {
    if (suspense && suspense.pendingBranch) {
        if ((0,_vue_shared__WEBPACK_IMPORTED_MODULE_1__/* .isArray */ .kJ)(fn)) {
            suspense.effects.push(...fn);
        }
        else {
            suspense.effects.push(fn);
        }
    }
    else {
        queuePostFlushCb(fn);
    }
}
function setActiveBranch(suspense, branch) {
    suspense.activeBranch = branch;
    const { vnode, parentComponent } = suspense;
    const el = (vnode.el = branch.el);
    // in case suspense is the root node of a component,
    // recursively update the HOC el
    if (parentComponent && parentComponent.subTree === vnode) {
        parentComponent.vnode.el = el;
        updateHOCHostEl(parentComponent, el);
    }
}

function provide(key, value) {
    if (!currentInstance) {
        if ((false)) {}
    }
    else {
        let provides = currentInstance.provides;
        // by default an instance inherits its parent's provides object
        // but when it needs to provide values of its own, it creates its
        // own provides object using parent provides object as prototype.
        // this way in `inject` we can simply look up injections from direct
        // parent and let the prototype chain do the work.
        const parentProvides = currentInstance.parent && currentInstance.parent.provides;
        if (parentProvides === provides) {
            provides = currentInstance.provides = Object.create(parentProvides);
        }
        // TS doesn't allow symbol as index type
        provides[key] = value;
    }
}
function inject(key, defaultValue, treatDefaultAsFactory = false) {
    // fallback to `currentRenderingInstance` so that this can be called in
    // a functional component
    const instance = currentInstance || currentRenderingInstance;
    if (instance) {
        // #2400
        // to support `app.use` plugins,
        // fallback to appContext's `provides` if the instance is at root
        const provides = instance.parent == null
            ? instance.vnode.appContext && instance.vnode.appContext.provides
            : instance.parent.provides;
        if (provides && key in provides) {
            // TS doesn't allow symbol as index type
            return provides[key];
        }
        else if (arguments.length > 1) {
            return treatDefaultAsFactory && (0,_vue_shared__WEBPACK_IMPORTED_MODULE_1__/* .isFunction */ .mf)(defaultValue)
                ? defaultValue.call(instance.proxy)
                : defaultValue;
        }
        else if ((false)) {}
    }
    else if ((false)) {}
}

// Simple effect.
function watchEffect(effect, options) {
    return doWatch(effect, null, options);
}
function watchPostEffect(effect, options) {
    return doWatch(effect, null, (( false)
        ? 0 : { flush: 'post' }));
}
function watchSyncEffect(effect, options) {
    return doWatch(effect, null, (( false)
        ? 0 : { flush: 'sync' }));
}
// initial value for watchers to trigger on undefined initial values
const INITIAL_WATCHER_VALUE = {};
// implementation
function watch(source, cb, options) {
    if (false) {}
    return doWatch(source, cb, options);
}
function doWatch(source, cb, { immediate, deep, flush, onTrack, onTrigger } = _vue_shared__WEBPACK_IMPORTED_MODULE_1__/* .EMPTY_OBJ */ .kT) {
    if (false) {}
    const warnInvalidSource = (s) => {
        warn(`Invalid watch source: `, s, `A watch source can only be a getter/effect function, a ref, ` +
            `a reactive object, or an array of these types.`);
    };
    const instance = currentInstance;
    let getter;
    let forceTrigger = false;
    let isMultiSource = false;
    if ((0,_vue_reactivity__WEBPACK_IMPORTED_MODULE_0__/* .isRef */ .dq)(source)) {
        getter = () => source.value;
        forceTrigger = (0,_vue_reactivity__WEBPACK_IMPORTED_MODULE_0__/* .isShallow */ .yT)(source);
    }
    else if ((0,_vue_reactivity__WEBPACK_IMPORTED_MODULE_0__/* .isReactive */ .PG)(source)) {
        getter = () => source;
        deep = true;
    }
    else if ((0,_vue_shared__WEBPACK_IMPORTED_MODULE_1__/* .isArray */ .kJ)(source)) {
        isMultiSource = true;
        forceTrigger = source.some(s => (0,_vue_reactivity__WEBPACK_IMPORTED_MODULE_0__/* .isReactive */ .PG)(s) || (0,_vue_reactivity__WEBPACK_IMPORTED_MODULE_0__/* .isShallow */ .yT)(s));
        getter = () => source.map(s => {
            if ((0,_vue_reactivity__WEBPACK_IMPORTED_MODULE_0__/* .isRef */ .dq)(s)) {
                return s.value;
            }
            else if ((0,_vue_reactivity__WEBPACK_IMPORTED_MODULE_0__/* .isReactive */ .PG)(s)) {
                return traverse(s);
            }
            else if ((0,_vue_shared__WEBPACK_IMPORTED_MODULE_1__/* .isFunction */ .mf)(s)) {
                return callWithErrorHandling(s, instance, 2 /* WATCH_GETTER */);
            }
            else {
                ( false) && 0;
            }
        });
    }
    else if ((0,_vue_shared__WEBPACK_IMPORTED_MODULE_1__/* .isFunction */ .mf)(source)) {
        if (cb) {
            // getter with cb
            getter = () => callWithErrorHandling(source, instance, 2 /* WATCH_GETTER */);
        }
        else {
            // no cb -> simple effect
            getter = () => {
                if (instance && instance.isUnmounted) {
                    return;
                }
                if (cleanup) {
                    cleanup();
                }
                return callWithAsyncErrorHandling(source, instance, 3 /* WATCH_CALLBACK */, [onCleanup]);
            };
        }
    }
    else {
        getter = _vue_shared__WEBPACK_IMPORTED_MODULE_1__/* .NOOP */ .dG;
        ( false) && 0;
    }
    if (cb && deep) {
        const baseGetter = getter;
        getter = () => traverse(baseGetter());
    }
    let cleanup;
    let onCleanup = (fn) => {
        cleanup = effect.onStop = () => {
            callWithErrorHandling(fn, instance, 4 /* WATCH_CLEANUP */);
        };
    };
    // in SSR there is no need to setup an actual effect, and it should be noop
    // unless it's eager
    if (isInSSRComponentSetup) {
        // we will also not call the invalidate callback (+ runner is not set up)
        onCleanup = _vue_shared__WEBPACK_IMPORTED_MODULE_1__/* .NOOP */ .dG;
        if (!cb) {
            getter();
        }
        else if (immediate) {
            callWithAsyncErrorHandling(cb, instance, 3 /* WATCH_CALLBACK */, [
                getter(),
                isMultiSource ? [] : undefined,
                onCleanup
            ]);
        }
        return _vue_shared__WEBPACK_IMPORTED_MODULE_1__/* .NOOP */ .dG;
    }
    let oldValue = isMultiSource ? [] : INITIAL_WATCHER_VALUE;
    const job = () => {
        if (!effect.active) {
            return;
        }
        if (cb) {
            // watch(source, cb)
            const newValue = effect.run();
            if (deep ||
                forceTrigger ||
                (isMultiSource
                    ? newValue.some((v, i) => (0,_vue_shared__WEBPACK_IMPORTED_MODULE_1__/* .hasChanged */ .aU)(v, oldValue[i]))
                    : (0,_vue_shared__WEBPACK_IMPORTED_MODULE_1__/* .hasChanged */ .aU)(newValue, oldValue)) ||
                (false  )) {
                // cleanup before running cb again
                if (cleanup) {
                    cleanup();
                }
                callWithAsyncErrorHandling(cb, instance, 3 /* WATCH_CALLBACK */, [
                    newValue,
                    // pass undefined as the old value when it's changed for the first time
                    oldValue === INITIAL_WATCHER_VALUE ? undefined : oldValue,
                    onCleanup
                ]);
                oldValue = newValue;
            }
        }
        else {
            // watchEffect
            effect.run();
        }
    };
    // important: mark the job as a watcher callback so that scheduler knows
    // it is allowed to self-trigger (#1727)
    job.allowRecurse = !!cb;
    let scheduler;
    if (flush === 'sync') {
        scheduler = job; // the scheduler function gets called directly
    }
    else if (flush === 'post') {
        scheduler = () => queuePostRenderEffect(job, instance && instance.suspense);
    }
    else {
        // default: 'pre'
        scheduler = () => queuePreFlushCb(job);
    }
    const effect = new _vue_reactivity__WEBPACK_IMPORTED_MODULE_0__/* .ReactiveEffect */ .qq(getter, scheduler);
    if ((false)) {}
    // initial run
    if (cb) {
        if (immediate) {
            job();
        }
        else {
            oldValue = effect.run();
        }
    }
    else if (flush === 'post') {
        queuePostRenderEffect(effect.run.bind(effect), instance && instance.suspense);
    }
    else {
        effect.run();
    }
    return () => {
        effect.stop();
        if (instance && instance.scope) {
            (0,_vue_shared__WEBPACK_IMPORTED_MODULE_1__/* .remove */ .Od)(instance.scope.effects, effect);
        }
    };
}
// this.$watch
function instanceWatch(source, value, options) {
    const publicThis = this.proxy;
    const getter = (0,_vue_shared__WEBPACK_IMPORTED_MODULE_1__/* .isString */ .HD)(source)
        ? source.includes('.')
            ? createPathGetter(publicThis, source)
            : () => publicThis[source]
        : source.bind(publicThis, publicThis);
    let cb;
    if ((0,_vue_shared__WEBPACK_IMPORTED_MODULE_1__/* .isFunction */ .mf)(value)) {
        cb = value;
    }
    else {
        cb = value.handler;
        options = value;
    }
    const cur = currentInstance;
    setCurrentInstance(this);
    const res = doWatch(getter, cb.bind(publicThis), options);
    if (cur) {
        setCurrentInstance(cur);
    }
    else {
        unsetCurrentInstance();
    }
    return res;
}
function createPathGetter(ctx, path) {
    const segments = path.split('.');
    return () => {
        let cur = ctx;
        for (let i = 0; i < segments.length && cur; i++) {
            cur = cur[segments[i]];
        }
        return cur;
    };
}
function traverse(value, seen) {
    if (!(0,_vue_shared__WEBPACK_IMPORTED_MODULE_1__/* .isObject */ .Kn)(value) || value["__v_skip" /* SKIP */]) {
        return value;
    }
    seen = seen || new Set();
    if (seen.has(value)) {
        return value;
    }
    seen.add(value);
    if ((0,_vue_reactivity__WEBPACK_IMPORTED_MODULE_0__/* .isRef */ .dq)(value)) {
        traverse(value.value, seen);
    }
    else if ((0,_vue_shared__WEBPACK_IMPORTED_MODULE_1__/* .isArray */ .kJ)(value)) {
        for (let i = 0; i < value.length; i++) {
            traverse(value[i], seen);
        }
    }
    else if ((0,_vue_shared__WEBPACK_IMPORTED_MODULE_1__/* .isSet */ .DM)(value) || (0,_vue_shared__WEBPACK_IMPORTED_MODULE_1__/* .isMap */ ._N)(value)) {
        value.forEach((v) => {
            traverse(v, seen);
        });
    }
    else if ((0,_vue_shared__WEBPACK_IMPORTED_MODULE_1__/* .isPlainObject */ .PO)(value)) {
        for (const key in value) {
            traverse(value[key], seen);
        }
    }
    return value;
}

function useTransitionState() {
    const state = {
        isMounted: false,
        isLeaving: false,
        isUnmounting: false,
        leavingVNodes: new Map()
    };
    onMounted(() => {
        state.isMounted = true;
    });
    onBeforeUnmount(() => {
        state.isUnmounting = true;
    });
    return state;
}
const TransitionHookValidator = [Function, Array];
const BaseTransitionImpl = {
    name: `BaseTransition`,
    props: {
        mode: String,
        appear: Boolean,
        persisted: Boolean,
        // enter
        onBeforeEnter: TransitionHookValidator,
        onEnter: TransitionHookValidator,
        onAfterEnter: TransitionHookValidator,
        onEnterCancelled: TransitionHookValidator,
        // leave
        onBeforeLeave: TransitionHookValidator,
        onLeave: TransitionHookValidator,
        onAfterLeave: TransitionHookValidator,
        onLeaveCancelled: TransitionHookValidator,
        // appear
        onBeforeAppear: TransitionHookValidator,
        onAppear: TransitionHookValidator,
        onAfterAppear: TransitionHookValidator,
        onAppearCancelled: TransitionHookValidator
    },
    setup(props, { slots }) {
        const instance = getCurrentInstance();
        const state = useTransitionState();
        let prevTransitionKey;
        return () => {
            const children = slots.default && getTransitionRawChildren(slots.default(), true);
            if (!children || !children.length) {
                return;
            }
            let child = children[0];
            if (children.length > 1) {
                let hasFound = false;
                // locate first non-comment child
                for (const c of children) {
                    if (c.type !== Comment) {
                        if (false) {}
                        child = c;
                        hasFound = true;
                        if (true)
                            break;
                    }
                }
            }
            // there's no need to track reactivity for these props so use the raw
            // props for a bit better perf
            const rawProps = (0,_vue_reactivity__WEBPACK_IMPORTED_MODULE_0__/* .toRaw */ .IU)(props);
            const { mode } = rawProps;
            // check mode
            if (false) {}
            if (state.isLeaving) {
                return emptyPlaceholder(child);
            }
            // in the case of <transition><keep-alive/></transition>, we need to
            // compare the type of the kept-alive children.
            const innerChild = getKeepAliveChild(child);
            if (!innerChild) {
                return emptyPlaceholder(child);
            }
            const enterHooks = resolveTransitionHooks(innerChild, rawProps, state, instance);
            setTransitionHooks(innerChild, enterHooks);
            const oldChild = instance.subTree;
            const oldInnerChild = oldChild && getKeepAliveChild(oldChild);
            let transitionKeyChanged = false;
            const { getTransitionKey } = innerChild.type;
            if (getTransitionKey) {
                const key = getTransitionKey();
                if (prevTransitionKey === undefined) {
                    prevTransitionKey = key;
                }
                else if (key !== prevTransitionKey) {
                    prevTransitionKey = key;
                    transitionKeyChanged = true;
                }
            }
            // handle mode
            if (oldInnerChild &&
                oldInnerChild.type !== Comment &&
                (!isSameVNodeType(innerChild, oldInnerChild) || transitionKeyChanged)) {
                const leavingHooks = resolveTransitionHooks(oldInnerChild, rawProps, state, instance);
                // update old tree's hooks in case of dynamic transition
                setTransitionHooks(oldInnerChild, leavingHooks);
                // switching between different views
                if (mode === 'out-in') {
                    state.isLeaving = true;
                    // return placeholder node and queue update when leave finishes
                    leavingHooks.afterLeave = () => {
                        state.isLeaving = false;
                        instance.update();
                    };
                    return emptyPlaceholder(child);
                }
                else if (mode === 'in-out' && innerChild.type !== Comment) {
                    leavingHooks.delayLeave = (el, earlyRemove, delayedLeave) => {
                        const leavingVNodesCache = getLeavingNodesForType(state, oldInnerChild);
                        leavingVNodesCache[String(oldInnerChild.key)] = oldInnerChild;
                        // early removal callback
                        el._leaveCb = () => {
                            earlyRemove();
                            el._leaveCb = undefined;
                            delete enterHooks.delayedLeave;
                        };
                        enterHooks.delayedLeave = delayedLeave;
                    };
                }
            }
            return child;
        };
    }
};
// export the public type for h/tsx inference
// also to avoid inline import() in generated d.ts files
const BaseTransition = BaseTransitionImpl;
function getLeavingNodesForType(state, vnode) {
    const { leavingVNodes } = state;
    let leavingVNodesCache = leavingVNodes.get(vnode.type);
    if (!leavingVNodesCache) {
        leavingVNodesCache = Object.create(null);
        leavingVNodes.set(vnode.type, leavingVNodesCache);
    }
    return leavingVNodesCache;
}
// The transition hooks are attached to the vnode as vnode.transition
// and will be called at appropriate timing in the renderer.
function resolveTransitionHooks(vnode, props, state, instance) {
    const { appear, mode, persisted = false, onBeforeEnter, onEnter, onAfterEnter, onEnterCancelled, onBeforeLeave, onLeave, onAfterLeave, onLeaveCancelled, onBeforeAppear, onAppear, onAfterAppear, onAppearCancelled } = props;
    const key = String(vnode.key);
    const leavingVNodesCache = getLeavingNodesForType(state, vnode);
    const callHook = (hook, args) => {
        hook &&
            callWithAsyncErrorHandling(hook, instance, 9 /* TRANSITION_HOOK */, args);
    };
    const callAsyncHook = (hook, args) => {
        const done = args[1];
        callHook(hook, args);
        if ((0,_vue_shared__WEBPACK_IMPORTED_MODULE_1__/* .isArray */ .kJ)(hook)) {
            if (hook.every(hook => hook.length <= 1))
                done();
        }
        else if (hook.length <= 1) {
            done();
        }
    };
    const hooks = {
        mode,
        persisted,
        beforeEnter(el) {
            let hook = onBeforeEnter;
            if (!state.isMounted) {
                if (appear) {
                    hook = onBeforeAppear || onBeforeEnter;
                }
                else {
                    return;
                }
            }
            // for same element (v-show)
            if (el._leaveCb) {
                el._leaveCb(true /* cancelled */);
            }
            // for toggled element with same key (v-if)
            const leavingVNode = leavingVNodesCache[key];
            if (leavingVNode &&
                isSameVNodeType(vnode, leavingVNode) &&
                leavingVNode.el._leaveCb) {
                // force early removal (not cancelled)
                leavingVNode.el._leaveCb();
            }
            callHook(hook, [el]);
        },
        enter(el) {
            let hook = onEnter;
            let afterHook = onAfterEnter;
            let cancelHook = onEnterCancelled;
            if (!state.isMounted) {
                if (appear) {
                    hook = onAppear || onEnter;
                    afterHook = onAfterAppear || onAfterEnter;
                    cancelHook = onAppearCancelled || onEnterCancelled;
                }
                else {
                    return;
                }
            }
            let called = false;
            const done = (el._enterCb = (cancelled) => {
                if (called)
                    return;
                called = true;
                if (cancelled) {
                    callHook(cancelHook, [el]);
                }
                else {
                    callHook(afterHook, [el]);
                }
                if (hooks.delayedLeave) {
                    hooks.delayedLeave();
                }
                el._enterCb = undefined;
            });
            if (hook) {
                callAsyncHook(hook, [el, done]);
            }
            else {
                done();
            }
        },
        leave(el, remove) {
            const key = String(vnode.key);
            if (el._enterCb) {
                el._enterCb(true /* cancelled */);
            }
            if (state.isUnmounting) {
                return remove();
            }
            callHook(onBeforeLeave, [el]);
            let called = false;
            const done = (el._leaveCb = (cancelled) => {
                if (called)
                    return;
                called = true;
                remove();
                if (cancelled) {
                    callHook(onLeaveCancelled, [el]);
                }
                else {
                    callHook(onAfterLeave, [el]);
                }
                el._leaveCb = undefined;
                if (leavingVNodesCache[key] === vnode) {
                    delete leavingVNodesCache[key];
                }
            });
            leavingVNodesCache[key] = vnode;
            if (onLeave) {
                callAsyncHook(onLeave, [el, done]);
            }
            else {
                done();
            }
        },
        clone(vnode) {
            return resolveTransitionHooks(vnode, props, state, instance);
        }
    };
    return hooks;
}
// the placeholder really only handles one special case: KeepAlive
// in the case of a KeepAlive in a leave phase we need to return a KeepAlive
// placeholder with empty content to avoid the KeepAlive instance from being
// unmounted.
function emptyPlaceholder(vnode) {
    if (isKeepAlive(vnode)) {
        vnode = cloneVNode(vnode);
        vnode.children = null;
        return vnode;
    }
}
function getKeepAliveChild(vnode) {
    return isKeepAlive(vnode)
        ? vnode.children
            ? vnode.children[0]
            : undefined
        : vnode;
}
function setTransitionHooks(vnode, hooks) {
    if (vnode.shapeFlag & 6 /* COMPONENT */ && vnode.component) {
        setTransitionHooks(vnode.component.subTree, hooks);
    }
    else if (vnode.shapeFlag & 128 /* SUSPENSE */) {
        vnode.ssContent.transition = hooks.clone(vnode.ssContent);
        vnode.ssFallback.transition = hooks.clone(vnode.ssFallback);
    }
    else {
        vnode.transition = hooks;
    }
}
function getTransitionRawChildren(children, keepComment = false, parentKey) {
    let ret = [];
    let keyedFragmentCount = 0;
    for (let i = 0; i < children.length; i++) {
        let child = children[i];
        // #5360 inherit parent key in case of <template v-for>
        const key = parentKey == null
            ? child.key
            : String(parentKey) + String(child.key != null ? child.key : i);
        // handle fragment children case, e.g. v-for
        if (child.type === Fragment) {
            if (child.patchFlag & 128 /* KEYED_FRAGMENT */)
                keyedFragmentCount++;
            ret = ret.concat(getTransitionRawChildren(child.children, keepComment, key));
        }
        // comment placeholders should be skipped, e.g. v-if
        else if (keepComment || child.type !== Comment) {
            ret.push(key != null ? cloneVNode(child, { key }) : child);
        }
    }
    // #1126 if a transition children list contains multiple sub fragments, these
    // fragments will be merged into a flat children array. Since each v-for
    // fragment may contain different static bindings inside, we need to de-op
    // these children to force full diffs to ensure correct behavior.
    if (keyedFragmentCount > 1) {
        for (let i = 0; i < ret.length; i++) {
            ret[i].patchFlag = -2 /* BAIL */;
        }
    }
    return ret;
}

// implementation, close to no-op
function defineComponent(options) {
    return (0,_vue_shared__WEBPACK_IMPORTED_MODULE_1__/* .isFunction */ .mf)(options) ? { setup: options, name: options.name } : options;
}

const isAsyncWrapper = (i) => !!i.type.__asyncLoader;
function defineAsyncComponent(source) {
    if (isFunction(source)) {
        source = { loader: source };
    }
    const { loader, loadingComponent, errorComponent, delay = 200, timeout, // undefined = never times out
    suspensible = true, onError: userOnError } = source;
    let pendingRequest = null;
    let resolvedComp;
    let retries = 0;
    const retry = () => {
        retries++;
        pendingRequest = null;
        return load();
    };
    const load = () => {
        let thisRequest;
        return (pendingRequest ||
            (thisRequest = pendingRequest =
                loader()
                    .catch(err => {
                    err = err instanceof Error ? err : new Error(String(err));
                    if (userOnError) {
                        return new Promise((resolve, reject) => {
                            const userRetry = () => resolve(retry());
                            const userFail = () => reject(err);
                            userOnError(err, userRetry, userFail, retries + 1);
                        });
                    }
                    else {
                        throw err;
                    }
                })
                    .then((comp) => {
                    if (thisRequest !== pendingRequest && pendingRequest) {
                        return pendingRequest;
                    }
                    if (false) {}
                    // interop module default
                    if (comp &&
                        (comp.__esModule || comp[Symbol.toStringTag] === 'Module')) {
                        comp = comp.default;
                    }
                    if (false) {}
                    resolvedComp = comp;
                    return comp;
                })));
    };
    return defineComponent({
        name: 'AsyncComponentWrapper',
        __asyncLoader: load,
        get __asyncResolved() {
            return resolvedComp;
        },
        setup() {
            const instance = currentInstance;
            // already resolved
            if (resolvedComp) {
                return () => createInnerComp(resolvedComp, instance);
            }
            const onError = (err) => {
                pendingRequest = null;
                handleError(err, instance, 13 /* ASYNC_COMPONENT_LOADER */, !errorComponent /* do not throw in dev if user provided error component */);
            };
            // suspense-controlled or SSR.
            if ((suspensible && instance.suspense) ||
                (isInSSRComponentSetup)) {
                return load()
                    .then(comp => {
                    return () => createInnerComp(comp, instance);
                })
                    .catch(err => {
                    onError(err);
                    return () => errorComponent
                        ? createVNode(errorComponent, {
                            error: err
                        })
                        : null;
                });
            }
            const loaded = ref(false);
            const error = ref();
            const delayed = ref(!!delay);
            if (delay) {
                setTimeout(() => {
                    delayed.value = false;
                }, delay);
            }
            if (timeout != null) {
                setTimeout(() => {
                    if (!loaded.value && !error.value) {
                        const err = new Error(`Async component timed out after ${timeout}ms.`);
                        onError(err);
                        error.value = err;
                    }
                }, timeout);
            }
            load()
                .then(() => {
                loaded.value = true;
                if (instance.parent && isKeepAlive(instance.parent.vnode)) {
                    // parent is keep-alive, force update so the loaded component's
                    // name is taken into account
                    queueJob(instance.parent.update);
                }
            })
                .catch(err => {
                onError(err);
                error.value = err;
            });
            return () => {
                if (loaded.value && resolvedComp) {
                    return createInnerComp(resolvedComp, instance);
                }
                else if (error.value && errorComponent) {
                    return createVNode(errorComponent, {
                        error: error.value
                    });
                }
                else if (loadingComponent && !delayed.value) {
                    return createVNode(loadingComponent);
                }
            };
        }
    });
}
function createInnerComp(comp, { vnode: { ref, props, children, shapeFlag }, parent }) {
    const vnode = createVNode(comp, props, children);
    // ensure inner component inherits the async wrapper's ref owner
    vnode.ref = ref;
    return vnode;
}

const isKeepAlive = (vnode) => vnode.type.__isKeepAlive;
const KeepAliveImpl = {
    name: `KeepAlive`,
    // Marker for special handling inside the renderer. We are not using a ===
    // check directly on KeepAlive in the renderer, because importing it directly
    // would prevent it from being tree-shaken.
    __isKeepAlive: true,
    props: {
        include: [String, RegExp, Array],
        exclude: [String, RegExp, Array],
        max: [String, Number]
    },
    setup(props, { slots }) {
        const instance = getCurrentInstance();
        // KeepAlive communicates with the instantiated renderer via the
        // ctx where the renderer passes in its internals,
        // and the KeepAlive instance exposes activate/deactivate implementations.
        // The whole point of this is to avoid importing KeepAlive directly in the
        // renderer to facilitate tree-shaking.
        const sharedContext = instance.ctx;
        // if the internal renderer is not registered, it indicates that this is server-side rendering,
        // for KeepAlive, we just need to render its children
        if (!sharedContext.renderer) {
            return () => {
                const children = slots.default && slots.default();
                return children && children.length === 1 ? children[0] : children;
            };
        }
        const cache = new Map();
        const keys = new Set();
        let current = null;
        if (( false) || __VUE_PROD_DEVTOOLS__) {
            instance.__v_cache = cache;
        }
        const parentSuspense = instance.suspense;
        const { renderer: { p: patch, m: move, um: _unmount, o: { createElement } } } = sharedContext;
        const storageContainer = createElement('div');
        sharedContext.activate = (vnode, container, anchor, isSVG, optimized) => {
            const instance = vnode.component;
            move(vnode, container, anchor, 0 /* ENTER */, parentSuspense);
            // in case props have changed
            patch(instance.vnode, vnode, container, anchor, instance, parentSuspense, isSVG, vnode.slotScopeIds, optimized);
            queuePostRenderEffect(() => {
                instance.isDeactivated = false;
                if (instance.a) {
                    (0,_vue_shared__WEBPACK_IMPORTED_MODULE_1__/* .invokeArrayFns */ .ir)(instance.a);
                }
                const vnodeHook = vnode.props && vnode.props.onVnodeMounted;
                if (vnodeHook) {
                    invokeVNodeHook(vnodeHook, instance.parent, vnode);
                }
            }, parentSuspense);
            if (( false) || __VUE_PROD_DEVTOOLS__) {
                // Update components tree
                devtoolsComponentAdded(instance);
            }
        };
        sharedContext.deactivate = (vnode) => {
            const instance = vnode.component;
            move(vnode, storageContainer, null, 1 /* LEAVE */, parentSuspense);
            queuePostRenderEffect(() => {
                if (instance.da) {
                    (0,_vue_shared__WEBPACK_IMPORTED_MODULE_1__/* .invokeArrayFns */ .ir)(instance.da);
                }
                const vnodeHook = vnode.props && vnode.props.onVnodeUnmounted;
                if (vnodeHook) {
                    invokeVNodeHook(vnodeHook, instance.parent, vnode);
                }
                instance.isDeactivated = true;
            }, parentSuspense);
            if (( false) || __VUE_PROD_DEVTOOLS__) {
                // Update components tree
                devtoolsComponentAdded(instance);
            }
        };
        function unmount(vnode) {
            // reset the shapeFlag so it can be properly unmounted
            resetShapeFlag(vnode);
            _unmount(vnode, instance, parentSuspense, true);
        }
        function pruneCache(filter) {
            cache.forEach((vnode, key) => {
                const name = getComponentName(vnode.type);
                if (name && (!filter || !filter(name))) {
                    pruneCacheEntry(key);
                }
            });
        }
        function pruneCacheEntry(key) {
            const cached = cache.get(key);
            if (!current || cached.type !== current.type) {
                unmount(cached);
            }
            else if (current) {
                // current active instance should no longer be kept-alive.
                // we can't unmount it now but it might be later, so reset its flag now.
                resetShapeFlag(current);
            }
            cache.delete(key);
            keys.delete(key);
        }
        // prune cache on include/exclude prop change
        watch(() => [props.include, props.exclude], ([include, exclude]) => {
            include && pruneCache(name => matches(include, name));
            exclude && pruneCache(name => !matches(exclude, name));
        }, 
        // prune post-render after `current` has been updated
        { flush: 'post', deep: true });
        // cache sub tree after render
        let pendingCacheKey = null;
        const cacheSubtree = () => {
            // fix #1621, the pendingCacheKey could be 0
            if (pendingCacheKey != null) {
                cache.set(pendingCacheKey, getInnerChild(instance.subTree));
            }
        };
        onMounted(cacheSubtree);
        onUpdated(cacheSubtree);
        onBeforeUnmount(() => {
            cache.forEach(cached => {
                const { subTree, suspense } = instance;
                const vnode = getInnerChild(subTree);
                if (cached.type === vnode.type) {
                    // current instance will be unmounted as part of keep-alive's unmount
                    resetShapeFlag(vnode);
                    // but invoke its deactivated hook here
                    const da = vnode.component.da;
                    da && queuePostRenderEffect(da, suspense);
                    return;
                }
                unmount(cached);
            });
        });
        return () => {
            pendingCacheKey = null;
            if (!slots.default) {
                return null;
            }
            const children = slots.default();
            const rawVNode = children[0];
            if (children.length > 1) {
                if ((false)) {}
                current = null;
                return children;
            }
            else if (!isVNode(rawVNode) ||
                (!(rawVNode.shapeFlag & 4 /* STATEFUL_COMPONENT */) &&
                    !(rawVNode.shapeFlag & 128 /* SUSPENSE */))) {
                current = null;
                return rawVNode;
            }
            let vnode = getInnerChild(rawVNode);
            const comp = vnode.type;
            // for async components, name check should be based in its loaded
            // inner component if available
            const name = getComponentName(isAsyncWrapper(vnode)
                ? vnode.type.__asyncResolved || {}
                : comp);
            const { include, exclude, max } = props;
            if ((include && (!name || !matches(include, name))) ||
                (exclude && name && matches(exclude, name))) {
                current = vnode;
                return rawVNode;
            }
            const key = vnode.key == null ? comp : vnode.key;
            const cachedVNode = cache.get(key);
            // clone vnode if it's reused because we are going to mutate it
            if (vnode.el) {
                vnode = cloneVNode(vnode);
                if (rawVNode.shapeFlag & 128 /* SUSPENSE */) {
                    rawVNode.ssContent = vnode;
                }
            }
            // #1513 it's possible for the returned vnode to be cloned due to attr
            // fallthrough or scopeId, so the vnode here may not be the final vnode
            // that is mounted. Instead of caching it directly, we store the pending
            // key and cache `instance.subTree` (the normalized vnode) in
            // beforeMount/beforeUpdate hooks.
            pendingCacheKey = key;
            if (cachedVNode) {
                // copy over mounted state
                vnode.el = cachedVNode.el;
                vnode.component = cachedVNode.component;
                if (vnode.transition) {
                    // recursively update transition hooks on subTree
                    setTransitionHooks(vnode, vnode.transition);
                }
                // avoid vnode being mounted as fresh
                vnode.shapeFlag |= 512 /* COMPONENT_KEPT_ALIVE */;
                // make this key the freshest
                keys.delete(key);
                keys.add(key);
            }
            else {
                keys.add(key);
                // prune oldest entry
                if (max && keys.size > parseInt(max, 10)) {
                    pruneCacheEntry(keys.values().next().value);
                }
            }
            // avoid vnode being unmounted
            vnode.shapeFlag |= 256 /* COMPONENT_SHOULD_KEEP_ALIVE */;
            current = vnode;
            return isSuspense(rawVNode.type) ? rawVNode : vnode;
        };
    }
};
// export the public type for h/tsx inference
// also to avoid inline import() in generated d.ts files
const KeepAlive = (/* unused pure expression or super */ null && (KeepAliveImpl));
function matches(pattern, name) {
    if ((0,_vue_shared__WEBPACK_IMPORTED_MODULE_1__/* .isArray */ .kJ)(pattern)) {
        return pattern.some((p) => matches(p, name));
    }
    else if ((0,_vue_shared__WEBPACK_IMPORTED_MODULE_1__/* .isString */ .HD)(pattern)) {
        return pattern.split(',').includes(name);
    }
    else if (pattern.test) {
        return pattern.test(name);
    }
    /* istanbul ignore next */
    return false;
}
function onActivated(hook, target) {
    registerKeepAliveHook(hook, "a" /* ACTIVATED */, target);
}
function onDeactivated(hook, target) {
    registerKeepAliveHook(hook, "da" /* DEACTIVATED */, target);
}
function registerKeepAliveHook(hook, type, target = currentInstance) {
    // cache the deactivate branch check wrapper for injected hooks so the same
    // hook can be properly deduped by the scheduler. "__wdc" stands for "with
    // deactivation check".
    const wrappedHook = hook.__wdc ||
        (hook.__wdc = () => {
            // only fire the hook if the target instance is NOT in a deactivated branch.
            let current = target;
            while (current) {
                if (current.isDeactivated) {
                    return;
                }
                current = current.parent;
            }
            return hook();
        });
    injectHook(type, wrappedHook, target);
    // In addition to registering it on the target instance, we walk up the parent
    // chain and register it on all ancestor instances that are keep-alive roots.
    // This avoids the need to walk the entire component tree when invoking these
    // hooks, and more importantly, avoids the need to track child components in
    // arrays.
    if (target) {
        let current = target.parent;
        while (current && current.parent) {
            if (isKeepAlive(current.parent.vnode)) {
                injectToKeepAliveRoot(wrappedHook, type, target, current);
            }
            current = current.parent;
        }
    }
}
function injectToKeepAliveRoot(hook, type, target, keepAliveRoot) {
    // injectHook wraps the original for error handling, so make sure to remove
    // the wrapped version.
    const injected = injectHook(type, hook, keepAliveRoot, true /* prepend */);
    onUnmounted(() => {
        (0,_vue_shared__WEBPACK_IMPORTED_MODULE_1__/* .remove */ .Od)(keepAliveRoot[type], injected);
    }, target);
}
function resetShapeFlag(vnode) {
    let shapeFlag = vnode.shapeFlag;
    if (shapeFlag & 256 /* COMPONENT_SHOULD_KEEP_ALIVE */) {
        shapeFlag -= 256 /* COMPONENT_SHOULD_KEEP_ALIVE */;
    }
    if (shapeFlag & 512 /* COMPONENT_KEPT_ALIVE */) {
        shapeFlag -= 512 /* COMPONENT_KEPT_ALIVE */;
    }
    vnode.shapeFlag = shapeFlag;
}
function getInnerChild(vnode) {
    return vnode.shapeFlag & 128 /* SUSPENSE */ ? vnode.ssContent : vnode;
}

function injectHook(type, hook, target = currentInstance, prepend = false) {
    if (target) {
        const hooks = target[type] || (target[type] = []);
        // cache the error handling wrapper for injected hooks so the same hook
        // can be properly deduped by the scheduler. "__weh" stands for "with error
        // handling".
        const wrappedHook = hook.__weh ||
            (hook.__weh = (...args) => {
                if (target.isUnmounted) {
                    return;
                }
                // disable tracking inside all lifecycle hooks
                // since they can potentially be called inside effects.
                (0,_vue_reactivity__WEBPACK_IMPORTED_MODULE_0__/* .pauseTracking */ .Jd)();
                // Set currentInstance during hook invocation.
                // This assumes the hook does not synchronously trigger other hooks, which
                // can only be false when the user does something really funky.
                setCurrentInstance(target);
                const res = callWithAsyncErrorHandling(hook, target, type, args);
                unsetCurrentInstance();
                (0,_vue_reactivity__WEBPACK_IMPORTED_MODULE_0__/* .resetTracking */ .lk)();
                return res;
            });
        if (prepend) {
            hooks.unshift(wrappedHook);
        }
        else {
            hooks.push(wrappedHook);
        }
        return wrappedHook;
    }
    else if ((false)) {}
}
const createHook = (lifecycle) => (hook, target = currentInstance) => 
// post-create lifecycle registrations are noops during SSR (except for serverPrefetch)
(!isInSSRComponentSetup || lifecycle === "sp" /* SERVER_PREFETCH */) &&
    injectHook(lifecycle, hook, target);
const onBeforeMount = createHook("bm" /* BEFORE_MOUNT */);
const onMounted = createHook("m" /* MOUNTED */);
const onBeforeUpdate = createHook("bu" /* BEFORE_UPDATE */);
const onUpdated = createHook("u" /* UPDATED */);
const onBeforeUnmount = createHook("bum" /* BEFORE_UNMOUNT */);
const onUnmounted = createHook("um" /* UNMOUNTED */);
const onServerPrefetch = createHook("sp" /* SERVER_PREFETCH */);
const onRenderTriggered = createHook("rtg" /* RENDER_TRIGGERED */);
const onRenderTracked = createHook("rtc" /* RENDER_TRACKED */);
function onErrorCaptured(hook, target = currentInstance) {
    injectHook("ec" /* ERROR_CAPTURED */, hook, target);
}

/**
Runtime helper for applying directives to a vnode. Example usage:

const comp = resolveComponent('comp')
const foo = resolveDirective('foo')
const bar = resolveDirective('bar')

return withDirectives(h(comp), [
  [foo, this.x],
  [bar, this.y]
])
*/
function validateDirectiveName(name) {
    if (isBuiltInDirective(name)) {
        warn('Do not use built-in directive ids as custom directive id: ' + name);
    }
}
/**
 * Adds directives to a VNode.
 */
function withDirectives(vnode, directives) {
    const internalInstance = currentRenderingInstance;
    if (internalInstance === null) {
        ( false) && 0;
        return vnode;
    }
    const instance = getExposeProxy(internalInstance) ||
        internalInstance.proxy;
    const bindings = vnode.dirs || (vnode.dirs = []);
    for (let i = 0; i < directives.length; i++) {
        let [dir, value, arg, modifiers = _vue_shared__WEBPACK_IMPORTED_MODULE_1__/* .EMPTY_OBJ */ .kT] = directives[i];
        if ((0,_vue_shared__WEBPACK_IMPORTED_MODULE_1__/* .isFunction */ .mf)(dir)) {
            dir = {
                mounted: dir,
                updated: dir
            };
        }
        if (dir.deep) {
            traverse(value);
        }
        bindings.push({
            dir,
            instance,
            value,
            oldValue: void 0,
            arg,
            modifiers
        });
    }
    return vnode;
}
function invokeDirectiveHook(vnode, prevVNode, instance, name) {
    const bindings = vnode.dirs;
    const oldBindings = prevVNode && prevVNode.dirs;
    for (let i = 0; i < bindings.length; i++) {
        const binding = bindings[i];
        if (oldBindings) {
            binding.oldValue = oldBindings[i].value;
        }
        let hook = binding.dir[name];
        if (hook) {
            // disable tracking inside all lifecycle hooks
            // since they can potentially be called inside effects.
            (0,_vue_reactivity__WEBPACK_IMPORTED_MODULE_0__/* .pauseTracking */ .Jd)();
            callWithAsyncErrorHandling(hook, instance, 8 /* DIRECTIVE_HOOK */, [
                vnode.el,
                binding,
                vnode,
                prevVNode
            ]);
            (0,_vue_reactivity__WEBPACK_IMPORTED_MODULE_0__/* .resetTracking */ .lk)();
        }
    }
}

const COMPONENTS = 'components';
const DIRECTIVES = 'directives';
/**
 * @private
 */
function resolveComponent(name, maybeSelfReference) {
    return resolveAsset(COMPONENTS, name, true, maybeSelfReference) || name;
}
const NULL_DYNAMIC_COMPONENT = Symbol();
/**
 * @private
 */
function resolveDynamicComponent(component) {
    if ((0,_vue_shared__WEBPACK_IMPORTED_MODULE_1__/* .isString */ .HD)(component)) {
        return resolveAsset(COMPONENTS, component, false) || component;
    }
    else {
        // invalid types will fallthrough to createVNode and raise warning
        return (component || NULL_DYNAMIC_COMPONENT);
    }
}
/**
 * @private
 */
function resolveDirective(name) {
    return resolveAsset(DIRECTIVES, name);
}
// implementation
function resolveAsset(type, name, warnMissing = true, maybeSelfReference = false) {
    const instance = currentRenderingInstance || currentInstance;
    if (instance) {
        const Component = instance.type;
        // explicit self name has highest priority
        if (type === COMPONENTS) {
            const selfName = getComponentName(Component);
            if (selfName &&
                (selfName === name ||
                    selfName === (0,_vue_shared__WEBPACK_IMPORTED_MODULE_1__/* .camelize */ ._A)(name) ||
                    selfName === (0,_vue_shared__WEBPACK_IMPORTED_MODULE_1__/* .capitalize */ .kC)((0,_vue_shared__WEBPACK_IMPORTED_MODULE_1__/* .camelize */ ._A)(name)))) {
                return Component;
            }
        }
        const res = 
        // local registration
        // check instance[type] first which is resolved for options API
        resolve(instance[type] || Component[type], name) ||
            // global registration
            resolve(instance.appContext[type], name);
        if (!res && maybeSelfReference) {
            // fallback to implicit self-reference
            return Component;
        }
        if (false) {}
        return res;
    }
    else if ((false)) {}
}
function resolve(registry, name) {
    return (registry &&
        (registry[name] ||
            registry[(0,_vue_shared__WEBPACK_IMPORTED_MODULE_1__/* .camelize */ ._A)(name)] ||
            registry[(0,_vue_shared__WEBPACK_IMPORTED_MODULE_1__/* .capitalize */ .kC)((0,_vue_shared__WEBPACK_IMPORTED_MODULE_1__/* .camelize */ ._A)(name))]));
}

/**
 * Actual implementation
 */
function renderList(source, renderItem, cache, index) {
    let ret;
    const cached = (cache && cache[index]);
    if ((0,_vue_shared__WEBPACK_IMPORTED_MODULE_1__/* .isArray */ .kJ)(source) || (0,_vue_shared__WEBPACK_IMPORTED_MODULE_1__/* .isString */ .HD)(source)) {
        ret = new Array(source.length);
        for (let i = 0, l = source.length; i < l; i++) {
            ret[i] = renderItem(source[i], i, undefined, cached && cached[i]);
        }
    }
    else if (typeof source === 'number') {
        if (false) {}
        ret = new Array(source);
        for (let i = 0; i < source; i++) {
            ret[i] = renderItem(i + 1, i, undefined, cached && cached[i]);
        }
    }
    else if ((0,_vue_shared__WEBPACK_IMPORTED_MODULE_1__/* .isObject */ .Kn)(source)) {
        if (source[Symbol.iterator]) {
            ret = Array.from(source, (item, i) => renderItem(item, i, undefined, cached && cached[i]));
        }
        else {
            const keys = Object.keys(source);
            ret = new Array(keys.length);
            for (let i = 0, l = keys.length; i < l; i++) {
                const key = keys[i];
                ret[i] = renderItem(source[key], key, i, cached && cached[i]);
            }
        }
    }
    else {
        ret = [];
    }
    if (cache) {
        cache[index] = ret;
    }
    return ret;
}

/**
 * Compiler runtime helper for creating dynamic slots object
 * @private
 */
function createSlots(slots, dynamicSlots) {
    for (let i = 0; i < dynamicSlots.length; i++) {
        const slot = dynamicSlots[i];
        // array of dynamic slot generated by <template v-for="..." #[...]>
        if (isArray(slot)) {
            for (let j = 0; j < slot.length; j++) {
                slots[slot[j].name] = slot[j].fn;
            }
        }
        else if (slot) {
            // conditional single slot generated by <template v-if="..." #foo>
            slots[slot.name] = slot.fn;
        }
    }
    return slots;
}

/**
 * Compiler runtime helper for rendering `<slot/>`
 * @private
 */
function renderSlot(slots, name, props = {}, 
// this is not a user-facing function, so the fallback is always generated by
// the compiler and guaranteed to be a function returning an array
fallback, noSlotted) {
    if (currentRenderingInstance.isCE ||
        (currentRenderingInstance.parent &&
            isAsyncWrapper(currentRenderingInstance.parent) &&
            currentRenderingInstance.parent.isCE)) {
        return createVNode('slot', name === 'default' ? null : { name }, fallback && fallback());
    }
    let slot = slots[name];
    if (false) {}
    // a compiled slot disables block tracking by default to avoid manual
    // invocation interfering with template-based block tracking, but in
    // `renderSlot` we can be sure that it's template-based so we can force
    // enable it.
    if (slot && slot._c) {
        slot._d = false;
    }
    openBlock();
    const validSlotContent = slot && ensureValidVNode(slot(props));
    const rendered = createBlock(Fragment, { key: props.key || `_${name}` }, validSlotContent || (fallback ? fallback() : []), validSlotContent && slots._ === 1 /* STABLE */
        ? 64 /* STABLE_FRAGMENT */
        : -2 /* BAIL */);
    if (!noSlotted && rendered.scopeId) {
        rendered.slotScopeIds = [rendered.scopeId + '-s'];
    }
    if (slot && slot._c) {
        slot._d = true;
    }
    return rendered;
}
function ensureValidVNode(vnodes) {
    return vnodes.some(child => {
        if (!isVNode(child))
            return true;
        if (child.type === Comment)
            return false;
        if (child.type === Fragment &&
            !ensureValidVNode(child.children))
            return false;
        return true;
    })
        ? vnodes
        : null;
}

/**
 * For prefixing keys in v-on="obj" with "on"
 * @private
 */
function toHandlers(obj) {
    const ret = {};
    if (false) {}
    for (const key in obj) {
        ret[(0,_vue_shared__WEBPACK_IMPORTED_MODULE_1__/* .toHandlerKey */ .hR)(key)] = obj[key];
    }
    return ret;
}

/**
 * #2437 In Vue 3, functional components do not have a public instance proxy but
 * they exist in the internal parent chain. For code that relies on traversing
 * public $parent chains, skip functional ones and go to the parent instead.
 */
const getPublicInstance = (i) => {
    if (!i)
        return null;
    if (isStatefulComponent(i))
        return getExposeProxy(i) || i.proxy;
    return getPublicInstance(i.parent);
};
const publicPropertiesMap = 
// Move PURE marker to new line to workaround compiler discarding it
// due to type annotation
/*#__PURE__*/ (0,_vue_shared__WEBPACK_IMPORTED_MODULE_1__/* .extend */ .l7)(Object.create(null), {
    $: i => i,
    $el: i => i.vnode.el,
    $data: i => i.data,
    $props: i => (( false) ? 0 : i.props),
    $attrs: i => (( false) ? 0 : i.attrs),
    $slots: i => (( false) ? 0 : i.slots),
    $refs: i => (( false) ? 0 : i.refs),
    $parent: i => getPublicInstance(i.parent),
    $root: i => getPublicInstance(i.root),
    $emit: i => i.emit,
    $options: i => (__VUE_OPTIONS_API__ ? resolveMergedOptions(i) : i.type),
    $forceUpdate: i => i.f || (i.f = () => queueJob(i.update)),
    $nextTick: i => i.n || (i.n = nextTick.bind(i.proxy)),
    $watch: i => (__VUE_OPTIONS_API__ ? instanceWatch.bind(i) : _vue_shared__WEBPACK_IMPORTED_MODULE_1__/* .NOOP */ .dG)
});
const isReservedPrefix = (key) => key === '_' || key === '$';
const PublicInstanceProxyHandlers = {
    get({ _: instance }, key) {
        const { ctx, setupState, data, props, accessCache, type, appContext } = instance;
        // for internal formatters to know that this is a Vue instance
        if (false) {}
        // prioritize <script setup> bindings during dev.
        // this allows even properties that start with _ or $ to be used - so that
        // it aligns with the production behavior where the render fn is inlined and
        // indeed has access to all declared variables.
        if (false) {}
        // data / props / ctx
        // This getter gets called for every property access on the render context
        // during render and is a major hotspot. The most expensive part of this
        // is the multiple hasOwn() calls. It's much faster to do a simple property
        // access on a plain object, so we use an accessCache object (with null
        // prototype) to memoize what access type a key corresponds to.
        let normalizedProps;
        if (key[0] !== '$') {
            const n = accessCache[key];
            if (n !== undefined) {
                switch (n) {
                    case 1 /* SETUP */:
                        return setupState[key];
                    case 2 /* DATA */:
                        return data[key];
                    case 4 /* CONTEXT */:
                        return ctx[key];
                    case 3 /* PROPS */:
                        return props[key];
                    // default: just fallthrough
                }
            }
            else if (setupState !== _vue_shared__WEBPACK_IMPORTED_MODULE_1__/* .EMPTY_OBJ */ .kT && (0,_vue_shared__WEBPACK_IMPORTED_MODULE_1__/* .hasOwn */ .RI)(setupState, key)) {
                accessCache[key] = 1 /* SETUP */;
                return setupState[key];
            }
            else if (data !== _vue_shared__WEBPACK_IMPORTED_MODULE_1__/* .EMPTY_OBJ */ .kT && (0,_vue_shared__WEBPACK_IMPORTED_MODULE_1__/* .hasOwn */ .RI)(data, key)) {
                accessCache[key] = 2 /* DATA */;
                return data[key];
            }
            else if (
            // only cache other properties when instance has declared (thus stable)
            // props
            (normalizedProps = instance.propsOptions[0]) &&
                (0,_vue_shared__WEBPACK_IMPORTED_MODULE_1__/* .hasOwn */ .RI)(normalizedProps, key)) {
                accessCache[key] = 3 /* PROPS */;
                return props[key];
            }
            else if (ctx !== _vue_shared__WEBPACK_IMPORTED_MODULE_1__/* .EMPTY_OBJ */ .kT && (0,_vue_shared__WEBPACK_IMPORTED_MODULE_1__/* .hasOwn */ .RI)(ctx, key)) {
                accessCache[key] = 4 /* CONTEXT */;
                return ctx[key];
            }
            else if (!__VUE_OPTIONS_API__ || shouldCacheAccess) {
                accessCache[key] = 0 /* OTHER */;
            }
        }
        const publicGetter = publicPropertiesMap[key];
        let cssModule, globalProperties;
        // public $xxx properties
        if (publicGetter) {
            if (key === '$attrs') {
                (0,_vue_reactivity__WEBPACK_IMPORTED_MODULE_0__/* .track */ .j)(instance, "get" /* GET */, key);
                ( false) && 0;
            }
            return publicGetter(instance);
        }
        else if (
        // css module (injected by vue-loader)
        (cssModule = type.__cssModules) &&
            (cssModule = cssModule[key])) {
            return cssModule;
        }
        else if (ctx !== _vue_shared__WEBPACK_IMPORTED_MODULE_1__/* .EMPTY_OBJ */ .kT && (0,_vue_shared__WEBPACK_IMPORTED_MODULE_1__/* .hasOwn */ .RI)(ctx, key)) {
            // user may set custom properties to `this` that start with `$`
            accessCache[key] = 4 /* CONTEXT */;
            return ctx[key];
        }
        else if (
        // global properties
        ((globalProperties = appContext.config.globalProperties),
            (0,_vue_shared__WEBPACK_IMPORTED_MODULE_1__/* .hasOwn */ .RI)(globalProperties, key))) {
            {
                return globalProperties[key];
            }
        }
        else if (false) {}
    },
    set({ _: instance }, key, value) {
        const { data, setupState, ctx } = instance;
        if (setupState !== _vue_shared__WEBPACK_IMPORTED_MODULE_1__/* .EMPTY_OBJ */ .kT && (0,_vue_shared__WEBPACK_IMPORTED_MODULE_1__/* .hasOwn */ .RI)(setupState, key)) {
            setupState[key] = value;
            return true;
        }
        else if (data !== _vue_shared__WEBPACK_IMPORTED_MODULE_1__/* .EMPTY_OBJ */ .kT && (0,_vue_shared__WEBPACK_IMPORTED_MODULE_1__/* .hasOwn */ .RI)(data, key)) {
            data[key] = value;
            return true;
        }
        else if ((0,_vue_shared__WEBPACK_IMPORTED_MODULE_1__/* .hasOwn */ .RI)(instance.props, key)) {
            ( false) &&
                0;
            return false;
        }
        if (key[0] === '$' && key.slice(1) in instance) {
            ( false) &&
                0;
            return false;
        }
        else {
            if (false) {}
            else {
                ctx[key] = value;
            }
        }
        return true;
    },
    has({ _: { data, setupState, accessCache, ctx, appContext, propsOptions } }, key) {
        let normalizedProps;
        return (!!accessCache[key] ||
            (data !== _vue_shared__WEBPACK_IMPORTED_MODULE_1__/* .EMPTY_OBJ */ .kT && (0,_vue_shared__WEBPACK_IMPORTED_MODULE_1__/* .hasOwn */ .RI)(data, key)) ||
            (setupState !== _vue_shared__WEBPACK_IMPORTED_MODULE_1__/* .EMPTY_OBJ */ .kT && (0,_vue_shared__WEBPACK_IMPORTED_MODULE_1__/* .hasOwn */ .RI)(setupState, key)) ||
            ((normalizedProps = propsOptions[0]) && (0,_vue_shared__WEBPACK_IMPORTED_MODULE_1__/* .hasOwn */ .RI)(normalizedProps, key)) ||
            (0,_vue_shared__WEBPACK_IMPORTED_MODULE_1__/* .hasOwn */ .RI)(ctx, key) ||
            (0,_vue_shared__WEBPACK_IMPORTED_MODULE_1__/* .hasOwn */ .RI)(publicPropertiesMap, key) ||
            (0,_vue_shared__WEBPACK_IMPORTED_MODULE_1__/* .hasOwn */ .RI)(appContext.config.globalProperties, key));
    },
    defineProperty(target, key, descriptor) {
        if (descriptor.get != null) {
            // invalidate key cache of a getter based property #5417
            target._.accessCache[key] = 0;
        }
        else if ((0,_vue_shared__WEBPACK_IMPORTED_MODULE_1__/* .hasOwn */ .RI)(descriptor, 'value')) {
            this.set(target, key, descriptor.value, null);
        }
        return Reflect.defineProperty(target, key, descriptor);
    }
};
if (false) {}
const RuntimeCompiledPublicInstanceProxyHandlers = /*#__PURE__*/ (0,_vue_shared__WEBPACK_IMPORTED_MODULE_1__/* .extend */ .l7)({}, PublicInstanceProxyHandlers, {
    get(target, key) {
        // fast path for unscopables when using `with` block
        if (key === Symbol.unscopables) {
            return;
        }
        return PublicInstanceProxyHandlers.get(target, key, target);
    },
    has(_, key) {
        const has = key[0] !== '_' && !(0,_vue_shared__WEBPACK_IMPORTED_MODULE_1__/* .isGloballyWhitelisted */ .e1)(key);
        if (false) {}
        return has;
    }
});
// dev only
// In dev mode, the proxy target exposes the same properties as seen on `this`
// for easier console inspection. In prod mode it will be an empty object so
// these properties definitions can be skipped.
function createDevRenderContext(instance) {
    const target = {};
    // expose internal instance for proxy handlers
    Object.defineProperty(target, `_`, {
        configurable: true,
        enumerable: false,
        get: () => instance
    });
    // expose public properties
    Object.keys(publicPropertiesMap).forEach(key => {
        Object.defineProperty(target, key, {
            configurable: true,
            enumerable: false,
            get: () => publicPropertiesMap[key](instance),
            // intercepted by the proxy so no need for implementation,
            // but needed to prevent set errors
            set: NOOP
        });
    });
    return target;
}
// dev only
function exposePropsOnRenderContext(instance) {
    const { ctx, propsOptions: [propsOptions] } = instance;
    if (propsOptions) {
        Object.keys(propsOptions).forEach(key => {
            Object.defineProperty(ctx, key, {
                enumerable: true,
                configurable: true,
                get: () => instance.props[key],
                set: NOOP
            });
        });
    }
}
// dev only
function exposeSetupStateOnRenderContext(instance) {
    const { ctx, setupState } = instance;
    Object.keys(toRaw(setupState)).forEach(key => {
        if (!setupState.__isScriptSetup) {
            if (isReservedPrefix(key[0])) {
                warn(`setup() return property ${JSON.stringify(key)} should not start with "$" or "_" ` +
                    `which are reserved prefixes for Vue internals.`);
                return;
            }
            Object.defineProperty(ctx, key, {
                enumerable: true,
                configurable: true,
                get: () => setupState[key],
                set: NOOP
            });
        }
    });
}

function createDuplicateChecker() {
    const cache = Object.create(null);
    return (type, key) => {
        if (cache[key]) {
            warn(`${type} property "${key}" is already defined in ${cache[key]}.`);
        }
        else {
            cache[key] = type;
        }
    };
}
let shouldCacheAccess = true;
function applyOptions(instance) {
    const options = resolveMergedOptions(instance);
    const publicThis = instance.proxy;
    const ctx = instance.ctx;
    // do not cache property access on public proxy during state initialization
    shouldCacheAccess = false;
    // call beforeCreate first before accessing other options since
    // the hook may mutate resolved options (#2791)
    if (options.beforeCreate) {
        callHook(options.beforeCreate, instance, "bc" /* BEFORE_CREATE */);
    }
    const { 
    // state
    data: dataOptions, computed: computedOptions, methods, watch: watchOptions, provide: provideOptions, inject: injectOptions, 
    // lifecycle
    created, beforeMount, mounted, beforeUpdate, updated, activated, deactivated, beforeDestroy, beforeUnmount, destroyed, unmounted, render, renderTracked, renderTriggered, errorCaptured, serverPrefetch, 
    // public API
    expose, inheritAttrs, 
    // assets
    components, directives, filters } = options;
    const checkDuplicateProperties = ( false) ? 0 : null;
    if ((false)) {}
    // options initialization order (to be consistent with Vue 2):
    // - props (already done outside of this function)
    // - inject
    // - methods
    // - data (deferred since it relies on `this` access)
    // - computed
    // - watch (deferred since it relies on `this` access)
    if (injectOptions) {
        resolveInjections(injectOptions, ctx, checkDuplicateProperties, instance.appContext.config.unwrapInjectedRef);
    }
    if (methods) {
        for (const key in methods) {
            const methodHandler = methods[key];
            if ((0,_vue_shared__WEBPACK_IMPORTED_MODULE_1__/* .isFunction */ .mf)(methodHandler)) {
                // In dev mode, we use the `createRenderContext` function to define
                // methods to the proxy target, and those are read-only but
                // reconfigurable, so it needs to be redefined here
                if ((false)) {}
                else {
                    ctx[key] = methodHandler.bind(publicThis);
                }
                if ((false)) {}
            }
            else if ((false)) {}
        }
    }
    if (dataOptions) {
        if (false) {}
        const data = dataOptions.call(publicThis, publicThis);
        if (false) {}
        if (!(0,_vue_shared__WEBPACK_IMPORTED_MODULE_1__/* .isObject */ .Kn)(data)) {
            ( false) && 0;
        }
        else {
            instance.data = (0,_vue_reactivity__WEBPACK_IMPORTED_MODULE_0__/* .reactive */ .qj)(data);
            if ((false)) {}
        }
    }
    // state initialization complete at this point - start caching access
    shouldCacheAccess = true;
    if (computedOptions) {
        for (const key in computedOptions) {
            const opt = computedOptions[key];
            const get = (0,_vue_shared__WEBPACK_IMPORTED_MODULE_1__/* .isFunction */ .mf)(opt)
                ? opt.bind(publicThis, publicThis)
                : (0,_vue_shared__WEBPACK_IMPORTED_MODULE_1__/* .isFunction */ .mf)(opt.get)
                    ? opt.get.bind(publicThis, publicThis)
                    : _vue_shared__WEBPACK_IMPORTED_MODULE_1__/* .NOOP */ .dG;
            if (false) {}
            const set = !(0,_vue_shared__WEBPACK_IMPORTED_MODULE_1__/* .isFunction */ .mf)(opt) && (0,_vue_shared__WEBPACK_IMPORTED_MODULE_1__/* .isFunction */ .mf)(opt.set)
                ? opt.set.bind(publicThis)
                : ( false)
                    ? 0
                    : _vue_shared__WEBPACK_IMPORTED_MODULE_1__/* .NOOP */ .dG;
            const c = computed({
                get,
                set
            });
            Object.defineProperty(ctx, key, {
                enumerable: true,
                configurable: true,
                get: () => c.value,
                set: v => (c.value = v)
            });
            if ((false)) {}
        }
    }
    if (watchOptions) {
        for (const key in watchOptions) {
            createWatcher(watchOptions[key], ctx, publicThis, key);
        }
    }
    if (provideOptions) {
        const provides = (0,_vue_shared__WEBPACK_IMPORTED_MODULE_1__/* .isFunction */ .mf)(provideOptions)
            ? provideOptions.call(publicThis)
            : provideOptions;
        Reflect.ownKeys(provides).forEach(key => {
            provide(key, provides[key]);
        });
    }
    if (created) {
        callHook(created, instance, "c" /* CREATED */);
    }
    function registerLifecycleHook(register, hook) {
        if ((0,_vue_shared__WEBPACK_IMPORTED_MODULE_1__/* .isArray */ .kJ)(hook)) {
            hook.forEach(_hook => register(_hook.bind(publicThis)));
        }
        else if (hook) {
            register(hook.bind(publicThis));
        }
    }
    registerLifecycleHook(onBeforeMount, beforeMount);
    registerLifecycleHook(onMounted, mounted);
    registerLifecycleHook(onBeforeUpdate, beforeUpdate);
    registerLifecycleHook(onUpdated, updated);
    registerLifecycleHook(onActivated, activated);
    registerLifecycleHook(onDeactivated, deactivated);
    registerLifecycleHook(onErrorCaptured, errorCaptured);
    registerLifecycleHook(onRenderTracked, renderTracked);
    registerLifecycleHook(onRenderTriggered, renderTriggered);
    registerLifecycleHook(onBeforeUnmount, beforeUnmount);
    registerLifecycleHook(onUnmounted, unmounted);
    registerLifecycleHook(onServerPrefetch, serverPrefetch);
    if ((0,_vue_shared__WEBPACK_IMPORTED_MODULE_1__/* .isArray */ .kJ)(expose)) {
        if (expose.length) {
            const exposed = instance.exposed || (instance.exposed = {});
            expose.forEach(key => {
                Object.defineProperty(exposed, key, {
                    get: () => publicThis[key],
                    set: val => (publicThis[key] = val)
                });
            });
        }
        else if (!instance.exposed) {
            instance.exposed = {};
        }
    }
    // options that are handled when creating the instance but also need to be
    // applied from mixins
    if (render && instance.render === _vue_shared__WEBPACK_IMPORTED_MODULE_1__/* .NOOP */ .dG) {
        instance.render = render;
    }
    if (inheritAttrs != null) {
        instance.inheritAttrs = inheritAttrs;
    }
    // asset options.
    if (components)
        instance.components = components;
    if (directives)
        instance.directives = directives;
}
function resolveInjections(injectOptions, ctx, checkDuplicateProperties = _vue_shared__WEBPACK_IMPORTED_MODULE_1__/* .NOOP */ .dG, unwrapRef = false) {
    if ((0,_vue_shared__WEBPACK_IMPORTED_MODULE_1__/* .isArray */ .kJ)(injectOptions)) {
        injectOptions = normalizeInject(injectOptions);
    }
    for (const key in injectOptions) {
        const opt = injectOptions[key];
        let injected;
        if ((0,_vue_shared__WEBPACK_IMPORTED_MODULE_1__/* .isObject */ .Kn)(opt)) {
            if ('default' in opt) {
                injected = inject(opt.from || key, opt.default, true /* treat default function as factory */);
            }
            else {
                injected = inject(opt.from || key);
            }
        }
        else {
            injected = inject(opt);
        }
        if ((0,_vue_reactivity__WEBPACK_IMPORTED_MODULE_0__/* .isRef */ .dq)(injected)) {
            // TODO remove the check in 3.3
            if (unwrapRef) {
                Object.defineProperty(ctx, key, {
                    enumerable: true,
                    configurable: true,
                    get: () => injected.value,
                    set: v => (injected.value = v)
                });
            }
            else {
                if ((false)) {}
                ctx[key] = injected;
            }
        }
        else {
            ctx[key] = injected;
        }
        if ((false)) {}
    }
}
function callHook(hook, instance, type) {
    callWithAsyncErrorHandling((0,_vue_shared__WEBPACK_IMPORTED_MODULE_1__/* .isArray */ .kJ)(hook)
        ? hook.map(h => h.bind(instance.proxy))
        : hook.bind(instance.proxy), instance, type);
}
function createWatcher(raw, ctx, publicThis, key) {
    const getter = key.includes('.')
        ? createPathGetter(publicThis, key)
        : () => publicThis[key];
    if ((0,_vue_shared__WEBPACK_IMPORTED_MODULE_1__/* .isString */ .HD)(raw)) {
        const handler = ctx[raw];
        if ((0,_vue_shared__WEBPACK_IMPORTED_MODULE_1__/* .isFunction */ .mf)(handler)) {
            watch(getter, handler);
        }
        else if ((false)) {}
    }
    else if ((0,_vue_shared__WEBPACK_IMPORTED_MODULE_1__/* .isFunction */ .mf)(raw)) {
        watch(getter, raw.bind(publicThis));
    }
    else if ((0,_vue_shared__WEBPACK_IMPORTED_MODULE_1__/* .isObject */ .Kn)(raw)) {
        if ((0,_vue_shared__WEBPACK_IMPORTED_MODULE_1__/* .isArray */ .kJ)(raw)) {
            raw.forEach(r => createWatcher(r, ctx, publicThis, key));
        }
        else {
            const handler = (0,_vue_shared__WEBPACK_IMPORTED_MODULE_1__/* .isFunction */ .mf)(raw.handler)
                ? raw.handler.bind(publicThis)
                : ctx[raw.handler];
            if ((0,_vue_shared__WEBPACK_IMPORTED_MODULE_1__/* .isFunction */ .mf)(handler)) {
                watch(getter, handler, raw);
            }
            else if ((false)) {}
        }
    }
    else if ((false)) {}
}
/**
 * Resolve merged options and cache it on the component.
 * This is done only once per-component since the merging does not involve
 * instances.
 */
function resolveMergedOptions(instance) {
    const base = instance.type;
    const { mixins, extends: extendsOptions } = base;
    const { mixins: globalMixins, optionsCache: cache, config: { optionMergeStrategies } } = instance.appContext;
    const cached = cache.get(base);
    let resolved;
    if (cached) {
        resolved = cached;
    }
    else if (!globalMixins.length && !mixins && !extendsOptions) {
        {
            resolved = base;
        }
    }
    else {
        resolved = {};
        if (globalMixins.length) {
            globalMixins.forEach(m => mergeOptions(resolved, m, optionMergeStrategies, true));
        }
        mergeOptions(resolved, base, optionMergeStrategies);
    }
    cache.set(base, resolved);
    return resolved;
}
function mergeOptions(to, from, strats, asMixin = false) {
    const { mixins, extends: extendsOptions } = from;
    if (extendsOptions) {
        mergeOptions(to, extendsOptions, strats, true);
    }
    if (mixins) {
        mixins.forEach((m) => mergeOptions(to, m, strats, true));
    }
    for (const key in from) {
        if (asMixin && key === 'expose') {
            ( false) &&
                0;
        }
        else {
            const strat = internalOptionMergeStrats[key] || (strats && strats[key]);
            to[key] = strat ? strat(to[key], from[key]) : from[key];
        }
    }
    return to;
}
const internalOptionMergeStrats = {
    data: mergeDataFn,
    props: mergeObjectOptions,
    emits: mergeObjectOptions,
    // objects
    methods: mergeObjectOptions,
    computed: mergeObjectOptions,
    // lifecycle
    beforeCreate: mergeAsArray,
    created: mergeAsArray,
    beforeMount: mergeAsArray,
    mounted: mergeAsArray,
    beforeUpdate: mergeAsArray,
    updated: mergeAsArray,
    beforeDestroy: mergeAsArray,
    beforeUnmount: mergeAsArray,
    destroyed: mergeAsArray,
    unmounted: mergeAsArray,
    activated: mergeAsArray,
    deactivated: mergeAsArray,
    errorCaptured: mergeAsArray,
    serverPrefetch: mergeAsArray,
    // assets
    components: mergeObjectOptions,
    directives: mergeObjectOptions,
    // watch
    watch: mergeWatchOptions,
    // provide / inject
    provide: mergeDataFn,
    inject: mergeInject
};
function mergeDataFn(to, from) {
    if (!from) {
        return to;
    }
    if (!to) {
        return from;
    }
    return function mergedDataFn() {
        return ((0,_vue_shared__WEBPACK_IMPORTED_MODULE_1__/* .extend */ .l7))((0,_vue_shared__WEBPACK_IMPORTED_MODULE_1__/* .isFunction */ .mf)(to) ? to.call(this, this) : to, (0,_vue_shared__WEBPACK_IMPORTED_MODULE_1__/* .isFunction */ .mf)(from) ? from.call(this, this) : from);
    };
}
function mergeInject(to, from) {
    return mergeObjectOptions(normalizeInject(to), normalizeInject(from));
}
function normalizeInject(raw) {
    if ((0,_vue_shared__WEBPACK_IMPORTED_MODULE_1__/* .isArray */ .kJ)(raw)) {
        const res = {};
        for (let i = 0; i < raw.length; i++) {
            res[raw[i]] = raw[i];
        }
        return res;
    }
    return raw;
}
function mergeAsArray(to, from) {
    return to ? [...new Set([].concat(to, from))] : from;
}
function mergeObjectOptions(to, from) {
    return to ? (0,_vue_shared__WEBPACK_IMPORTED_MODULE_1__/* .extend */ .l7)((0,_vue_shared__WEBPACK_IMPORTED_MODULE_1__/* .extend */ .l7)(Object.create(null), to), from) : from;
}
function mergeWatchOptions(to, from) {
    if (!to)
        return from;
    if (!from)
        return to;
    const merged = (0,_vue_shared__WEBPACK_IMPORTED_MODULE_1__/* .extend */ .l7)(Object.create(null), to);
    for (const key in from) {
        merged[key] = mergeAsArray(to[key], from[key]);
    }
    return merged;
}

function initProps(instance, rawProps, isStateful, // result of bitwise flag comparison
isSSR = false) {
    const props = {};
    const attrs = {};
    (0,_vue_shared__WEBPACK_IMPORTED_MODULE_1__/* .def */ .Nj)(attrs, InternalObjectKey, 1);
    instance.propsDefaults = Object.create(null);
    setFullProps(instance, rawProps, props, attrs);
    // ensure all declared prop keys are present
    for (const key in instance.propsOptions[0]) {
        if (!(key in props)) {
            props[key] = undefined;
        }
    }
    // validation
    if ((false)) {}
    if (isStateful) {
        // stateful
        instance.props = isSSR ? props : (0,_vue_reactivity__WEBPACK_IMPORTED_MODULE_0__/* .shallowReactive */ .Um)(props);
    }
    else {
        if (!instance.type.props) {
            // functional w/ optional props, props === attrs
            instance.props = attrs;
        }
        else {
            // functional w/ declared props
            instance.props = props;
        }
    }
    instance.attrs = attrs;
}
function updateProps(instance, rawProps, rawPrevProps, optimized) {
    const { props, attrs, vnode: { patchFlag } } = instance;
    const rawCurrentProps = (0,_vue_reactivity__WEBPACK_IMPORTED_MODULE_0__/* .toRaw */ .IU)(props);
    const [options] = instance.propsOptions;
    let hasAttrsChanged = false;
    if (
    // always force full diff in dev
    // - #1942 if hmr is enabled with sfc component
    // - vite#872 non-sfc component used by sfc component
     true &&
        (optimized || patchFlag > 0) &&
        !(patchFlag & 16 /* FULL_PROPS */)) {
        if (patchFlag & 8 /* PROPS */) {
            // Compiler-generated props & no keys change, just set the updated
            // the props.
            const propsToUpdate = instance.vnode.dynamicProps;
            for (let i = 0; i < propsToUpdate.length; i++) {
                let key = propsToUpdate[i];
                // skip if the prop key is a declared emit event listener
                if (isEmitListener(instance.emitsOptions, key)) {
                    continue;
                }
                // PROPS flag guarantees rawProps to be non-null
                const value = rawProps[key];
                if (options) {
                    // attr / props separation was done on init and will be consistent
                    // in this code path, so just check if attrs have it.
                    if ((0,_vue_shared__WEBPACK_IMPORTED_MODULE_1__/* .hasOwn */ .RI)(attrs, key)) {
                        if (value !== attrs[key]) {
                            attrs[key] = value;
                            hasAttrsChanged = true;
                        }
                    }
                    else {
                        const camelizedKey = (0,_vue_shared__WEBPACK_IMPORTED_MODULE_1__/* .camelize */ ._A)(key);
                        props[camelizedKey] = resolvePropValue(options, rawCurrentProps, camelizedKey, value, instance, false /* isAbsent */);
                    }
                }
                else {
                    if (value !== attrs[key]) {
                        attrs[key] = value;
                        hasAttrsChanged = true;
                    }
                }
            }
        }
    }
    else {
        // full props update.
        if (setFullProps(instance, rawProps, props, attrs)) {
            hasAttrsChanged = true;
        }
        // in case of dynamic props, check if we need to delete keys from
        // the props object
        let kebabKey;
        for (const key in rawCurrentProps) {
            if (!rawProps ||
                // for camelCase
                (!(0,_vue_shared__WEBPACK_IMPORTED_MODULE_1__/* .hasOwn */ .RI)(rawProps, key) &&
                    // it's possible the original props was passed in as kebab-case
                    // and converted to camelCase (#955)
                    ((kebabKey = (0,_vue_shared__WEBPACK_IMPORTED_MODULE_1__/* .hyphenate */ .rs)(key)) === key || !(0,_vue_shared__WEBPACK_IMPORTED_MODULE_1__/* .hasOwn */ .RI)(rawProps, kebabKey)))) {
                if (options) {
                    if (rawPrevProps &&
                        // for camelCase
                        (rawPrevProps[key] !== undefined ||
                            // for kebab-case
                            rawPrevProps[kebabKey] !== undefined)) {
                        props[key] = resolvePropValue(options, rawCurrentProps, key, undefined, instance, true /* isAbsent */);
                    }
                }
                else {
                    delete props[key];
                }
            }
        }
        // in the case of functional component w/o props declaration, props and
        // attrs point to the same object so it should already have been updated.
        if (attrs !== rawCurrentProps) {
            for (const key in attrs) {
                if (!rawProps ||
                    (!(0,_vue_shared__WEBPACK_IMPORTED_MODULE_1__/* .hasOwn */ .RI)(rawProps, key) &&
                        (!false ))) {
                    delete attrs[key];
                    hasAttrsChanged = true;
                }
            }
        }
    }
    // trigger updates for $attrs in case it's used in component slots
    if (hasAttrsChanged) {
        (0,_vue_reactivity__WEBPACK_IMPORTED_MODULE_0__/* .trigger */ .X$)(instance, "set" /* SET */, '$attrs');
    }
    if ((false)) {}
}
function setFullProps(instance, rawProps, props, attrs) {
    const [options, needCastKeys] = instance.propsOptions;
    let hasAttrsChanged = false;
    let rawCastValues;
    if (rawProps) {
        for (let key in rawProps) {
            // key, ref are reserved and never passed down
            if ((0,_vue_shared__WEBPACK_IMPORTED_MODULE_1__/* .isReservedProp */ .Gg)(key)) {
                continue;
            }
            const value = rawProps[key];
            // prop option names are camelized during normalization, so to support
            // kebab -> camel conversion here we need to camelize the key.
            let camelKey;
            if (options && (0,_vue_shared__WEBPACK_IMPORTED_MODULE_1__/* .hasOwn */ .RI)(options, (camelKey = (0,_vue_shared__WEBPACK_IMPORTED_MODULE_1__/* .camelize */ ._A)(key)))) {
                if (!needCastKeys || !needCastKeys.includes(camelKey)) {
                    props[camelKey] = value;
                }
                else {
                    (rawCastValues || (rawCastValues = {}))[camelKey] = value;
                }
            }
            else if (!isEmitListener(instance.emitsOptions, key)) {
                if (!(key in attrs) || value !== attrs[key]) {
                    attrs[key] = value;
                    hasAttrsChanged = true;
                }
            }
        }
    }
    if (needCastKeys) {
        const rawCurrentProps = (0,_vue_reactivity__WEBPACK_IMPORTED_MODULE_0__/* .toRaw */ .IU)(props);
        const castValues = rawCastValues || _vue_shared__WEBPACK_IMPORTED_MODULE_1__/* .EMPTY_OBJ */ .kT;
        for (let i = 0; i < needCastKeys.length; i++) {
            const key = needCastKeys[i];
            props[key] = resolvePropValue(options, rawCurrentProps, key, castValues[key], instance, !(0,_vue_shared__WEBPACK_IMPORTED_MODULE_1__/* .hasOwn */ .RI)(castValues, key));
        }
    }
    return hasAttrsChanged;
}
function resolvePropValue(options, props, key, value, instance, isAbsent) {
    const opt = options[key];
    if (opt != null) {
        const hasDefault = (0,_vue_shared__WEBPACK_IMPORTED_MODULE_1__/* .hasOwn */ .RI)(opt, 'default');
        // default values
        if (hasDefault && value === undefined) {
            const defaultValue = opt.default;
            if (opt.type !== Function && (0,_vue_shared__WEBPACK_IMPORTED_MODULE_1__/* .isFunction */ .mf)(defaultValue)) {
                const { propsDefaults } = instance;
                if (key in propsDefaults) {
                    value = propsDefaults[key];
                }
                else {
                    setCurrentInstance(instance);
                    value = propsDefaults[key] = defaultValue.call(null, props);
                    unsetCurrentInstance();
                }
            }
            else {
                value = defaultValue;
            }
        }
        // boolean casting
        if (opt[0 /* shouldCast */]) {
            if (isAbsent && !hasDefault) {
                value = false;
            }
            else if (opt[1 /* shouldCastTrue */] &&
                (value === '' || value === (0,_vue_shared__WEBPACK_IMPORTED_MODULE_1__/* .hyphenate */ .rs)(key))) {
                value = true;
            }
        }
    }
    return value;
}
function normalizePropsOptions(comp, appContext, asMixin = false) {
    const cache = appContext.propsCache;
    const cached = cache.get(comp);
    if (cached) {
        return cached;
    }
    const raw = comp.props;
    const normalized = {};
    const needCastKeys = [];
    // apply mixin/extends props
    let hasExtends = false;
    if (__VUE_OPTIONS_API__ && !(0,_vue_shared__WEBPACK_IMPORTED_MODULE_1__/* .isFunction */ .mf)(comp)) {
        const extendProps = (raw) => {
            hasExtends = true;
            const [props, keys] = normalizePropsOptions(raw, appContext, true);
            (0,_vue_shared__WEBPACK_IMPORTED_MODULE_1__/* .extend */ .l7)(normalized, props);
            if (keys)
                needCastKeys.push(...keys);
        };
        if (!asMixin && appContext.mixins.length) {
            appContext.mixins.forEach(extendProps);
        }
        if (comp.extends) {
            extendProps(comp.extends);
        }
        if (comp.mixins) {
            comp.mixins.forEach(extendProps);
        }
    }
    if (!raw && !hasExtends) {
        cache.set(comp, _vue_shared__WEBPACK_IMPORTED_MODULE_1__/* .EMPTY_ARR */ .Z6);
        return _vue_shared__WEBPACK_IMPORTED_MODULE_1__/* .EMPTY_ARR */ .Z6;
    }
    if ((0,_vue_shared__WEBPACK_IMPORTED_MODULE_1__/* .isArray */ .kJ)(raw)) {
        for (let i = 0; i < raw.length; i++) {
            if (false) {}
            const normalizedKey = (0,_vue_shared__WEBPACK_IMPORTED_MODULE_1__/* .camelize */ ._A)(raw[i]);
            if (validatePropName(normalizedKey)) {
                normalized[normalizedKey] = _vue_shared__WEBPACK_IMPORTED_MODULE_1__/* .EMPTY_OBJ */ .kT;
            }
        }
    }
    else if (raw) {
        if (false) {}
        for (const key in raw) {
            const normalizedKey = (0,_vue_shared__WEBPACK_IMPORTED_MODULE_1__/* .camelize */ ._A)(key);
            if (validatePropName(normalizedKey)) {
                const opt = raw[key];
                const prop = (normalized[normalizedKey] =
                    (0,_vue_shared__WEBPACK_IMPORTED_MODULE_1__/* .isArray */ .kJ)(opt) || (0,_vue_shared__WEBPACK_IMPORTED_MODULE_1__/* .isFunction */ .mf)(opt) ? { type: opt } : opt);
                if (prop) {
                    const booleanIndex = getTypeIndex(Boolean, prop.type);
                    const stringIndex = getTypeIndex(String, prop.type);
                    prop[0 /* shouldCast */] = booleanIndex > -1;
                    prop[1 /* shouldCastTrue */] =
                        stringIndex < 0 || booleanIndex < stringIndex;
                    // if the prop needs boolean casting or default value
                    if (booleanIndex > -1 || (0,_vue_shared__WEBPACK_IMPORTED_MODULE_1__/* .hasOwn */ .RI)(prop, 'default')) {
                        needCastKeys.push(normalizedKey);
                    }
                }
            }
        }
    }
    const res = [normalized, needCastKeys];
    cache.set(comp, res);
    return res;
}
function validatePropName(key) {
    if (key[0] !== '$') {
        return true;
    }
    else if ((false)) {}
    return false;
}
// use function string name to check type constructors
// so that it works across vms / iframes.
function getType(ctor) {
    const match = ctor && ctor.toString().match(/^\s*function (\w+)/);
    return match ? match[1] : ctor === null ? 'null' : '';
}
function isSameType(a, b) {
    return getType(a) === getType(b);
}
function getTypeIndex(type, expectedTypes) {
    if ((0,_vue_shared__WEBPACK_IMPORTED_MODULE_1__/* .isArray */ .kJ)(expectedTypes)) {
        return expectedTypes.findIndex(t => isSameType(t, type));
    }
    else if ((0,_vue_shared__WEBPACK_IMPORTED_MODULE_1__/* .isFunction */ .mf)(expectedTypes)) {
        return isSameType(expectedTypes, type) ? 0 : -1;
    }
    return -1;
}
/**
 * dev only
 */
function validateProps(rawProps, props, instance) {
    const resolvedValues = toRaw(props);
    const options = instance.propsOptions[0];
    for (const key in options) {
        let opt = options[key];
        if (opt == null)
            continue;
        validateProp(key, resolvedValues[key], opt, !hasOwn(rawProps, key) && !hasOwn(rawProps, hyphenate(key)));
    }
}
/**
 * dev only
 */
function validateProp(name, value, prop, isAbsent) {
    const { type, required, validator } = prop;
    // required!
    if (required && isAbsent) {
        warn('Missing required prop: "' + name + '"');
        return;
    }
    // missing but optional
    if (value == null && !prop.required) {
        return;
    }
    // type check
    if (type != null && type !== true) {
        let isValid = false;
        const types = isArray(type) ? type : [type];
        const expectedTypes = [];
        // value is valid as long as one of the specified types match
        for (let i = 0; i < types.length && !isValid; i++) {
            const { valid, expectedType } = assertType(value, types[i]);
            expectedTypes.push(expectedType || '');
            isValid = valid;
        }
        if (!isValid) {
            warn(getInvalidTypeMessage(name, value, expectedTypes));
            return;
        }
    }
    // custom validator
    if (validator && !validator(value)) {
        warn('Invalid prop: custom validator check failed for prop "' + name + '".');
    }
}
const isSimpleType = /*#__PURE__*/ (/* unused pure expression or super */ null && (makeMap('String,Number,Boolean,Function,Symbol,BigInt')));
/**
 * dev only
 */
function assertType(value, type) {
    let valid;
    const expectedType = getType(type);
    if (isSimpleType(expectedType)) {
        const t = typeof value;
        valid = t === expectedType.toLowerCase();
        // for primitive wrapper objects
        if (!valid && t === 'object') {
            valid = value instanceof type;
        }
    }
    else if (expectedType === 'Object') {
        valid = isObject(value);
    }
    else if (expectedType === 'Array') {
        valid = isArray(value);
    }
    else if (expectedType === 'null') {
        valid = value === null;
    }
    else {
        valid = value instanceof type;
    }
    return {
        valid,
        expectedType
    };
}
/**
 * dev only
 */
function getInvalidTypeMessage(name, value, expectedTypes) {
    let message = `Invalid prop: type check failed for prop "${name}".` +
        ` Expected ${expectedTypes.map(capitalize).join(' | ')}`;
    const expectedType = expectedTypes[0];
    const receivedType = toRawType(value);
    const expectedValue = styleValue(value, expectedType);
    const receivedValue = styleValue(value, receivedType);
    // check if we need to specify expected value
    if (expectedTypes.length === 1 &&
        isExplicable(expectedType) &&
        !isBoolean(expectedType, receivedType)) {
        message += ` with value ${expectedValue}`;
    }
    message += `, got ${receivedType} `;
    // check if we need to specify received value
    if (isExplicable(receivedType)) {
        message += `with value ${receivedValue}.`;
    }
    return message;
}
/**
 * dev only
 */
function styleValue(value, type) {
    if (type === 'String') {
        return `"${value}"`;
    }
    else if (type === 'Number') {
        return `${Number(value)}`;
    }
    else {
        return `${value}`;
    }
}
/**
 * dev only
 */
function isExplicable(type) {
    const explicitTypes = ['string', 'number', 'boolean'];
    return explicitTypes.some(elem => type.toLowerCase() === elem);
}
/**
 * dev only
 */
function isBoolean(...args) {
    return args.some(elem => elem.toLowerCase() === 'boolean');
}

const isInternalKey = (key) => key[0] === '_' || key === '$stable';
const normalizeSlotValue = (value) => (0,_vue_shared__WEBPACK_IMPORTED_MODULE_1__/* .isArray */ .kJ)(value)
    ? value.map(normalizeVNode)
    : [normalizeVNode(value)];
const normalizeSlot = (key, rawSlot, ctx) => {
    if (rawSlot._n) {
        // already normalized - #5353
        return rawSlot;
    }
    const normalized = withCtx((...args) => {
        if (false) {}
        return normalizeSlotValue(rawSlot(...args));
    }, ctx);
    normalized._c = false;
    return normalized;
};
const normalizeObjectSlots = (rawSlots, slots, instance) => {
    const ctx = rawSlots._ctx;
    for (const key in rawSlots) {
        if (isInternalKey(key))
            continue;
        const value = rawSlots[key];
        if ((0,_vue_shared__WEBPACK_IMPORTED_MODULE_1__/* .isFunction */ .mf)(value)) {
            slots[key] = normalizeSlot(key, value, ctx);
        }
        else if (value != null) {
            if (false) {}
            const normalized = normalizeSlotValue(value);
            slots[key] = () => normalized;
        }
    }
};
const normalizeVNodeSlots = (instance, children) => {
    if (false) {}
    const normalized = normalizeSlotValue(children);
    instance.slots.default = () => normalized;
};
const initSlots = (instance, children) => {
    if (instance.vnode.shapeFlag & 32 /* SLOTS_CHILDREN */) {
        const type = children._;
        if (type) {
            // users can get the shallow readonly version of the slots object through `this.$slots`,
            // we should avoid the proxy object polluting the slots of the internal instance
            instance.slots = (0,_vue_reactivity__WEBPACK_IMPORTED_MODULE_0__/* .toRaw */ .IU)(children);
            // make compiler marker non-enumerable
            (0,_vue_shared__WEBPACK_IMPORTED_MODULE_1__/* .def */ .Nj)(children, '_', type);
        }
        else {
            normalizeObjectSlots(children, (instance.slots = {}));
        }
    }
    else {
        instance.slots = {};
        if (children) {
            normalizeVNodeSlots(instance, children);
        }
    }
    (0,_vue_shared__WEBPACK_IMPORTED_MODULE_1__/* .def */ .Nj)(instance.slots, InternalObjectKey, 1);
};
const updateSlots = (instance, children, optimized) => {
    const { vnode, slots } = instance;
    let needDeletionCheck = true;
    let deletionComparisonTarget = _vue_shared__WEBPACK_IMPORTED_MODULE_1__/* .EMPTY_OBJ */ .kT;
    if (vnode.shapeFlag & 32 /* SLOTS_CHILDREN */) {
        const type = children._;
        if (type) {
            // compiled slots.
            if (false) {}
            else if (optimized && type === 1 /* STABLE */) {
                // compiled AND stable.
                // no need to update, and skip stale slots removal.
                needDeletionCheck = false;
            }
            else {
                // compiled but dynamic (v-if/v-for on slots) - update slots, but skip
                // normalization.
                (0,_vue_shared__WEBPACK_IMPORTED_MODULE_1__/* .extend */ .l7)(slots, children);
                // #2893
                // when rendering the optimized slots by manually written render function,
                // we need to delete the `slots._` flag if necessary to make subsequent updates reliable,
                // i.e. let the `renderSlot` create the bailed Fragment
                if (!optimized && type === 1 /* STABLE */) {
                    delete slots._;
                }
            }
        }
        else {
            needDeletionCheck = !children.$stable;
            normalizeObjectSlots(children, slots);
        }
        deletionComparisonTarget = children;
    }
    else if (children) {
        // non slot object children (direct value) passed to a component
        normalizeVNodeSlots(instance, children);
        deletionComparisonTarget = { default: 1 };
    }
    // delete stale slots
    if (needDeletionCheck) {
        for (const key in slots) {
            if (!isInternalKey(key) && !(key in deletionComparisonTarget)) {
                delete slots[key];
            }
        }
    }
};

function createAppContext() {
    return {
        app: null,
        config: {
            isNativeTag: _vue_shared__WEBPACK_IMPORTED_MODULE_1__.NO,
            performance: false,
            globalProperties: {},
            optionMergeStrategies: {},
            errorHandler: undefined,
            warnHandler: undefined,
            compilerOptions: {}
        },
        mixins: [],
        components: {},
        directives: {},
        provides: Object.create(null),
        optionsCache: new WeakMap(),
        propsCache: new WeakMap(),
        emitsCache: new WeakMap()
    };
}
let uid = 0;
function createAppAPI(render, hydrate) {
    return function createApp(rootComponent, rootProps = null) {
        if (!(0,_vue_shared__WEBPACK_IMPORTED_MODULE_1__/* .isFunction */ .mf)(rootComponent)) {
            rootComponent = Object.assign({}, rootComponent);
        }
        if (rootProps != null && !(0,_vue_shared__WEBPACK_IMPORTED_MODULE_1__/* .isObject */ .Kn)(rootProps)) {
            ( false) && 0;
            rootProps = null;
        }
        const context = createAppContext();
        const installedPlugins = new Set();
        let isMounted = false;
        const app = (context.app = {
            _uid: uid++,
            _component: rootComponent,
            _props: rootProps,
            _container: null,
            _context: context,
            _instance: null,
            version,
            get config() {
                return context.config;
            },
            set config(v) {
                if ((false)) {}
            },
            use(plugin, ...options) {
                if (installedPlugins.has(plugin)) {
                    ( false) && 0;
                }
                else if (plugin && (0,_vue_shared__WEBPACK_IMPORTED_MODULE_1__/* .isFunction */ .mf)(plugin.install)) {
                    installedPlugins.add(plugin);
                    plugin.install(app, ...options);
                }
                else if ((0,_vue_shared__WEBPACK_IMPORTED_MODULE_1__/* .isFunction */ .mf)(plugin)) {
                    installedPlugins.add(plugin);
                    plugin(app, ...options);
                }
                else if ((false)) {}
                return app;
            },
            mixin(mixin) {
                if (__VUE_OPTIONS_API__) {
                    if (!context.mixins.includes(mixin)) {
                        context.mixins.push(mixin);
                    }
                    else if ((false)) {}
                }
                else if ((false)) {}
                return app;
            },
            component(name, component) {
                if ((false)) {}
                if (!component) {
                    return context.components[name];
                }
                if (false) {}
                context.components[name] = component;
                return app;
            },
            directive(name, directive) {
                if ((false)) {}
                if (!directive) {
                    return context.directives[name];
                }
                if (false) {}
                context.directives[name] = directive;
                return app;
            },
            mount(rootContainer, isHydrate, isSVG) {
                if (!isMounted) {
                    // #5571
                    if (false) {}
                    const vnode = createVNode(rootComponent, rootProps);
                    // store app context on the root VNode.
                    // this will be set on the root instance on initial mount.
                    vnode.appContext = context;
                    // HMR root reload
                    if ((false)) {}
                    if (isHydrate && hydrate) {
                        hydrate(vnode, rootContainer);
                    }
                    else {
                        render(vnode, rootContainer, isSVG);
                    }
                    isMounted = true;
                    app._container = rootContainer;
                    rootContainer.__vue_app__ = app;
                    if (( false) || __VUE_PROD_DEVTOOLS__) {
                        app._instance = vnode.component;
                        devtoolsInitApp(app, version);
                    }
                    return getExposeProxy(vnode.component) || vnode.component.proxy;
                }
                else if ((false)) {}
            },
            unmount() {
                if (isMounted) {
                    render(null, app._container);
                    if (( false) || __VUE_PROD_DEVTOOLS__) {
                        app._instance = null;
                        devtoolsUnmountApp(app);
                    }
                    delete app._container.__vue_app__;
                }
                else if ((false)) {}
            },
            provide(key, value) {
                if (false) {}
                context.provides[key] = value;
                return app;
            }
        });
        return app;
    };
}

/**
 * Function for handling a template ref
 */
function setRef(rawRef, oldRawRef, parentSuspense, vnode, isUnmount = false) {
    if ((0,_vue_shared__WEBPACK_IMPORTED_MODULE_1__/* .isArray */ .kJ)(rawRef)) {
        rawRef.forEach((r, i) => setRef(r, oldRawRef && ((0,_vue_shared__WEBPACK_IMPORTED_MODULE_1__/* .isArray */ .kJ)(oldRawRef) ? oldRawRef[i] : oldRawRef), parentSuspense, vnode, isUnmount));
        return;
    }
    if (isAsyncWrapper(vnode) && !isUnmount) {
        // when mounting async components, nothing needs to be done,
        // because the template ref is forwarded to inner component
        return;
    }
    const refValue = vnode.shapeFlag & 4 /* STATEFUL_COMPONENT */
        ? getExposeProxy(vnode.component) || vnode.component.proxy
        : vnode.el;
    const value = isUnmount ? null : refValue;
    const { i: owner, r: ref } = rawRef;
    if (false) {}
    const oldRef = oldRawRef && oldRawRef.r;
    const refs = owner.refs === _vue_shared__WEBPACK_IMPORTED_MODULE_1__/* .EMPTY_OBJ */ .kT ? (owner.refs = {}) : owner.refs;
    const setupState = owner.setupState;
    // dynamic ref changed. unset old ref
    if (oldRef != null && oldRef !== ref) {
        if ((0,_vue_shared__WEBPACK_IMPORTED_MODULE_1__/* .isString */ .HD)(oldRef)) {
            refs[oldRef] = null;
            if ((0,_vue_shared__WEBPACK_IMPORTED_MODULE_1__/* .hasOwn */ .RI)(setupState, oldRef)) {
                setupState[oldRef] = null;
            }
        }
        else if ((0,_vue_reactivity__WEBPACK_IMPORTED_MODULE_0__/* .isRef */ .dq)(oldRef)) {
            oldRef.value = null;
        }
    }
    if ((0,_vue_shared__WEBPACK_IMPORTED_MODULE_1__/* .isFunction */ .mf)(ref)) {
        callWithErrorHandling(ref, owner, 12 /* FUNCTION_REF */, [value, refs]);
    }
    else {
        const _isString = (0,_vue_shared__WEBPACK_IMPORTED_MODULE_1__/* .isString */ .HD)(ref);
        const _isRef = (0,_vue_reactivity__WEBPACK_IMPORTED_MODULE_0__/* .isRef */ .dq)(ref);
        if (_isString || _isRef) {
            const doSet = () => {
                if (rawRef.f) {
                    const existing = _isString ? refs[ref] : ref.value;
                    if (isUnmount) {
                        (0,_vue_shared__WEBPACK_IMPORTED_MODULE_1__/* .isArray */ .kJ)(existing) && (0,_vue_shared__WEBPACK_IMPORTED_MODULE_1__/* .remove */ .Od)(existing, refValue);
                    }
                    else {
                        if (!(0,_vue_shared__WEBPACK_IMPORTED_MODULE_1__/* .isArray */ .kJ)(existing)) {
                            if (_isString) {
                                refs[ref] = [refValue];
                                if ((0,_vue_shared__WEBPACK_IMPORTED_MODULE_1__/* .hasOwn */ .RI)(setupState, ref)) {
                                    setupState[ref] = refs[ref];
                                }
                            }
                            else {
                                ref.value = [refValue];
                                if (rawRef.k)
                                    refs[rawRef.k] = ref.value;
                            }
                        }
                        else if (!existing.includes(refValue)) {
                            existing.push(refValue);
                        }
                    }
                }
                else if (_isString) {
                    refs[ref] = value;
                    if ((0,_vue_shared__WEBPACK_IMPORTED_MODULE_1__/* .hasOwn */ .RI)(setupState, ref)) {
                        setupState[ref] = value;
                    }
                }
                else if ((0,_vue_reactivity__WEBPACK_IMPORTED_MODULE_0__/* .isRef */ .dq)(ref)) {
                    ref.value = value;
                    if (rawRef.k)
                        refs[rawRef.k] = value;
                }
                else if ((false)) {}
            };
            if (value) {
                doSet.id = -1;
                queuePostRenderEffect(doSet, parentSuspense);
            }
            else {
                doSet();
            }
        }
        else if ((false)) {}
    }
}

let hasMismatch = false;
const isSVGContainer = (container) => /svg/.test(container.namespaceURI) && container.tagName !== 'foreignObject';
const isComment = (node) => node.nodeType === 8 /* COMMENT */;
// Note: hydration is DOM-specific
// But we have to place it in core due to tight coupling with core - splitting
// it out creates a ton of unnecessary complexity.
// Hydration also depends on some renderer internal logic which needs to be
// passed in via arguments.
function createHydrationFunctions(rendererInternals) {
    const { mt: mountComponent, p: patch, o: { patchProp, createText, nextSibling, parentNode, remove, insert, createComment } } = rendererInternals;
    const hydrate = (vnode, container) => {
        if (!container.hasChildNodes()) {
            ( false) &&
                0;
            patch(null, vnode, container);
            flushPostFlushCbs();
            return;
        }
        hasMismatch = false;
        hydrateNode(container.firstChild, vnode, null, null, null);
        flushPostFlushCbs();
        if (hasMismatch && !false) {
            // this error should show up in production
            console.error(`Hydration completed but contains mismatches.`);
        }
    };
    const hydrateNode = (node, vnode, parentComponent, parentSuspense, slotScopeIds, optimized = false) => {
        const isFragmentStart = isComment(node) && node.data === '[';
        const onMismatch = () => handleMismatch(node, vnode, parentComponent, parentSuspense, slotScopeIds, isFragmentStart);
        const { type, ref, shapeFlag, patchFlag } = vnode;
        const domType = node.nodeType;
        vnode.el = node;
        if (patchFlag === -2 /* BAIL */) {
            optimized = false;
            vnode.dynamicChildren = null;
        }
        let nextNode = null;
        switch (type) {
            case Text:
                if (domType !== 3 /* TEXT */) {
                    // #5728 empty text node inside a slot can cause hydration failure
                    // because the server rendered HTML won't contain a text node
                    if (vnode.children === '') {
                        insert((vnode.el = createText('')), parentNode(node), node);
                        nextNode = node;
                    }
                    else {
                        nextNode = onMismatch();
                    }
                }
                else {
                    if (node.data !== vnode.children) {
                        hasMismatch = true;
                        ( false) &&
                            0;
                        node.data = vnode.children;
                    }
                    nextNode = nextSibling(node);
                }
                break;
            case Comment:
                if (domType !== 8 /* COMMENT */ || isFragmentStart) {
                    nextNode = onMismatch();
                }
                else {
                    nextNode = nextSibling(node);
                }
                break;
            case Static:
                if (domType !== 1 /* ELEMENT */) {
                    nextNode = onMismatch();
                }
                else {
                    // determine anchor, adopt content
                    nextNode = node;
                    // if the static vnode has its content stripped during build,
                    // adopt it from the server-rendered HTML.
                    const needToAdoptContent = !vnode.children.length;
                    for (let i = 0; i < vnode.staticCount; i++) {
                        if (needToAdoptContent)
                            vnode.children += nextNode.outerHTML;
                        if (i === vnode.staticCount - 1) {
                            vnode.anchor = nextNode;
                        }
                        nextNode = nextSibling(nextNode);
                    }
                    return nextNode;
                }
                break;
            case Fragment:
                if (!isFragmentStart) {
                    nextNode = onMismatch();
                }
                else {
                    nextNode = hydrateFragment(node, vnode, parentComponent, parentSuspense, slotScopeIds, optimized);
                }
                break;
            default:
                if (shapeFlag & 1 /* ELEMENT */) {
                    if (domType !== 1 /* ELEMENT */ ||
                        vnode.type.toLowerCase() !==
                            node.tagName.toLowerCase()) {
                        nextNode = onMismatch();
                    }
                    else {
                        nextNode = hydrateElement(node, vnode, parentComponent, parentSuspense, slotScopeIds, optimized);
                    }
                }
                else if (shapeFlag & 6 /* COMPONENT */) {
                    // when setting up the render effect, if the initial vnode already
                    // has .el set, the component will perform hydration instead of mount
                    // on its sub-tree.
                    vnode.slotScopeIds = slotScopeIds;
                    const container = parentNode(node);
                    mountComponent(vnode, container, null, parentComponent, parentSuspense, isSVGContainer(container), optimized);
                    // component may be async, so in the case of fragments we cannot rely
                    // on component's rendered output to determine the end of the fragment
                    // instead, we do a lookahead to find the end anchor node.
                    nextNode = isFragmentStart
                        ? locateClosingAsyncAnchor(node)
                        : nextSibling(node);
                    // #4293 teleport as component root
                    if (nextNode &&
                        isComment(nextNode) &&
                        nextNode.data === 'teleport end') {
                        nextNode = nextSibling(nextNode);
                    }
                    // #3787
                    // if component is async, it may get moved / unmounted before its
                    // inner component is loaded, so we need to give it a placeholder
                    // vnode that matches its adopted DOM.
                    if (isAsyncWrapper(vnode)) {
                        let subTree;
                        if (isFragmentStart) {
                            subTree = createVNode(Fragment);
                            subTree.anchor = nextNode
                                ? nextNode.previousSibling
                                : container.lastChild;
                        }
                        else {
                            subTree =
                                node.nodeType === 3 ? createTextVNode('') : createVNode('div');
                        }
                        subTree.el = node;
                        vnode.component.subTree = subTree;
                    }
                }
                else if (shapeFlag & 64 /* TELEPORT */) {
                    if (domType !== 8 /* COMMENT */) {
                        nextNode = onMismatch();
                    }
                    else {
                        nextNode = vnode.type.hydrate(node, vnode, parentComponent, parentSuspense, slotScopeIds, optimized, rendererInternals, hydrateChildren);
                    }
                }
                else if (shapeFlag & 128 /* SUSPENSE */) {
                    nextNode = vnode.type.hydrate(node, vnode, parentComponent, parentSuspense, isSVGContainer(parentNode(node)), slotScopeIds, optimized, rendererInternals, hydrateNode);
                }
                else if ((false)) {}
        }
        if (ref != null) {
            setRef(ref, null, parentSuspense, vnode);
        }
        return nextNode;
    };
    const hydrateElement = (el, vnode, parentComponent, parentSuspense, slotScopeIds, optimized) => {
        optimized = optimized || !!vnode.dynamicChildren;
        const { type, props, patchFlag, shapeFlag, dirs } = vnode;
        // #4006 for form elements with non-string v-model value bindings
        // e.g. <option :value="obj">, <input type="checkbox" :true-value="1">
        const forcePatchValue = (type === 'input' && dirs) || type === 'option';
        // skip props & children if this is hoisted static nodes
        // #5405 in dev, always hydrate children for HMR
        if (( false) || forcePatchValue || patchFlag !== -1 /* HOISTED */) {
            if (dirs) {
                invokeDirectiveHook(vnode, null, parentComponent, 'created');
            }
            // props
            if (props) {
                if (forcePatchValue ||
                    !optimized ||
                    patchFlag & (16 /* FULL_PROPS */ | 32 /* HYDRATE_EVENTS */)) {
                    for (const key in props) {
                        if ((forcePatchValue && key.endsWith('value')) ||
                            (isOn(key) && !isReservedProp(key))) {
                            patchProp(el, key, null, props[key], false, undefined, parentComponent);
                        }
                    }
                }
                else if (props.onClick) {
                    // Fast path for click listeners (which is most often) to avoid
                    // iterating through props.
                    patchProp(el, 'onClick', null, props.onClick, false, undefined, parentComponent);
                }
            }
            // vnode / directive hooks
            let vnodeHooks;
            if ((vnodeHooks = props && props.onVnodeBeforeMount)) {
                invokeVNodeHook(vnodeHooks, parentComponent, vnode);
            }
            if (dirs) {
                invokeDirectiveHook(vnode, null, parentComponent, 'beforeMount');
            }
            if ((vnodeHooks = props && props.onVnodeMounted) || dirs) {
                queueEffectWithSuspense(() => {
                    vnodeHooks && invokeVNodeHook(vnodeHooks, parentComponent, vnode);
                    dirs && invokeDirectiveHook(vnode, null, parentComponent, 'mounted');
                }, parentSuspense);
            }
            // children
            if (shapeFlag & 16 /* ARRAY_CHILDREN */ &&
                // skip if element has innerHTML / textContent
                !(props && (props.innerHTML || props.textContent))) {
                let next = hydrateChildren(el.firstChild, vnode, el, parentComponent, parentSuspense, slotScopeIds, optimized);
                let hasWarned = false;
                while (next) {
                    hasMismatch = true;
                    if (false) {}
                    // The SSRed DOM contains more nodes than it should. Remove them.
                    const cur = next;
                    next = next.nextSibling;
                    remove(cur);
                }
            }
            else if (shapeFlag & 8 /* TEXT_CHILDREN */) {
                if (el.textContent !== vnode.children) {
                    hasMismatch = true;
                    ( false) &&
                        0;
                    el.textContent = vnode.children;
                }
            }
        }
        return el.nextSibling;
    };
    const hydrateChildren = (node, parentVNode, container, parentComponent, parentSuspense, slotScopeIds, optimized) => {
        optimized = optimized || !!parentVNode.dynamicChildren;
        const children = parentVNode.children;
        const l = children.length;
        let hasWarned = false;
        for (let i = 0; i < l; i++) {
            const vnode = optimized
                ? children[i]
                : (children[i] = normalizeVNode(children[i]));
            if (node) {
                node = hydrateNode(node, vnode, parentComponent, parentSuspense, slotScopeIds, optimized);
            }
            else if (vnode.type === Text && !vnode.children) {
                continue;
            }
            else {
                hasMismatch = true;
                if (false) {}
                // the SSRed DOM didn't contain enough nodes. Mount the missing ones.
                patch(null, vnode, container, null, parentComponent, parentSuspense, isSVGContainer(container), slotScopeIds);
            }
        }
        return node;
    };
    const hydrateFragment = (node, vnode, parentComponent, parentSuspense, slotScopeIds, optimized) => {
        const { slotScopeIds: fragmentSlotScopeIds } = vnode;
        if (fragmentSlotScopeIds) {
            slotScopeIds = slotScopeIds
                ? slotScopeIds.concat(fragmentSlotScopeIds)
                : fragmentSlotScopeIds;
        }
        const container = parentNode(node);
        const next = hydrateChildren(nextSibling(node), vnode, container, parentComponent, parentSuspense, slotScopeIds, optimized);
        if (next && isComment(next) && next.data === ']') {
            return nextSibling((vnode.anchor = next));
        }
        else {
            // fragment didn't hydrate successfully, since we didn't get a end anchor
            // back. This should have led to node/children mismatch warnings.
            hasMismatch = true;
            // since the anchor is missing, we need to create one and insert it
            insert((vnode.anchor = createComment(`]`)), container, next);
            return next;
        }
    };
    const handleMismatch = (node, vnode, parentComponent, parentSuspense, slotScopeIds, isFragment) => {
        hasMismatch = true;
        ( false) &&
            0;
        vnode.el = null;
        if (isFragment) {
            // remove excessive fragment nodes
            const end = locateClosingAsyncAnchor(node);
            while (true) {
                const next = nextSibling(node);
                if (next && next !== end) {
                    remove(next);
                }
                else {
                    break;
                }
            }
        }
        const next = nextSibling(node);
        const container = parentNode(node);
        remove(node);
        patch(null, vnode, container, next, parentComponent, parentSuspense, isSVGContainer(container), slotScopeIds);
        return next;
    };
    const locateClosingAsyncAnchor = (node) => {
        let match = 0;
        while (node) {
            node = nextSibling(node);
            if (node && isComment(node)) {
                if (node.data === '[')
                    match++;
                if (node.data === ']') {
                    if (match === 0) {
                        return nextSibling(node);
                    }
                    else {
                        match--;
                    }
                }
            }
        }
        return node;
    };
    return [hydrate, hydrateNode];
}

/* eslint-disable no-restricted-globals */
let supported;
let perf;
function startMeasure(instance, type) {
    if (instance.appContext.config.performance && isSupported()) {
        perf.mark(`vue-${type}-${instance.uid}`);
    }
    if (( false) || __VUE_PROD_DEVTOOLS__) {
        devtoolsPerfStart(instance, type, isSupported() ? perf.now() : Date.now());
    }
}
function endMeasure(instance, type) {
    if (instance.appContext.config.performance && isSupported()) {
        const startTag = `vue-${type}-${instance.uid}`;
        const endTag = startTag + `:end`;
        perf.mark(endTag);
        perf.measure(`<${formatComponentName(instance, instance.type)}> ${type}`, startTag, endTag);
        perf.clearMarks(startTag);
        perf.clearMarks(endTag);
    }
    if (( false) || __VUE_PROD_DEVTOOLS__) {
        devtoolsPerfEnd(instance, type, isSupported() ? perf.now() : Date.now());
    }
}
function isSupported() {
    if (supported !== undefined) {
        return supported;
    }
    if (typeof window !== 'undefined' && window.performance) {
        supported = true;
        perf = window.performance;
    }
    else {
        supported = false;
    }
    return supported;
}

/**
 * This is only called in esm-bundler builds.
 * It is called when a renderer is created, in `baseCreateRenderer` so that
 * importing runtime-core is side-effects free.
 *
 * istanbul-ignore-next
 */
function initFeatureFlags() {
    const needWarn = [];
    if (typeof __VUE_OPTIONS_API__ !== 'boolean') {
        ( false) && 0;
        (0,_vue_shared__WEBPACK_IMPORTED_MODULE_1__/* .getGlobalThis */ .E9)().__VUE_OPTIONS_API__ = true;
    }
    if (typeof __VUE_PROD_DEVTOOLS__ !== 'boolean') {
        ( false) && 0;
        (0,_vue_shared__WEBPACK_IMPORTED_MODULE_1__/* .getGlobalThis */ .E9)().__VUE_PROD_DEVTOOLS__ = false;
    }
    if (false) {}
}

const queuePostRenderEffect = queueEffectWithSuspense
    ;
/**
 * The createRenderer function accepts two generic arguments:
 * HostNode and HostElement, corresponding to Node and Element types in the
 * host environment. For example, for runtime-dom, HostNode would be the DOM
 * `Node` interface and HostElement would be the DOM `Element` interface.
 *
 * Custom renderers can pass in the platform specific types like this:
 *
 * ``` js
 * const { render, createApp } = createRenderer<Node, Element>({
 *   patchProp,
 *   ...nodeOps
 * })
 * ```
 */
function createRenderer(options) {
    return baseCreateRenderer(options);
}
// Separate API for creating hydration-enabled renderer.
// Hydration logic is only used when calling this function, making it
// tree-shakable.
function createHydrationRenderer(options) {
    return baseCreateRenderer(options, createHydrationFunctions);
}
// implementation
function baseCreateRenderer(options, createHydrationFns) {
    // compile-time feature flags check
    {
        initFeatureFlags();
    }
    const target = (0,_vue_shared__WEBPACK_IMPORTED_MODULE_1__/* .getGlobalThis */ .E9)();
    target.__VUE__ = true;
    if (( false) || __VUE_PROD_DEVTOOLS__) {
        setDevtoolsHook(target.__VUE_DEVTOOLS_GLOBAL_HOOK__, target);
    }
    const { insert: hostInsert, remove: hostRemove, patchProp: hostPatchProp, createElement: hostCreateElement, createText: hostCreateText, createComment: hostCreateComment, setText: hostSetText, setElementText: hostSetElementText, parentNode: hostParentNode, nextSibling: hostNextSibling, setScopeId: hostSetScopeId = _vue_shared__WEBPACK_IMPORTED_MODULE_1__/* .NOOP */ .dG, cloneNode: hostCloneNode, insertStaticContent: hostInsertStaticContent } = options;
    // Note: functions inside this closure should use `const xxx = () => {}`
    // style in order to prevent being inlined by minifiers.
    const patch = (n1, n2, container, anchor = null, parentComponent = null, parentSuspense = null, isSVG = false, slotScopeIds = null, optimized =  false ? 0 : !!n2.dynamicChildren) => {
        if (n1 === n2) {
            return;
        }
        // patching & not same type, unmount old tree
        if (n1 && !isSameVNodeType(n1, n2)) {
            anchor = getNextHostNode(n1);
            unmount(n1, parentComponent, parentSuspense, true);
            n1 = null;
        }
        if (n2.patchFlag === -2 /* BAIL */) {
            optimized = false;
            n2.dynamicChildren = null;
        }
        const { type, ref, shapeFlag } = n2;
        switch (type) {
            case Text:
                processText(n1, n2, container, anchor);
                break;
            case Comment:
                processCommentNode(n1, n2, container, anchor);
                break;
            case Static:
                if (n1 == null) {
                    mountStaticNode(n2, container, anchor, isSVG);
                }
                else if ((false)) {}
                break;
            case Fragment:
                processFragment(n1, n2, container, anchor, parentComponent, parentSuspense, isSVG, slotScopeIds, optimized);
                break;
            default:
                if (shapeFlag & 1 /* ELEMENT */) {
                    processElement(n1, n2, container, anchor, parentComponent, parentSuspense, isSVG, slotScopeIds, optimized);
                }
                else if (shapeFlag & 6 /* COMPONENT */) {
                    processComponent(n1, n2, container, anchor, parentComponent, parentSuspense, isSVG, slotScopeIds, optimized);
                }
                else if (shapeFlag & 64 /* TELEPORT */) {
                    type.process(n1, n2, container, anchor, parentComponent, parentSuspense, isSVG, slotScopeIds, optimized, internals);
                }
                else if (shapeFlag & 128 /* SUSPENSE */) {
                    type.process(n1, n2, container, anchor, parentComponent, parentSuspense, isSVG, slotScopeIds, optimized, internals);
                }
                else if ((false)) {}
        }
        // set ref
        if (ref != null && parentComponent) {
            setRef(ref, n1 && n1.ref, parentSuspense, n2 || n1, !n2);
        }
    };
    const processText = (n1, n2, container, anchor) => {
        if (n1 == null) {
            hostInsert((n2.el = hostCreateText(n2.children)), container, anchor);
        }
        else {
            const el = (n2.el = n1.el);
            if (n2.children !== n1.children) {
                hostSetText(el, n2.children);
            }
        }
    };
    const processCommentNode = (n1, n2, container, anchor) => {
        if (n1 == null) {
            hostInsert((n2.el = hostCreateComment(n2.children || '')), container, anchor);
        }
        else {
            // there's no support for dynamic comments
            n2.el = n1.el;
        }
    };
    const mountStaticNode = (n2, container, anchor, isSVG) => {
        [n2.el, n2.anchor] = hostInsertStaticContent(n2.children, container, anchor, isSVG, n2.el, n2.anchor);
    };
    /**
     * Dev / HMR only
     */
    const patchStaticNode = (n1, n2, container, isSVG) => {
        // static nodes are only patched during dev for HMR
        if (n2.children !== n1.children) {
            const anchor = hostNextSibling(n1.anchor);
            // remove existing
            removeStaticNode(n1);
            [n2.el, n2.anchor] = hostInsertStaticContent(n2.children, container, anchor, isSVG);
        }
        else {
            n2.el = n1.el;
            n2.anchor = n1.anchor;
        }
    };
    const moveStaticNode = ({ el, anchor }, container, nextSibling) => {
        let next;
        while (el && el !== anchor) {
            next = hostNextSibling(el);
            hostInsert(el, container, nextSibling);
            el = next;
        }
        hostInsert(anchor, container, nextSibling);
    };
    const removeStaticNode = ({ el, anchor }) => {
        let next;
        while (el && el !== anchor) {
            next = hostNextSibling(el);
            hostRemove(el);
            el = next;
        }
        hostRemove(anchor);
    };
    const processElement = (n1, n2, container, anchor, parentComponent, parentSuspense, isSVG, slotScopeIds, optimized) => {
        isSVG = isSVG || n2.type === 'svg';
        if (n1 == null) {
            mountElement(n2, container, anchor, parentComponent, parentSuspense, isSVG, slotScopeIds, optimized);
        }
        else {
            patchElement(n1, n2, parentComponent, parentSuspense, isSVG, slotScopeIds, optimized);
        }
    };
    const mountElement = (vnode, container, anchor, parentComponent, parentSuspense, isSVG, slotScopeIds, optimized) => {
        let el;
        let vnodeHook;
        const { type, props, shapeFlag, transition, patchFlag, dirs } = vnode;
        if ( true &&
            vnode.el &&
            hostCloneNode !== undefined &&
            patchFlag === -1 /* HOISTED */) {
            // If a vnode has non-null el, it means it's being reused.
            // Only static vnodes can be reused, so its mounted DOM nodes should be
            // exactly the same, and we can simply do a clone here.
            // only do this in production since cloned trees cannot be HMR updated.
            el = vnode.el = hostCloneNode(vnode.el);
        }
        else {
            el = vnode.el = hostCreateElement(vnode.type, isSVG, props && props.is, props);
            // mount children first, since some props may rely on child content
            // being already rendered, e.g. `<select value>`
            if (shapeFlag & 8 /* TEXT_CHILDREN */) {
                hostSetElementText(el, vnode.children);
            }
            else if (shapeFlag & 16 /* ARRAY_CHILDREN */) {
                mountChildren(vnode.children, el, null, parentComponent, parentSuspense, isSVG && type !== 'foreignObject', slotScopeIds, optimized);
            }
            if (dirs) {
                invokeDirectiveHook(vnode, null, parentComponent, 'created');
            }
            // props
            if (props) {
                for (const key in props) {
                    if (key !== 'value' && !(0,_vue_shared__WEBPACK_IMPORTED_MODULE_1__/* .isReservedProp */ .Gg)(key)) {
                        hostPatchProp(el, key, null, props[key], isSVG, vnode.children, parentComponent, parentSuspense, unmountChildren);
                    }
                }
                /**
                 * Special case for setting value on DOM elements:
                 * - it can be order-sensitive (e.g. should be set *after* min/max, #2325, #4024)
                 * - it needs to be forced (#1471)
                 * #2353 proposes adding another renderer option to configure this, but
                 * the properties affects are so finite it is worth special casing it
                 * here to reduce the complexity. (Special casing it also should not
                 * affect non-DOM renderers)
                 */
                if ('value' in props) {
                    hostPatchProp(el, 'value', null, props.value);
                }
                if ((vnodeHook = props.onVnodeBeforeMount)) {
                    invokeVNodeHook(vnodeHook, parentComponent, vnode);
                }
            }
            // scopeId
            setScopeId(el, vnode, vnode.scopeId, slotScopeIds, parentComponent);
        }
        if (( false) || __VUE_PROD_DEVTOOLS__) {
            Object.defineProperty(el, '__vnode', {
                value: vnode,
                enumerable: false
            });
            Object.defineProperty(el, '__vueParentComponent', {
                value: parentComponent,
                enumerable: false
            });
        }
        if (dirs) {
            invokeDirectiveHook(vnode, null, parentComponent, 'beforeMount');
        }
        // #1583 For inside suspense + suspense not resolved case, enter hook should call when suspense resolved
        // #1689 For inside suspense + suspense resolved case, just call it
        const needCallTransitionHooks = (!parentSuspense || (parentSuspense && !parentSuspense.pendingBranch)) &&
            transition &&
            !transition.persisted;
        if (needCallTransitionHooks) {
            transition.beforeEnter(el);
        }
        hostInsert(el, container, anchor);
        if ((vnodeHook = props && props.onVnodeMounted) ||
            needCallTransitionHooks ||
            dirs) {
            queuePostRenderEffect(() => {
                vnodeHook && invokeVNodeHook(vnodeHook, parentComponent, vnode);
                needCallTransitionHooks && transition.enter(el);
                dirs && invokeDirectiveHook(vnode, null, parentComponent, 'mounted');
            }, parentSuspense);
        }
    };
    const setScopeId = (el, vnode, scopeId, slotScopeIds, parentComponent) => {
        if (scopeId) {
            hostSetScopeId(el, scopeId);
        }
        if (slotScopeIds) {
            for (let i = 0; i < slotScopeIds.length; i++) {
                hostSetScopeId(el, slotScopeIds[i]);
            }
        }
        if (parentComponent) {
            let subTree = parentComponent.subTree;
            if (false /* DEV_ROOT_FRAGMENT */) {}
            if (vnode === subTree) {
                const parentVNode = parentComponent.vnode;
                setScopeId(el, parentVNode, parentVNode.scopeId, parentVNode.slotScopeIds, parentComponent.parent);
            }
        }
    };
    const mountChildren = (children, container, anchor, parentComponent, parentSuspense, isSVG, slotScopeIds, optimized, start = 0) => {
        for (let i = start; i < children.length; i++) {
            const child = (children[i] = optimized
                ? cloneIfMounted(children[i])
                : normalizeVNode(children[i]));
            patch(null, child, container, anchor, parentComponent, parentSuspense, isSVG, slotScopeIds, optimized);
        }
    };
    const patchElement = (n1, n2, parentComponent, parentSuspense, isSVG, slotScopeIds, optimized) => {
        const el = (n2.el = n1.el);
        let { patchFlag, dynamicChildren, dirs } = n2;
        // #1426 take the old vnode's patch flag into account since user may clone a
        // compiler-generated vnode, which de-opts to FULL_PROPS
        patchFlag |= n1.patchFlag & 16 /* FULL_PROPS */;
        const oldProps = n1.props || _vue_shared__WEBPACK_IMPORTED_MODULE_1__/* .EMPTY_OBJ */ .kT;
        const newProps = n2.props || _vue_shared__WEBPACK_IMPORTED_MODULE_1__/* .EMPTY_OBJ */ .kT;
        let vnodeHook;
        // disable recurse in beforeUpdate hooks
        parentComponent && toggleRecurse(parentComponent, false);
        if ((vnodeHook = newProps.onVnodeBeforeUpdate)) {
            invokeVNodeHook(vnodeHook, parentComponent, n2, n1);
        }
        if (dirs) {
            invokeDirectiveHook(n2, n1, parentComponent, 'beforeUpdate');
        }
        parentComponent && toggleRecurse(parentComponent, true);
        if (false) {}
        const areChildrenSVG = isSVG && n2.type !== 'foreignObject';
        if (dynamicChildren) {
            patchBlockChildren(n1.dynamicChildren, dynamicChildren, el, parentComponent, parentSuspense, areChildrenSVG, slotScopeIds);
            if (false) {}
        }
        else if (!optimized) {
            // full diff
            patchChildren(n1, n2, el, null, parentComponent, parentSuspense, areChildrenSVG, slotScopeIds, false);
        }
        if (patchFlag > 0) {
            // the presence of a patchFlag means this element's render code was
            // generated by the compiler and can take the fast path.
            // in this path old node and new node are guaranteed to have the same shape
            // (i.e. at the exact same position in the source template)
            if (patchFlag & 16 /* FULL_PROPS */) {
                // element props contain dynamic keys, full diff needed
                patchProps(el, n2, oldProps, newProps, parentComponent, parentSuspense, isSVG);
            }
            else {
                // class
                // this flag is matched when the element has dynamic class bindings.
                if (patchFlag & 2 /* CLASS */) {
                    if (oldProps.class !== newProps.class) {
                        hostPatchProp(el, 'class', null, newProps.class, isSVG);
                    }
                }
                // style
                // this flag is matched when the element has dynamic style bindings
                if (patchFlag & 4 /* STYLE */) {
                    hostPatchProp(el, 'style', oldProps.style, newProps.style, isSVG);
                }
                // props
                // This flag is matched when the element has dynamic prop/attr bindings
                // other than class and style. The keys of dynamic prop/attrs are saved for
                // faster iteration.
                // Note dynamic keys like :[foo]="bar" will cause this optimization to
                // bail out and go through a full diff because we need to unset the old key
                if (patchFlag & 8 /* PROPS */) {
                    // if the flag is present then dynamicProps must be non-null
                    const propsToUpdate = n2.dynamicProps;
                    for (let i = 0; i < propsToUpdate.length; i++) {
                        const key = propsToUpdate[i];
                        const prev = oldProps[key];
                        const next = newProps[key];
                        // #1471 force patch value
                        if (next !== prev || key === 'value') {
                            hostPatchProp(el, key, prev, next, isSVG, n1.children, parentComponent, parentSuspense, unmountChildren);
                        }
                    }
                }
            }
            // text
            // This flag is matched when the element has only dynamic text children.
            if (patchFlag & 1 /* TEXT */) {
                if (n1.children !== n2.children) {
                    hostSetElementText(el, n2.children);
                }
            }
        }
        else if (!optimized && dynamicChildren == null) {
            // unoptimized, full diff
            patchProps(el, n2, oldProps, newProps, parentComponent, parentSuspense, isSVG);
        }
        if ((vnodeHook = newProps.onVnodeUpdated) || dirs) {
            queuePostRenderEffect(() => {
                vnodeHook && invokeVNodeHook(vnodeHook, parentComponent, n2, n1);
                dirs && invokeDirectiveHook(n2, n1, parentComponent, 'updated');
            }, parentSuspense);
        }
    };
    // The fast path for blocks.
    const patchBlockChildren = (oldChildren, newChildren, fallbackContainer, parentComponent, parentSuspense, isSVG, slotScopeIds) => {
        for (let i = 0; i < newChildren.length; i++) {
            const oldVNode = oldChildren[i];
            const newVNode = newChildren[i];
            // Determine the container (parent element) for the patch.
            const container = 
            // oldVNode may be an errored async setup() component inside Suspense
            // which will not have a mounted element
            oldVNode.el &&
                // - In the case of a Fragment, we need to provide the actual parent
                // of the Fragment itself so it can move its children.
                (oldVNode.type === Fragment ||
                    // - In the case of different nodes, there is going to be a replacement
                    // which also requires the correct parent container
                    !isSameVNodeType(oldVNode, newVNode) ||
                    // - In the case of a component, it could contain anything.
                    oldVNode.shapeFlag & (6 /* COMPONENT */ | 64 /* TELEPORT */))
                ? hostParentNode(oldVNode.el)
                : // In other cases, the parent container is not actually used so we
                    // just pass the block element here to avoid a DOM parentNode call.
                    fallbackContainer;
            patch(oldVNode, newVNode, container, null, parentComponent, parentSuspense, isSVG, slotScopeIds, true);
        }
    };
    const patchProps = (el, vnode, oldProps, newProps, parentComponent, parentSuspense, isSVG) => {
        if (oldProps !== newProps) {
            for (const key in newProps) {
                // empty string is not valid prop
                if ((0,_vue_shared__WEBPACK_IMPORTED_MODULE_1__/* .isReservedProp */ .Gg)(key))
                    continue;
                const next = newProps[key];
                const prev = oldProps[key];
                // defer patching value
                if (next !== prev && key !== 'value') {
                    hostPatchProp(el, key, prev, next, isSVG, vnode.children, parentComponent, parentSuspense, unmountChildren);
                }
            }
            if (oldProps !== _vue_shared__WEBPACK_IMPORTED_MODULE_1__/* .EMPTY_OBJ */ .kT) {
                for (const key in oldProps) {
                    if (!(0,_vue_shared__WEBPACK_IMPORTED_MODULE_1__/* .isReservedProp */ .Gg)(key) && !(key in newProps)) {
                        hostPatchProp(el, key, oldProps[key], null, isSVG, vnode.children, parentComponent, parentSuspense, unmountChildren);
                    }
                }
            }
            if ('value' in newProps) {
                hostPatchProp(el, 'value', oldProps.value, newProps.value);
            }
        }
    };
    const processFragment = (n1, n2, container, anchor, parentComponent, parentSuspense, isSVG, slotScopeIds, optimized) => {
        const fragmentStartAnchor = (n2.el = n1 ? n1.el : hostCreateText(''));
        const fragmentEndAnchor = (n2.anchor = n1 ? n1.anchor : hostCreateText(''));
        let { patchFlag, dynamicChildren, slotScopeIds: fragmentSlotScopeIds } = n2;
        if (false) {}
        // check if this is a slot fragment with :slotted scope ids
        if (fragmentSlotScopeIds) {
            slotScopeIds = slotScopeIds
                ? slotScopeIds.concat(fragmentSlotScopeIds)
                : fragmentSlotScopeIds;
        }
        if (n1 == null) {
            hostInsert(fragmentStartAnchor, container, anchor);
            hostInsert(fragmentEndAnchor, container, anchor);
            // a fragment can only have array children
            // since they are either generated by the compiler, or implicitly created
            // from arrays.
            mountChildren(n2.children, container, fragmentEndAnchor, parentComponent, parentSuspense, isSVG, slotScopeIds, optimized);
        }
        else {
            if (patchFlag > 0 &&
                patchFlag & 64 /* STABLE_FRAGMENT */ &&
                dynamicChildren &&
                // #2715 the previous fragment could've been a BAILed one as a result
                // of renderSlot() with no valid children
                n1.dynamicChildren) {
                // a stable fragment (template root or <template v-for>) doesn't need to
                // patch children order, but it may contain dynamicChildren.
                patchBlockChildren(n1.dynamicChildren, dynamicChildren, container, parentComponent, parentSuspense, isSVG, slotScopeIds);
                if (false) {}
                else if (
                // #2080 if the stable fragment has a key, it's a <template v-for> that may
                //  get moved around. Make sure all root level vnodes inherit el.
                // #2134 or if it's a component root, it may also get moved around
                // as the component is being moved.
                n2.key != null ||
                    (parentComponent && n2 === parentComponent.subTree)) {
                    traverseStaticChildren(n1, n2, true /* shallow */);
                }
            }
            else {
                // keyed / unkeyed, or manual fragments.
                // for keyed & unkeyed, since they are compiler generated from v-for,
                // each child is guaranteed to be a block so the fragment will never
                // have dynamicChildren.
                patchChildren(n1, n2, container, fragmentEndAnchor, parentComponent, parentSuspense, isSVG, slotScopeIds, optimized);
            }
        }
    };
    const processComponent = (n1, n2, container, anchor, parentComponent, parentSuspense, isSVG, slotScopeIds, optimized) => {
        n2.slotScopeIds = slotScopeIds;
        if (n1 == null) {
            if (n2.shapeFlag & 512 /* COMPONENT_KEPT_ALIVE */) {
                parentComponent.ctx.activate(n2, container, anchor, isSVG, optimized);
            }
            else {
                mountComponent(n2, container, anchor, parentComponent, parentSuspense, isSVG, optimized);
            }
        }
        else {
            updateComponent(n1, n2, optimized);
        }
    };
    const mountComponent = (initialVNode, container, anchor, parentComponent, parentSuspense, isSVG, optimized) => {
        const instance = (initialVNode.component = createComponentInstance(initialVNode, parentComponent, parentSuspense));
        if (false) {}
        if ((false)) {}
        // inject renderer internals for keepAlive
        if (isKeepAlive(initialVNode)) {
            instance.ctx.renderer = internals;
        }
        // resolve props and slots for setup context
        {
            if ((false)) {}
            setupComponent(instance);
            if ((false)) {}
        }
        // setup() is async. This component relies on async logic to be resolved
        // before proceeding
        if (instance.asyncDep) {
            parentSuspense && parentSuspense.registerDep(instance, setupRenderEffect);
            // Give it a placeholder if this is not hydration
            // TODO handle self-defined fallback
            if (!initialVNode.el) {
                const placeholder = (instance.subTree = createVNode(Comment));
                processCommentNode(null, placeholder, container, anchor);
            }
            return;
        }
        setupRenderEffect(instance, initialVNode, container, anchor, parentSuspense, isSVG, optimized);
        if ((false)) {}
    };
    const updateComponent = (n1, n2, optimized) => {
        const instance = (n2.component = n1.component);
        if (shouldUpdateComponent(n1, n2, optimized)) {
            if (instance.asyncDep &&
                !instance.asyncResolved) {
                // async & still pending - just update props and slots
                // since the component's reactive effect for render isn't set-up yet
                if ((false)) {}
                updateComponentPreRender(instance, n2, optimized);
                if ((false)) {}
                return;
            }
            else {
                // normal update
                instance.next = n2;
                // in case the child component is also queued, remove it to avoid
                // double updating the same child component in the same flush.
                invalidateJob(instance.update);
                // instance.update is the reactive effect.
                instance.update();
            }
        }
        else {
            // no update needed. just copy over properties
            n2.el = n1.el;
            instance.vnode = n2;
        }
    };
    const setupRenderEffect = (instance, initialVNode, container, anchor, parentSuspense, isSVG, optimized) => {
        const componentUpdateFn = () => {
            if (!instance.isMounted) {
                let vnodeHook;
                const { el, props } = initialVNode;
                const { bm, m, parent } = instance;
                const isAsyncWrapperVNode = isAsyncWrapper(initialVNode);
                toggleRecurse(instance, false);
                // beforeMount hook
                if (bm) {
                    (0,_vue_shared__WEBPACK_IMPORTED_MODULE_1__/* .invokeArrayFns */ .ir)(bm);
                }
                // onVnodeBeforeMount
                if (!isAsyncWrapperVNode &&
                    (vnodeHook = props && props.onVnodeBeforeMount)) {
                    invokeVNodeHook(vnodeHook, parent, initialVNode);
                }
                toggleRecurse(instance, true);
                if (el && hydrateNode) {
                    // vnode has adopted host node - perform hydration instead of mount.
                    const hydrateSubTree = () => {
                        if ((false)) {}
                        instance.subTree = renderComponentRoot(instance);
                        if ((false)) {}
                        if ((false)) {}
                        hydrateNode(el, instance.subTree, instance, parentSuspense, null);
                        if ((false)) {}
                    };
                    if (isAsyncWrapperVNode) {
                        initialVNode.type.__asyncLoader().then(
                        // note: we are moving the render call into an async callback,
                        // which means it won't track dependencies - but it's ok because
                        // a server-rendered async wrapper is already in resolved state
                        // and it will never need to change.
                        () => !instance.isUnmounted && hydrateSubTree());
                    }
                    else {
                        hydrateSubTree();
                    }
                }
                else {
                    if ((false)) {}
                    const subTree = (instance.subTree = renderComponentRoot(instance));
                    if ((false)) {}
                    if ((false)) {}
                    patch(null, subTree, container, anchor, instance, parentSuspense, isSVG);
                    if ((false)) {}
                    initialVNode.el = subTree.el;
                }
                // mounted hook
                if (m) {
                    queuePostRenderEffect(m, parentSuspense);
                }
                // onVnodeMounted
                if (!isAsyncWrapperVNode &&
                    (vnodeHook = props && props.onVnodeMounted)) {
                    const scopedInitialVNode = initialVNode;
                    queuePostRenderEffect(() => invokeVNodeHook(vnodeHook, parent, scopedInitialVNode), parentSuspense);
                }
                // activated hook for keep-alive roots.
                // #1742 activated hook must be accessed after first render
                // since the hook may be injected by a child keep-alive
                if (initialVNode.shapeFlag & 256 /* COMPONENT_SHOULD_KEEP_ALIVE */ ||
                    (parent &&
                        isAsyncWrapper(parent.vnode) &&
                        parent.vnode.shapeFlag & 256 /* COMPONENT_SHOULD_KEEP_ALIVE */)) {
                    instance.a && queuePostRenderEffect(instance.a, parentSuspense);
                }
                instance.isMounted = true;
                if (( false) || __VUE_PROD_DEVTOOLS__) {
                    devtoolsComponentAdded(instance);
                }
                // #2458: deference mount-only object parameters to prevent memleaks
                initialVNode = container = anchor = null;
            }
            else {
                // updateComponent
                // This is triggered by mutation of component's own state (next: null)
                // OR parent calling processComponent (next: VNode)
                let { next, bu, u, parent, vnode } = instance;
                let originNext = next;
                let vnodeHook;
                if ((false)) {}
                // Disallow component effect recursion during pre-lifecycle hooks.
                toggleRecurse(instance, false);
                if (next) {
                    next.el = vnode.el;
                    updateComponentPreRender(instance, next, optimized);
                }
                else {
                    next = vnode;
                }
                // beforeUpdate hook
                if (bu) {
                    (0,_vue_shared__WEBPACK_IMPORTED_MODULE_1__/* .invokeArrayFns */ .ir)(bu);
                }
                // onVnodeBeforeUpdate
                if ((vnodeHook = next.props && next.props.onVnodeBeforeUpdate)) {
                    invokeVNodeHook(vnodeHook, parent, next, vnode);
                }
                toggleRecurse(instance, true);
                // render
                if ((false)) {}
                const nextTree = renderComponentRoot(instance);
                if ((false)) {}
                const prevTree = instance.subTree;
                instance.subTree = nextTree;
                if ((false)) {}
                patch(prevTree, nextTree, 
                // parent may have changed if it's in a teleport
                hostParentNode(prevTree.el), 
                // anchor may have changed if it's in a fragment
                getNextHostNode(prevTree), instance, parentSuspense, isSVG);
                if ((false)) {}
                next.el = nextTree.el;
                if (originNext === null) {
                    // self-triggered update. In case of HOC, update parent component
                    // vnode el. HOC is indicated by parent instance's subTree pointing
                    // to child component's vnode
                    updateHOCHostEl(instance, nextTree.el);
                }
                // updated hook
                if (u) {
                    queuePostRenderEffect(u, parentSuspense);
                }
                // onVnodeUpdated
                if ((vnodeHook = next.props && next.props.onVnodeUpdated)) {
                    queuePostRenderEffect(() => invokeVNodeHook(vnodeHook, parent, next, vnode), parentSuspense);
                }
                if (( false) || __VUE_PROD_DEVTOOLS__) {
                    devtoolsComponentUpdated(instance);
                }
                if ((false)) {}
            }
        };
        // create reactive effect for rendering
        const effect = (instance.effect = new _vue_reactivity__WEBPACK_IMPORTED_MODULE_0__/* .ReactiveEffect */ .qq(componentUpdateFn, () => queueJob(update), instance.scope // track it in component's effect scope
        ));
        const update = (instance.update = () => effect.run());
        update.id = instance.uid;
        // allowRecurse
        // #1801, #2043 component render effects should allow recursive updates
        toggleRecurse(instance, true);
        if ((false)) {}
        update();
    };
    const updateComponentPreRender = (instance, nextVNode, optimized) => {
        nextVNode.component = instance;
        const prevProps = instance.vnode.props;
        instance.vnode = nextVNode;
        instance.next = null;
        updateProps(instance, nextVNode.props, prevProps, optimized);
        updateSlots(instance, nextVNode.children, optimized);
        (0,_vue_reactivity__WEBPACK_IMPORTED_MODULE_0__/* .pauseTracking */ .Jd)();
        // props update may have triggered pre-flush watchers.
        // flush them before the render update.
        flushPreFlushCbs(undefined, instance.update);
        (0,_vue_reactivity__WEBPACK_IMPORTED_MODULE_0__/* .resetTracking */ .lk)();
    };
    const patchChildren = (n1, n2, container, anchor, parentComponent, parentSuspense, isSVG, slotScopeIds, optimized = false) => {
        const c1 = n1 && n1.children;
        const prevShapeFlag = n1 ? n1.shapeFlag : 0;
        const c2 = n2.children;
        const { patchFlag, shapeFlag } = n2;
        // fast path
        if (patchFlag > 0) {
            if (patchFlag & 128 /* KEYED_FRAGMENT */) {
                // this could be either fully-keyed or mixed (some keyed some not)
                // presence of patchFlag means children are guaranteed to be arrays
                patchKeyedChildren(c1, c2, container, anchor, parentComponent, parentSuspense, isSVG, slotScopeIds, optimized);
                return;
            }
            else if (patchFlag & 256 /* UNKEYED_FRAGMENT */) {
                // unkeyed
                patchUnkeyedChildren(c1, c2, container, anchor, parentComponent, parentSuspense, isSVG, slotScopeIds, optimized);
                return;
            }
        }
        // children has 3 possibilities: text, array or no children.
        if (shapeFlag & 8 /* TEXT_CHILDREN */) {
            // text children fast path
            if (prevShapeFlag & 16 /* ARRAY_CHILDREN */) {
                unmountChildren(c1, parentComponent, parentSuspense);
            }
            if (c2 !== c1) {
                hostSetElementText(container, c2);
            }
        }
        else {
            if (prevShapeFlag & 16 /* ARRAY_CHILDREN */) {
                // prev children was array
                if (shapeFlag & 16 /* ARRAY_CHILDREN */) {
                    // two arrays, cannot assume anything, do full diff
                    patchKeyedChildren(c1, c2, container, anchor, parentComponent, parentSuspense, isSVG, slotScopeIds, optimized);
                }
                else {
                    // no new children, just unmount old
                    unmountChildren(c1, parentComponent, parentSuspense, true);
                }
            }
            else {
                // prev children was text OR null
                // new children is array OR null
                if (prevShapeFlag & 8 /* TEXT_CHILDREN */) {
                    hostSetElementText(container, '');
                }
                // mount new if array
                if (shapeFlag & 16 /* ARRAY_CHILDREN */) {
                    mountChildren(c2, container, anchor, parentComponent, parentSuspense, isSVG, slotScopeIds, optimized);
                }
            }
        }
    };
    const patchUnkeyedChildren = (c1, c2, container, anchor, parentComponent, parentSuspense, isSVG, slotScopeIds, optimized) => {
        c1 = c1 || _vue_shared__WEBPACK_IMPORTED_MODULE_1__/* .EMPTY_ARR */ .Z6;
        c2 = c2 || _vue_shared__WEBPACK_IMPORTED_MODULE_1__/* .EMPTY_ARR */ .Z6;
        const oldLength = c1.length;
        const newLength = c2.length;
        const commonLength = Math.min(oldLength, newLength);
        let i;
        for (i = 0; i < commonLength; i++) {
            const nextChild = (c2[i] = optimized
                ? cloneIfMounted(c2[i])
                : normalizeVNode(c2[i]));
            patch(c1[i], nextChild, container, null, parentComponent, parentSuspense, isSVG, slotScopeIds, optimized);
        }
        if (oldLength > newLength) {
            // remove old
            unmountChildren(c1, parentComponent, parentSuspense, true, false, commonLength);
        }
        else {
            // mount new
            mountChildren(c2, container, anchor, parentComponent, parentSuspense, isSVG, slotScopeIds, optimized, commonLength);
        }
    };
    // can be all-keyed or mixed
    const patchKeyedChildren = (c1, c2, container, parentAnchor, parentComponent, parentSuspense, isSVG, slotScopeIds, optimized) => {
        let i = 0;
        const l2 = c2.length;
        let e1 = c1.length - 1; // prev ending index
        let e2 = l2 - 1; // next ending index
        // 1. sync from start
        // (a b) c
        // (a b) d e
        while (i <= e1 && i <= e2) {
            const n1 = c1[i];
            const n2 = (c2[i] = optimized
                ? cloneIfMounted(c2[i])
                : normalizeVNode(c2[i]));
            if (isSameVNodeType(n1, n2)) {
                patch(n1, n2, container, null, parentComponent, parentSuspense, isSVG, slotScopeIds, optimized);
            }
            else {
                break;
            }
            i++;
        }
        // 2. sync from end
        // a (b c)
        // d e (b c)
        while (i <= e1 && i <= e2) {
            const n1 = c1[e1];
            const n2 = (c2[e2] = optimized
                ? cloneIfMounted(c2[e2])
                : normalizeVNode(c2[e2]));
            if (isSameVNodeType(n1, n2)) {
                patch(n1, n2, container, null, parentComponent, parentSuspense, isSVG, slotScopeIds, optimized);
            }
            else {
                break;
            }
            e1--;
            e2--;
        }
        // 3. common sequence + mount
        // (a b)
        // (a b) c
        // i = 2, e1 = 1, e2 = 2
        // (a b)
        // c (a b)
        // i = 0, e1 = -1, e2 = 0
        if (i > e1) {
            if (i <= e2) {
                const nextPos = e2 + 1;
                const anchor = nextPos < l2 ? c2[nextPos].el : parentAnchor;
                while (i <= e2) {
                    patch(null, (c2[i] = optimized
                        ? cloneIfMounted(c2[i])
                        : normalizeVNode(c2[i])), container, anchor, parentComponent, parentSuspense, isSVG, slotScopeIds, optimized);
                    i++;
                }
            }
        }
        // 4. common sequence + unmount
        // (a b) c
        // (a b)
        // i = 2, e1 = 2, e2 = 1
        // a (b c)
        // (b c)
        // i = 0, e1 = 0, e2 = -1
        else if (i > e2) {
            while (i <= e1) {
                unmount(c1[i], parentComponent, parentSuspense, true);
                i++;
            }
        }
        // 5. unknown sequence
        // [i ... e1 + 1]: a b [c d e] f g
        // [i ... e2 + 1]: a b [e d c h] f g
        // i = 2, e1 = 4, e2 = 5
        else {
            const s1 = i; // prev starting index
            const s2 = i; // next starting index
            // 5.1 build key:index map for newChildren
            const keyToNewIndexMap = new Map();
            for (i = s2; i <= e2; i++) {
                const nextChild = (c2[i] = optimized
                    ? cloneIfMounted(c2[i])
                    : normalizeVNode(c2[i]));
                if (nextChild.key != null) {
                    if (false) {}
                    keyToNewIndexMap.set(nextChild.key, i);
                }
            }
            // 5.2 loop through old children left to be patched and try to patch
            // matching nodes & remove nodes that are no longer present
            let j;
            let patched = 0;
            const toBePatched = e2 - s2 + 1;
            let moved = false;
            // used to track whether any node has moved
            let maxNewIndexSoFar = 0;
            // works as Map<newIndex, oldIndex>
            // Note that oldIndex is offset by +1
            // and oldIndex = 0 is a special value indicating the new node has
            // no corresponding old node.
            // used for determining longest stable subsequence
            const newIndexToOldIndexMap = new Array(toBePatched);
            for (i = 0; i < toBePatched; i++)
                newIndexToOldIndexMap[i] = 0;
            for (i = s1; i <= e1; i++) {
                const prevChild = c1[i];
                if (patched >= toBePatched) {
                    // all new children have been patched so this can only be a removal
                    unmount(prevChild, parentComponent, parentSuspense, true);
                    continue;
                }
                let newIndex;
                if (prevChild.key != null) {
                    newIndex = keyToNewIndexMap.get(prevChild.key);
                }
                else {
                    // key-less node, try to locate a key-less node of the same type
                    for (j = s2; j <= e2; j++) {
                        if (newIndexToOldIndexMap[j - s2] === 0 &&
                            isSameVNodeType(prevChild, c2[j])) {
                            newIndex = j;
                            break;
                        }
                    }
                }
                if (newIndex === undefined) {
                    unmount(prevChild, parentComponent, parentSuspense, true);
                }
                else {
                    newIndexToOldIndexMap[newIndex - s2] = i + 1;
                    if (newIndex >= maxNewIndexSoFar) {
                        maxNewIndexSoFar = newIndex;
                    }
                    else {
                        moved = true;
                    }
                    patch(prevChild, c2[newIndex], container, null, parentComponent, parentSuspense, isSVG, slotScopeIds, optimized);
                    patched++;
                }
            }
            // 5.3 move and mount
            // generate longest stable subsequence only when nodes have moved
            const increasingNewIndexSequence = moved
                ? getSequence(newIndexToOldIndexMap)
                : _vue_shared__WEBPACK_IMPORTED_MODULE_1__/* .EMPTY_ARR */ .Z6;
            j = increasingNewIndexSequence.length - 1;
            // looping backwards so that we can use last patched node as anchor
            for (i = toBePatched - 1; i >= 0; i--) {
                const nextIndex = s2 + i;
                const nextChild = c2[nextIndex];
                const anchor = nextIndex + 1 < l2 ? c2[nextIndex + 1].el : parentAnchor;
                if (newIndexToOldIndexMap[i] === 0) {
                    // mount new
                    patch(null, nextChild, container, anchor, parentComponent, parentSuspense, isSVG, slotScopeIds, optimized);
                }
                else if (moved) {
                    // move if:
                    // There is no stable subsequence (e.g. a reverse)
                    // OR current node is not among the stable sequence
                    if (j < 0 || i !== increasingNewIndexSequence[j]) {
                        move(nextChild, container, anchor, 2 /* REORDER */);
                    }
                    else {
                        j--;
                    }
                }
            }
        }
    };
    const move = (vnode, container, anchor, moveType, parentSuspense = null) => {
        const { el, type, transition, children, shapeFlag } = vnode;
        if (shapeFlag & 6 /* COMPONENT */) {
            move(vnode.component.subTree, container, anchor, moveType);
            return;
        }
        if (shapeFlag & 128 /* SUSPENSE */) {
            vnode.suspense.move(container, anchor, moveType);
            return;
        }
        if (shapeFlag & 64 /* TELEPORT */) {
            type.move(vnode, container, anchor, internals);
            return;
        }
        if (type === Fragment) {
            hostInsert(el, container, anchor);
            for (let i = 0; i < children.length; i++) {
                move(children[i], container, anchor, moveType);
            }
            hostInsert(vnode.anchor, container, anchor);
            return;
        }
        if (type === Static) {
            moveStaticNode(vnode, container, anchor);
            return;
        }
        // single nodes
        const needTransition = moveType !== 2 /* REORDER */ &&
            shapeFlag & 1 /* ELEMENT */ &&
            transition;
        if (needTransition) {
            if (moveType === 0 /* ENTER */) {
                transition.beforeEnter(el);
                hostInsert(el, container, anchor);
                queuePostRenderEffect(() => transition.enter(el), parentSuspense);
            }
            else {
                const { leave, delayLeave, afterLeave } = transition;
                const remove = () => hostInsert(el, container, anchor);
                const performLeave = () => {
                    leave(el, () => {
                        remove();
                        afterLeave && afterLeave();
                    });
                };
                if (delayLeave) {
                    delayLeave(el, remove, performLeave);
                }
                else {
                    performLeave();
                }
            }
        }
        else {
            hostInsert(el, container, anchor);
        }
    };
    const unmount = (vnode, parentComponent, parentSuspense, doRemove = false, optimized = false) => {
        const { type, props, ref, children, dynamicChildren, shapeFlag, patchFlag, dirs } = vnode;
        // unset ref
        if (ref != null) {
            setRef(ref, null, parentSuspense, vnode, true);
        }
        if (shapeFlag & 256 /* COMPONENT_SHOULD_KEEP_ALIVE */) {
            parentComponent.ctx.deactivate(vnode);
            return;
        }
        const shouldInvokeDirs = shapeFlag & 1 /* ELEMENT */ && dirs;
        const shouldInvokeVnodeHook = !isAsyncWrapper(vnode);
        let vnodeHook;
        if (shouldInvokeVnodeHook &&
            (vnodeHook = props && props.onVnodeBeforeUnmount)) {
            invokeVNodeHook(vnodeHook, parentComponent, vnode);
        }
        if (shapeFlag & 6 /* COMPONENT */) {
            unmountComponent(vnode.component, parentSuspense, doRemove);
        }
        else {
            if (shapeFlag & 128 /* SUSPENSE */) {
                vnode.suspense.unmount(parentSuspense, doRemove);
                return;
            }
            if (shouldInvokeDirs) {
                invokeDirectiveHook(vnode, null, parentComponent, 'beforeUnmount');
            }
            if (shapeFlag & 64 /* TELEPORT */) {
                vnode.type.remove(vnode, parentComponent, parentSuspense, optimized, internals, doRemove);
            }
            else if (dynamicChildren &&
                // #1153: fast path should not be taken for non-stable (v-for) fragments
                (type !== Fragment ||
                    (patchFlag > 0 && patchFlag & 64 /* STABLE_FRAGMENT */))) {
                // fast path for block nodes: only need to unmount dynamic children.
                unmountChildren(dynamicChildren, parentComponent, parentSuspense, false, true);
            }
            else if ((type === Fragment &&
                patchFlag &
                    (128 /* KEYED_FRAGMENT */ | 256 /* UNKEYED_FRAGMENT */)) ||
                (!optimized && shapeFlag & 16 /* ARRAY_CHILDREN */)) {
                unmountChildren(children, parentComponent, parentSuspense);
            }
            if (doRemove) {
                remove(vnode);
            }
        }
        if ((shouldInvokeVnodeHook &&
            (vnodeHook = props && props.onVnodeUnmounted)) ||
            shouldInvokeDirs) {
            queuePostRenderEffect(() => {
                vnodeHook && invokeVNodeHook(vnodeHook, parentComponent, vnode);
                shouldInvokeDirs &&
                    invokeDirectiveHook(vnode, null, parentComponent, 'unmounted');
            }, parentSuspense);
        }
    };
    const remove = vnode => {
        const { type, el, anchor, transition } = vnode;
        if (type === Fragment) {
            if (false) {}
            else {
                removeFragment(el, anchor);
            }
            return;
        }
        if (type === Static) {
            removeStaticNode(vnode);
            return;
        }
        const performRemove = () => {
            hostRemove(el);
            if (transition && !transition.persisted && transition.afterLeave) {
                transition.afterLeave();
            }
        };
        if (vnode.shapeFlag & 1 /* ELEMENT */ &&
            transition &&
            !transition.persisted) {
            const { leave, delayLeave } = transition;
            const performLeave = () => leave(el, performRemove);
            if (delayLeave) {
                delayLeave(vnode.el, performRemove, performLeave);
            }
            else {
                performLeave();
            }
        }
        else {
            performRemove();
        }
    };
    const removeFragment = (cur, end) => {
        // For fragments, directly remove all contained DOM nodes.
        // (fragment child nodes cannot have transition)
        let next;
        while (cur !== end) {
            next = hostNextSibling(cur);
            hostRemove(cur);
            cur = next;
        }
        hostRemove(end);
    };
    const unmountComponent = (instance, parentSuspense, doRemove) => {
        if (false) {}
        const { bum, scope, update, subTree, um } = instance;
        // beforeUnmount hook
        if (bum) {
            (0,_vue_shared__WEBPACK_IMPORTED_MODULE_1__/* .invokeArrayFns */ .ir)(bum);
        }
        // stop effects in component scope
        scope.stop();
        // update may be null if a component is unmounted before its async
        // setup has resolved.
        if (update) {
            // so that scheduler will no longer invoke it
            update.active = false;
            unmount(subTree, instance, parentSuspense, doRemove);
        }
        // unmounted hook
        if (um) {
            queuePostRenderEffect(um, parentSuspense);
        }
        queuePostRenderEffect(() => {
            instance.isUnmounted = true;
        }, parentSuspense);
        // A component with async dep inside a pending suspense is unmounted before
        // its async dep resolves. This should remove the dep from the suspense, and
        // cause the suspense to resolve immediately if that was the last dep.
        if (parentSuspense &&
            parentSuspense.pendingBranch &&
            !parentSuspense.isUnmounted &&
            instance.asyncDep &&
            !instance.asyncResolved &&
            instance.suspenseId === parentSuspense.pendingId) {
            parentSuspense.deps--;
            if (parentSuspense.deps === 0) {
                parentSuspense.resolve();
            }
        }
        if (( false) || __VUE_PROD_DEVTOOLS__) {
            devtoolsComponentRemoved(instance);
        }
    };
    const unmountChildren = (children, parentComponent, parentSuspense, doRemove = false, optimized = false, start = 0) => {
        for (let i = start; i < children.length; i++) {
            unmount(children[i], parentComponent, parentSuspense, doRemove, optimized);
        }
    };
    const getNextHostNode = vnode => {
        if (vnode.shapeFlag & 6 /* COMPONENT */) {
            return getNextHostNode(vnode.component.subTree);
        }
        if (vnode.shapeFlag & 128 /* SUSPENSE */) {
            return vnode.suspense.next();
        }
        return hostNextSibling((vnode.anchor || vnode.el));
    };
    const render = (vnode, container, isSVG) => {
        if (vnode == null) {
            if (container._vnode) {
                unmount(container._vnode, null, null, true);
            }
        }
        else {
            patch(container._vnode || null, vnode, container, null, null, null, isSVG);
        }
        flushPostFlushCbs();
        container._vnode = vnode;
    };
    const internals = {
        p: patch,
        um: unmount,
        m: move,
        r: remove,
        mt: mountComponent,
        mc: mountChildren,
        pc: patchChildren,
        pbc: patchBlockChildren,
        n: getNextHostNode,
        o: options
    };
    let hydrate;
    let hydrateNode;
    if (createHydrationFns) {
        [hydrate, hydrateNode] = createHydrationFns(internals);
    }
    return {
        render,
        hydrate,
        createApp: createAppAPI(render, hydrate)
    };
}
function toggleRecurse({ effect, update }, allowed) {
    effect.allowRecurse = update.allowRecurse = allowed;
}
/**
 * #1156
 * When a component is HMR-enabled, we need to make sure that all static nodes
 * inside a block also inherit the DOM element from the previous tree so that
 * HMR updates (which are full updates) can retrieve the element for patching.
 *
 * #2080
 * Inside keyed `template` fragment static children, if a fragment is moved,
 * the children will always be moved. Therefore, in order to ensure correct move
 * position, el should be inherited from previous nodes.
 */
function traverseStaticChildren(n1, n2, shallow = false) {
    const ch1 = n1.children;
    const ch2 = n2.children;
    if ((0,_vue_shared__WEBPACK_IMPORTED_MODULE_1__/* .isArray */ .kJ)(ch1) && (0,_vue_shared__WEBPACK_IMPORTED_MODULE_1__/* .isArray */ .kJ)(ch2)) {
        for (let i = 0; i < ch1.length; i++) {
            // this is only called in the optimized path so array children are
            // guaranteed to be vnodes
            const c1 = ch1[i];
            let c2 = ch2[i];
            if (c2.shapeFlag & 1 /* ELEMENT */ && !c2.dynamicChildren) {
                if (c2.patchFlag <= 0 || c2.patchFlag === 32 /* HYDRATE_EVENTS */) {
                    c2 = ch2[i] = cloneIfMounted(ch2[i]);
                    c2.el = c1.el;
                }
                if (!shallow)
                    traverseStaticChildren(c1, c2);
            }
            // also inherit for comment nodes, but not placeholders (e.g. v-if which
            // would have received .el during block patch)
            if (false) {}
        }
    }
}
// https://en.wikipedia.org/wiki/Longest_increasing_subsequence
function getSequence(arr) {
    const p = arr.slice();
    const result = [0];
    let i, j, u, v, c;
    const len = arr.length;
    for (i = 0; i < len; i++) {
        const arrI = arr[i];
        if (arrI !== 0) {
            j = result[result.length - 1];
            if (arr[j] < arrI) {
                p[i] = j;
                result.push(i);
                continue;
            }
            u = 0;
            v = result.length - 1;
            while (u < v) {
                c = (u + v) >> 1;
                if (arr[result[c]] < arrI) {
                    u = c + 1;
                }
                else {
                    v = c;
                }
            }
            if (arrI < arr[result[u]]) {
                if (u > 0) {
                    p[i] = result[u - 1];
                }
                result[u] = i;
            }
        }
    }
    u = result.length;
    v = result[u - 1];
    while (u-- > 0) {
        result[u] = v;
        v = p[v];
    }
    return result;
}

const isTeleport = (type) => type.__isTeleport;
const isTeleportDisabled = (props) => props && (props.disabled || props.disabled === '');
const isTargetSVG = (target) => typeof SVGElement !== 'undefined' && target instanceof SVGElement;
const resolveTarget = (props, select) => {
    const targetSelector = props && props.to;
    if ((0,_vue_shared__WEBPACK_IMPORTED_MODULE_1__/* .isString */ .HD)(targetSelector)) {
        if (!select) {
            ( false) &&
                0;
            return null;
        }
        else {
            const target = select(targetSelector);
            if (!target) {
                ( false) &&
                    0;
            }
            return target;
        }
    }
    else {
        if (false) {}
        return targetSelector;
    }
};
const TeleportImpl = {
    __isTeleport: true,
    process(n1, n2, container, anchor, parentComponent, parentSuspense, isSVG, slotScopeIds, optimized, internals) {
        const { mc: mountChildren, pc: patchChildren, pbc: patchBlockChildren, o: { insert, querySelector, createText, createComment } } = internals;
        const disabled = isTeleportDisabled(n2.props);
        let { shapeFlag, children, dynamicChildren } = n2;
        // #3302
        // HMR updated, force full diff
        if (false) {}
        if (n1 == null) {
            // insert anchors in the main view
            const placeholder = (n2.el = ( false)
                ? 0
                : createText(''));
            const mainAnchor = (n2.anchor = ( false)
                ? 0
                : createText(''));
            insert(placeholder, container, anchor);
            insert(mainAnchor, container, anchor);
            const target = (n2.target = resolveTarget(n2.props, querySelector));
            const targetAnchor = (n2.targetAnchor = createText(''));
            if (target) {
                insert(targetAnchor, target);
                // #2652 we could be teleporting from a non-SVG tree into an SVG tree
                isSVG = isSVG || isTargetSVG(target);
            }
            else if (false) {}
            const mount = (container, anchor) => {
                // Teleport *always* has Array children. This is enforced in both the
                // compiler and vnode children normalization.
                if (shapeFlag & 16 /* ARRAY_CHILDREN */) {
                    mountChildren(children, container, anchor, parentComponent, parentSuspense, isSVG, slotScopeIds, optimized);
                }
            };
            if (disabled) {
                mount(container, mainAnchor);
            }
            else if (target) {
                mount(target, targetAnchor);
            }
        }
        else {
            // update content
            n2.el = n1.el;
            const mainAnchor = (n2.anchor = n1.anchor);
            const target = (n2.target = n1.target);
            const targetAnchor = (n2.targetAnchor = n1.targetAnchor);
            const wasDisabled = isTeleportDisabled(n1.props);
            const currentContainer = wasDisabled ? container : target;
            const currentAnchor = wasDisabled ? mainAnchor : targetAnchor;
            isSVG = isSVG || isTargetSVG(target);
            if (dynamicChildren) {
                // fast path when the teleport happens to be a block root
                patchBlockChildren(n1.dynamicChildren, dynamicChildren, currentContainer, parentComponent, parentSuspense, isSVG, slotScopeIds);
                // even in block tree mode we need to make sure all root-level nodes
                // in the teleport inherit previous DOM references so that they can
                // be moved in future patches.
                traverseStaticChildren(n1, n2, true);
            }
            else if (!optimized) {
                patchChildren(n1, n2, currentContainer, currentAnchor, parentComponent, parentSuspense, isSVG, slotScopeIds, false);
            }
            if (disabled) {
                if (!wasDisabled) {
                    // enabled -> disabled
                    // move into main container
                    moveTeleport(n2, container, mainAnchor, internals, 1 /* TOGGLE */);
                }
            }
            else {
                // target changed
                if ((n2.props && n2.props.to) !== (n1.props && n1.props.to)) {
                    const nextTarget = (n2.target = resolveTarget(n2.props, querySelector));
                    if (nextTarget) {
                        moveTeleport(n2, nextTarget, null, internals, 0 /* TARGET_CHANGE */);
                    }
                    else if ((false)) {}
                }
                else if (wasDisabled) {
                    // disabled -> enabled
                    // move into teleport target
                    moveTeleport(n2, target, targetAnchor, internals, 1 /* TOGGLE */);
                }
            }
        }
    },
    remove(vnode, parentComponent, parentSuspense, optimized, { um: unmount, o: { remove: hostRemove } }, doRemove) {
        const { shapeFlag, children, anchor, targetAnchor, target, props } = vnode;
        if (target) {
            hostRemove(targetAnchor);
        }
        // an unmounted teleport should always remove its children if not disabled
        if (doRemove || !isTeleportDisabled(props)) {
            hostRemove(anchor);
            if (shapeFlag & 16 /* ARRAY_CHILDREN */) {
                for (let i = 0; i < children.length; i++) {
                    const child = children[i];
                    unmount(child, parentComponent, parentSuspense, true, !!child.dynamicChildren);
                }
            }
        }
    },
    move: moveTeleport,
    hydrate: hydrateTeleport
};
function moveTeleport(vnode, container, parentAnchor, { o: { insert }, m: move }, moveType = 2 /* REORDER */) {
    // move target anchor if this is a target change.
    if (moveType === 0 /* TARGET_CHANGE */) {
        insert(vnode.targetAnchor, container, parentAnchor);
    }
    const { el, anchor, shapeFlag, children, props } = vnode;
    const isReorder = moveType === 2 /* REORDER */;
    // move main view anchor if this is a re-order.
    if (isReorder) {
        insert(el, container, parentAnchor);
    }
    // if this is a re-order and teleport is enabled (content is in target)
    // do not move children. So the opposite is: only move children if this
    // is not a reorder, or the teleport is disabled
    if (!isReorder || isTeleportDisabled(props)) {
        // Teleport has either Array children or no children.
        if (shapeFlag & 16 /* ARRAY_CHILDREN */) {
            for (let i = 0; i < children.length; i++) {
                move(children[i], container, parentAnchor, 2 /* REORDER */);
            }
        }
    }
    // move main view anchor if this is a re-order.
    if (isReorder) {
        insert(anchor, container, parentAnchor);
    }
}
function hydrateTeleport(node, vnode, parentComponent, parentSuspense, slotScopeIds, optimized, { o: { nextSibling, parentNode, querySelector } }, hydrateChildren) {
    const target = (vnode.target = resolveTarget(vnode.props, querySelector));
    if (target) {
        // if multiple teleports rendered to the same target element, we need to
        // pick up from where the last teleport finished instead of the first node
        const targetNode = target._lpa || target.firstChild;
        if (vnode.shapeFlag & 16 /* ARRAY_CHILDREN */) {
            if (isTeleportDisabled(vnode.props)) {
                vnode.anchor = hydrateChildren(nextSibling(node), vnode, parentNode(node), parentComponent, parentSuspense, slotScopeIds, optimized);
                vnode.targetAnchor = targetNode;
            }
            else {
                vnode.anchor = nextSibling(node);
                // lookahead until we find the target anchor
                // we cannot rely on return value of hydrateChildren() because there
                // could be nested teleports
                let targetAnchor = targetNode;
                while (targetAnchor) {
                    targetAnchor = nextSibling(targetAnchor);
                    if (targetAnchor &&
                        targetAnchor.nodeType === 8 &&
                        targetAnchor.data === 'teleport anchor') {
                        vnode.targetAnchor = targetAnchor;
                        target._lpa =
                            vnode.targetAnchor && nextSibling(vnode.targetAnchor);
                        break;
                    }
                }
                hydrateChildren(targetNode, vnode, target, parentComponent, parentSuspense, slotScopeIds, optimized);
            }
        }
    }
    return vnode.anchor && nextSibling(vnode.anchor);
}
// Force-casted public typing for h and TSX props inference
const Teleport = TeleportImpl;

const Fragment = Symbol(( false) ? 0 : undefined);
const Text = Symbol(( false) ? 0 : undefined);
const Comment = Symbol(( false) ? 0 : undefined);
const Static = Symbol(( false) ? 0 : undefined);
// Since v-if and v-for are the two possible ways node structure can dynamically
// change, once we consider v-if branches and each v-for fragment a block, we
// can divide a template into nested blocks, and within each block the node
// structure would be stable. This allows us to skip most children diffing
// and only worry about the dynamic nodes (indicated by patch flags).
const blockStack = [];
let currentBlock = null;
/**
 * Open a block.
 * This must be called before `createBlock`. It cannot be part of `createBlock`
 * because the children of the block are evaluated before `createBlock` itself
 * is called. The generated code typically looks like this:
 *
 * ```js
 * function render() {
 *   return (openBlock(),createBlock('div', null, [...]))
 * }
 * ```
 * disableTracking is true when creating a v-for fragment block, since a v-for
 * fragment always diffs its children.
 *
 * @private
 */
function openBlock(disableTracking = false) {
    blockStack.push((currentBlock = disableTracking ? null : []));
}
function closeBlock() {
    blockStack.pop();
    currentBlock = blockStack[blockStack.length - 1] || null;
}
// Whether we should be tracking dynamic child nodes inside a block.
// Only tracks when this value is > 0
// We are not using a simple boolean because this value may need to be
// incremented/decremented by nested usage of v-once (see below)
let isBlockTreeEnabled = 1;
/**
 * Block tracking sometimes needs to be disabled, for example during the
 * creation of a tree that needs to be cached by v-once. The compiler generates
 * code like this:
 *
 * ``` js
 * _cache[1] || (
 *   setBlockTracking(-1),
 *   _cache[1] = createVNode(...),
 *   setBlockTracking(1),
 *   _cache[1]
 * )
 * ```
 *
 * @private
 */
function setBlockTracking(value) {
    isBlockTreeEnabled += value;
}
function setupBlock(vnode) {
    // save current block children on the block vnode
    vnode.dynamicChildren =
        isBlockTreeEnabled > 0 ? currentBlock || _vue_shared__WEBPACK_IMPORTED_MODULE_1__/* .EMPTY_ARR */ .Z6 : null;
    // close block
    closeBlock();
    // a block is always going to be patched, so track it as a child of its
    // parent block
    if (isBlockTreeEnabled > 0 && currentBlock) {
        currentBlock.push(vnode);
    }
    return vnode;
}
/**
 * @private
 */
function createElementBlock(type, props, children, patchFlag, dynamicProps, shapeFlag) {
    return setupBlock(createBaseVNode(type, props, children, patchFlag, dynamicProps, shapeFlag, true /* isBlock */));
}
/**
 * Create a block root vnode. Takes the same exact arguments as `createVNode`.
 * A block root keeps track of dynamic nodes within the block in the
 * `dynamicChildren` array.
 *
 * @private
 */
function createBlock(type, props, children, patchFlag, dynamicProps) {
    return setupBlock(createVNode(type, props, children, patchFlag, dynamicProps, true /* isBlock: prevent a block from tracking itself */));
}
function isVNode(value) {
    return value ? value.__v_isVNode === true : false;
}
function isSameVNodeType(n1, n2) {
    if (false) {}
    return n1.type === n2.type && n1.key === n2.key;
}
let vnodeArgsTransformer;
/**
 * Internal API for registering an arguments transform for createVNode
 * used for creating stubs in the test-utils
 * It is *internal* but needs to be exposed for test-utils to pick up proper
 * typings
 */
function transformVNodeArgs(transformer) {
    vnodeArgsTransformer = transformer;
}
const createVNodeWithArgsTransform = (...args) => {
    return _createVNode(...(vnodeArgsTransformer
        ? vnodeArgsTransformer(args, currentRenderingInstance)
        : args));
};
const InternalObjectKey = `__vInternal`;
const normalizeKey = ({ key }) => key != null ? key : null;
const normalizeRef = ({ ref, ref_key, ref_for }) => {
    return (ref != null
        ? (0,_vue_shared__WEBPACK_IMPORTED_MODULE_1__/* .isString */ .HD)(ref) || (0,_vue_reactivity__WEBPACK_IMPORTED_MODULE_0__/* .isRef */ .dq)(ref) || (0,_vue_shared__WEBPACK_IMPORTED_MODULE_1__/* .isFunction */ .mf)(ref)
            ? { i: currentRenderingInstance, r: ref, k: ref_key, f: !!ref_for }
            : ref
        : null);
};
function createBaseVNode(type, props = null, children = null, patchFlag = 0, dynamicProps = null, shapeFlag = type === Fragment ? 0 : 1 /* ELEMENT */, isBlockNode = false, needFullChildrenNormalization = false) {
    const vnode = {
        __v_isVNode: true,
        __v_skip: true,
        type,
        props,
        key: props && normalizeKey(props),
        ref: props && normalizeRef(props),
        scopeId: currentScopeId,
        slotScopeIds: null,
        children,
        component: null,
        suspense: null,
        ssContent: null,
        ssFallback: null,
        dirs: null,
        transition: null,
        el: null,
        anchor: null,
        target: null,
        targetAnchor: null,
        staticCount: 0,
        shapeFlag,
        patchFlag,
        dynamicProps,
        dynamicChildren: null,
        appContext: null
    };
    if (needFullChildrenNormalization) {
        normalizeChildren(vnode, children);
        // normalize suspense children
        if (shapeFlag & 128 /* SUSPENSE */) {
            type.normalize(vnode);
        }
    }
    else if (children) {
        // compiled element vnode - if children is passed, only possible types are
        // string or Array.
        vnode.shapeFlag |= (0,_vue_shared__WEBPACK_IMPORTED_MODULE_1__/* .isString */ .HD)(children)
            ? 8 /* TEXT_CHILDREN */
            : 16 /* ARRAY_CHILDREN */;
    }
    // validate key
    if (false) {}
    // track vnode for block tree
    if (isBlockTreeEnabled > 0 &&
        // avoid a block node from tracking itself
        !isBlockNode &&
        // has current parent block
        currentBlock &&
        // presence of a patch flag indicates this node needs patching on updates.
        // component nodes also should always be patched, because even if the
        // component doesn't need to update, it needs to persist the instance on to
        // the next vnode so that it can be properly unmounted later.
        (vnode.patchFlag > 0 || shapeFlag & 6 /* COMPONENT */) &&
        // the EVENTS flag is only for hydration and if it is the only flag, the
        // vnode should not be considered dynamic due to handler caching.
        vnode.patchFlag !== 32 /* HYDRATE_EVENTS */) {
        currentBlock.push(vnode);
    }
    return vnode;
}
const createVNode = (( false) ? 0 : _createVNode);
function _createVNode(type, props = null, children = null, patchFlag = 0, dynamicProps = null, isBlockNode = false) {
    if (!type || type === NULL_DYNAMIC_COMPONENT) {
        if (false) {}
        type = Comment;
    }
    if (isVNode(type)) {
        // createVNode receiving an existing vnode. This happens in cases like
        // <component :is="vnode"/>
        // #2078 make sure to merge refs during the clone instead of overwriting it
        const cloned = cloneVNode(type, props, true /* mergeRef: true */);
        if (children) {
            normalizeChildren(cloned, children);
        }
        if (isBlockTreeEnabled > 0 && !isBlockNode && currentBlock) {
            if (cloned.shapeFlag & 6 /* COMPONENT */) {
                currentBlock[currentBlock.indexOf(type)] = cloned;
            }
            else {
                currentBlock.push(cloned);
            }
        }
        cloned.patchFlag |= -2 /* BAIL */;
        return cloned;
    }
    // class component normalization.
    if (isClassComponent(type)) {
        type = type.__vccOpts;
    }
    // class & style normalization.
    if (props) {
        // for reactive or proxy objects, we need to clone it to enable mutation.
        props = guardReactiveProps(props);
        let { class: klass, style } = props;
        if (klass && !(0,_vue_shared__WEBPACK_IMPORTED_MODULE_1__/* .isString */ .HD)(klass)) {
            props.class = (0,_vue_shared__WEBPACK_IMPORTED_MODULE_1__/* .normalizeClass */ .C_)(klass);
        }
        if ((0,_vue_shared__WEBPACK_IMPORTED_MODULE_1__/* .isObject */ .Kn)(style)) {
            // reactive state objects need to be cloned since they are likely to be
            // mutated
            if ((0,_vue_reactivity__WEBPACK_IMPORTED_MODULE_0__/* .isProxy */ .X3)(style) && !(0,_vue_shared__WEBPACK_IMPORTED_MODULE_1__/* .isArray */ .kJ)(style)) {
                style = (0,_vue_shared__WEBPACK_IMPORTED_MODULE_1__/* .extend */ .l7)({}, style);
            }
            props.style = (0,_vue_shared__WEBPACK_IMPORTED_MODULE_1__/* .normalizeStyle */ .j5)(style);
        }
    }
    // encode the vnode type information into a bitmap
    const shapeFlag = (0,_vue_shared__WEBPACK_IMPORTED_MODULE_1__/* .isString */ .HD)(type)
        ? 1 /* ELEMENT */
        : isSuspense(type)
            ? 128 /* SUSPENSE */
            : isTeleport(type)
                ? 64 /* TELEPORT */
                : (0,_vue_shared__WEBPACK_IMPORTED_MODULE_1__/* .isObject */ .Kn)(type)
                    ? 4 /* STATEFUL_COMPONENT */
                    : (0,_vue_shared__WEBPACK_IMPORTED_MODULE_1__/* .isFunction */ .mf)(type)
                        ? 2 /* FUNCTIONAL_COMPONENT */
                        : 0;
    if (false) {}
    return createBaseVNode(type, props, children, patchFlag, dynamicProps, shapeFlag, isBlockNode, true);
}
function guardReactiveProps(props) {
    if (!props)
        return null;
    return (0,_vue_reactivity__WEBPACK_IMPORTED_MODULE_0__/* .isProxy */ .X3)(props) || InternalObjectKey in props
        ? (0,_vue_shared__WEBPACK_IMPORTED_MODULE_1__/* .extend */ .l7)({}, props)
        : props;
}
function cloneVNode(vnode, extraProps, mergeRef = false) {
    // This is intentionally NOT using spread or extend to avoid the runtime
    // key enumeration cost.
    const { props, ref, patchFlag, children } = vnode;
    const mergedProps = extraProps ? mergeProps(props || {}, extraProps) : props;
    const cloned = {
        __v_isVNode: true,
        __v_skip: true,
        type: vnode.type,
        props: mergedProps,
        key: mergedProps && normalizeKey(mergedProps),
        ref: extraProps && extraProps.ref
            ? // #2078 in the case of <component :is="vnode" ref="extra"/>
                // if the vnode itself already has a ref, cloneVNode will need to merge
                // the refs so the single vnode can be set on multiple refs
                mergeRef && ref
                    ? (0,_vue_shared__WEBPACK_IMPORTED_MODULE_1__/* .isArray */ .kJ)(ref)
                        ? ref.concat(normalizeRef(extraProps))
                        : [ref, normalizeRef(extraProps)]
                    : normalizeRef(extraProps)
            : ref,
        scopeId: vnode.scopeId,
        slotScopeIds: vnode.slotScopeIds,
        children:  false
            ? 0
            : children,
        target: vnode.target,
        targetAnchor: vnode.targetAnchor,
        staticCount: vnode.staticCount,
        shapeFlag: vnode.shapeFlag,
        // if the vnode is cloned with extra props, we can no longer assume its
        // existing patch flag to be reliable and need to add the FULL_PROPS flag.
        // note: preserve flag for fragments since they use the flag for children
        // fast paths only.
        patchFlag: extraProps && vnode.type !== Fragment
            ? patchFlag === -1 // hoisted node
                ? 16 /* FULL_PROPS */
                : patchFlag | 16 /* FULL_PROPS */
            : patchFlag,
        dynamicProps: vnode.dynamicProps,
        dynamicChildren: vnode.dynamicChildren,
        appContext: vnode.appContext,
        dirs: vnode.dirs,
        transition: vnode.transition,
        // These should technically only be non-null on mounted VNodes. However,
        // they *should* be copied for kept-alive vnodes. So we just always copy
        // them since them being non-null during a mount doesn't affect the logic as
        // they will simply be overwritten.
        component: vnode.component,
        suspense: vnode.suspense,
        ssContent: vnode.ssContent && cloneVNode(vnode.ssContent),
        ssFallback: vnode.ssFallback && cloneVNode(vnode.ssFallback),
        el: vnode.el,
        anchor: vnode.anchor
    };
    return cloned;
}
/**
 * Dev only, for HMR of hoisted vnodes reused in v-for
 * https://github.com/vitejs/vite/issues/2022
 */
function deepCloneVNode(vnode) {
    const cloned = cloneVNode(vnode);
    if (isArray(vnode.children)) {
        cloned.children = vnode.children.map(deepCloneVNode);
    }
    return cloned;
}
/**
 * @private
 */
function createTextVNode(text = ' ', flag = 0) {
    return createVNode(Text, null, text, flag);
}
/**
 * @private
 */
function createStaticVNode(content, numberOfNodes) {
    // A static vnode can contain multiple stringified elements, and the number
    // of elements is necessary for hydration.
    const vnode = createVNode(Static, null, content);
    vnode.staticCount = numberOfNodes;
    return vnode;
}
/**
 * @private
 */
function createCommentVNode(text = '', 
// when used as the v-else branch, the comment node must be created as a
// block to ensure correct updates.
asBlock = false) {
    return asBlock
        ? (openBlock(), createBlock(Comment, null, text))
        : createVNode(Comment, null, text);
}
function normalizeVNode(child) {
    if (child == null || typeof child === 'boolean') {
        // empty placeholder
        return createVNode(Comment);
    }
    else if ((0,_vue_shared__WEBPACK_IMPORTED_MODULE_1__/* .isArray */ .kJ)(child)) {
        // fragment
        return createVNode(Fragment, null, 
        // #3666, avoid reference pollution when reusing vnode
        child.slice());
    }
    else if (typeof child === 'object') {
        // already vnode, this should be the most common since compiled templates
        // always produce all-vnode children arrays
        return cloneIfMounted(child);
    }
    else {
        // strings and numbers
        return createVNode(Text, null, String(child));
    }
}
// optimized normalization for template-compiled render fns
function cloneIfMounted(child) {
    return child.el === null || child.memo ? child : cloneVNode(child);
}
function normalizeChildren(vnode, children) {
    let type = 0;
    const { shapeFlag } = vnode;
    if (children == null) {
        children = null;
    }
    else if ((0,_vue_shared__WEBPACK_IMPORTED_MODULE_1__/* .isArray */ .kJ)(children)) {
        type = 16 /* ARRAY_CHILDREN */;
    }
    else if (typeof children === 'object') {
        if (shapeFlag & (1 /* ELEMENT */ | 64 /* TELEPORT */)) {
            // Normalize slot to plain children for plain element and Teleport
            const slot = children.default;
            if (slot) {
                // _c marker is added by withCtx() indicating this is a compiled slot
                slot._c && (slot._d = false);
                normalizeChildren(vnode, slot());
                slot._c && (slot._d = true);
            }
            return;
        }
        else {
            type = 32 /* SLOTS_CHILDREN */;
            const slotFlag = children._;
            if (!slotFlag && !(InternalObjectKey in children)) {
                children._ctx = currentRenderingInstance;
            }
            else if (slotFlag === 3 /* FORWARDED */ && currentRenderingInstance) {
                // a child component receives forwarded slots from the parent.
                // its slot type is determined by its parent's slot type.
                if (currentRenderingInstance.slots._ === 1 /* STABLE */) {
                    children._ = 1 /* STABLE */;
                }
                else {
                    children._ = 2 /* DYNAMIC */;
                    vnode.patchFlag |= 1024 /* DYNAMIC_SLOTS */;
                }
            }
        }
    }
    else if ((0,_vue_shared__WEBPACK_IMPORTED_MODULE_1__/* .isFunction */ .mf)(children)) {
        children = { default: children, _ctx: currentRenderingInstance };
        type = 32 /* SLOTS_CHILDREN */;
    }
    else {
        children = String(children);
        // force teleport children to array so it can be moved around
        if (shapeFlag & 64 /* TELEPORT */) {
            type = 16 /* ARRAY_CHILDREN */;
            children = [createTextVNode(children)];
        }
        else {
            type = 8 /* TEXT_CHILDREN */;
        }
    }
    vnode.children = children;
    vnode.shapeFlag |= type;
}
function mergeProps(...args) {
    const ret = {};
    for (let i = 0; i < args.length; i++) {
        const toMerge = args[i];
        for (const key in toMerge) {
            if (key === 'class') {
                if (ret.class !== toMerge.class) {
                    ret.class = (0,_vue_shared__WEBPACK_IMPORTED_MODULE_1__/* .normalizeClass */ .C_)([ret.class, toMerge.class]);
                }
            }
            else if (key === 'style') {
                ret.style = (0,_vue_shared__WEBPACK_IMPORTED_MODULE_1__/* .normalizeStyle */ .j5)([ret.style, toMerge.style]);
            }
            else if ((0,_vue_shared__WEBPACK_IMPORTED_MODULE_1__/* .isOn */ .F7)(key)) {
                const existing = ret[key];
                const incoming = toMerge[key];
                if (incoming &&
                    existing !== incoming &&
                    !((0,_vue_shared__WEBPACK_IMPORTED_MODULE_1__/* .isArray */ .kJ)(existing) && existing.includes(incoming))) {
                    ret[key] = existing
                        ? [].concat(existing, incoming)
                        : incoming;
                }
            }
            else if (key !== '') {
                ret[key] = toMerge[key];
            }
        }
    }
    return ret;
}
function invokeVNodeHook(hook, instance, vnode, prevVNode = null) {
    callWithAsyncErrorHandling(hook, instance, 7 /* VNODE_HOOK */, [
        vnode,
        prevVNode
    ]);
}

const emptyAppContext = createAppContext();
let uid$1 = 0;
function createComponentInstance(vnode, parent, suspense) {
    const type = vnode.type;
    // inherit parent app context - or - if root, adopt from root vnode
    const appContext = (parent ? parent.appContext : vnode.appContext) || emptyAppContext;
    const instance = {
        uid: uid$1++,
        vnode,
        type,
        parent,
        appContext,
        root: null,
        next: null,
        subTree: null,
        effect: null,
        update: null,
        scope: new _vue_reactivity__WEBPACK_IMPORTED_MODULE_0__/* .EffectScope */ .Bj(true /* detached */),
        render: null,
        proxy: null,
        exposed: null,
        exposeProxy: null,
        withProxy: null,
        provides: parent ? parent.provides : Object.create(appContext.provides),
        accessCache: null,
        renderCache: [],
        // local resolved assets
        components: null,
        directives: null,
        // resolved props and emits options
        propsOptions: normalizePropsOptions(type, appContext),
        emitsOptions: normalizeEmitsOptions(type, appContext),
        // emit
        emit: null,
        emitted: null,
        // props default value
        propsDefaults: _vue_shared__WEBPACK_IMPORTED_MODULE_1__/* .EMPTY_OBJ */ .kT,
        // inheritAttrs
        inheritAttrs: type.inheritAttrs,
        // state
        ctx: _vue_shared__WEBPACK_IMPORTED_MODULE_1__/* .EMPTY_OBJ */ .kT,
        data: _vue_shared__WEBPACK_IMPORTED_MODULE_1__/* .EMPTY_OBJ */ .kT,
        props: _vue_shared__WEBPACK_IMPORTED_MODULE_1__/* .EMPTY_OBJ */ .kT,
        attrs: _vue_shared__WEBPACK_IMPORTED_MODULE_1__/* .EMPTY_OBJ */ .kT,
        slots: _vue_shared__WEBPACK_IMPORTED_MODULE_1__/* .EMPTY_OBJ */ .kT,
        refs: _vue_shared__WEBPACK_IMPORTED_MODULE_1__/* .EMPTY_OBJ */ .kT,
        setupState: _vue_shared__WEBPACK_IMPORTED_MODULE_1__/* .EMPTY_OBJ */ .kT,
        setupContext: null,
        // suspense related
        suspense,
        suspenseId: suspense ? suspense.pendingId : 0,
        asyncDep: null,
        asyncResolved: false,
        // lifecycle hooks
        // not using enums here because it results in computed properties
        isMounted: false,
        isUnmounted: false,
        isDeactivated: false,
        bc: null,
        c: null,
        bm: null,
        m: null,
        bu: null,
        u: null,
        um: null,
        bum: null,
        da: null,
        a: null,
        rtg: null,
        rtc: null,
        ec: null,
        sp: null
    };
    if ((false)) {}
    else {
        instance.ctx = { _: instance };
    }
    instance.root = parent ? parent.root : instance;
    instance.emit = emit$1.bind(null, instance);
    // apply custom element special handling
    if (vnode.ce) {
        vnode.ce(instance);
    }
    return instance;
}
let currentInstance = null;
const getCurrentInstance = () => currentInstance || currentRenderingInstance;
const setCurrentInstance = (instance) => {
    currentInstance = instance;
    instance.scope.on();
};
const unsetCurrentInstance = () => {
    currentInstance && currentInstance.scope.off();
    currentInstance = null;
};
const isBuiltInTag = /*#__PURE__*/ (/* unused pure expression or super */ null && (makeMap('slot,component')));
function validateComponentName(name, config) {
    const appIsNativeTag = config.isNativeTag || NO;
    if (isBuiltInTag(name) || appIsNativeTag(name)) {
        warn('Do not use built-in or reserved HTML elements as component id: ' + name);
    }
}
function isStatefulComponent(instance) {
    return instance.vnode.shapeFlag & 4 /* STATEFUL_COMPONENT */;
}
let isInSSRComponentSetup = false;
function setupComponent(instance, isSSR = false) {
    isInSSRComponentSetup = isSSR;
    const { props, children } = instance.vnode;
    const isStateful = isStatefulComponent(instance);
    initProps(instance, props, isStateful, isSSR);
    initSlots(instance, children);
    const setupResult = isStateful
        ? setupStatefulComponent(instance, isSSR)
        : undefined;
    isInSSRComponentSetup = false;
    return setupResult;
}
function setupStatefulComponent(instance, isSSR) {
    var _a;
    const Component = instance.type;
    if ((false)) {}
    // 0. create render proxy property access cache
    instance.accessCache = Object.create(null);
    // 1. create public instance / render proxy
    // also mark it raw so it's never observed
    instance.proxy = (0,_vue_reactivity__WEBPACK_IMPORTED_MODULE_0__/* .markRaw */ .Xl)(new Proxy(instance.ctx, PublicInstanceProxyHandlers));
    if ((false)) {}
    // 2. call setup()
    const { setup } = Component;
    if (setup) {
        const setupContext = (instance.setupContext =
            setup.length > 1 ? createSetupContext(instance) : null);
        setCurrentInstance(instance);
        (0,_vue_reactivity__WEBPACK_IMPORTED_MODULE_0__/* .pauseTracking */ .Jd)();
        const setupResult = callWithErrorHandling(setup, instance, 0 /* SETUP_FUNCTION */, [( false) ? 0 : instance.props, setupContext]);
        (0,_vue_reactivity__WEBPACK_IMPORTED_MODULE_0__/* .resetTracking */ .lk)();
        unsetCurrentInstance();
        if ((0,_vue_shared__WEBPACK_IMPORTED_MODULE_1__/* .isPromise */ .tI)(setupResult)) {
            setupResult.then(unsetCurrentInstance, unsetCurrentInstance);
            if (isSSR) {
                // return the promise so server-renderer can wait on it
                return setupResult
                    .then((resolvedResult) => {
                    handleSetupResult(instance, resolvedResult, isSSR);
                })
                    .catch(e => {
                    handleError(e, instance, 0 /* SETUP_FUNCTION */);
                });
            }
            else {
                // async setup returned Promise.
                // bail here and wait for re-entry.
                instance.asyncDep = setupResult;
                if (false) {}
            }
        }
        else {
            handleSetupResult(instance, setupResult, isSSR);
        }
    }
    else {
        finishComponentSetup(instance, isSSR);
    }
}
function handleSetupResult(instance, setupResult, isSSR) {
    if ((0,_vue_shared__WEBPACK_IMPORTED_MODULE_1__/* .isFunction */ .mf)(setupResult)) {
        // setup returned an inline render function
        if (instance.type.__ssrInlineRender) {
            // when the function's name is `ssrRender` (compiled by SFC inline mode),
            // set it as ssrRender instead.
            instance.ssrRender = setupResult;
        }
        else {
            instance.render = setupResult;
        }
    }
    else if ((0,_vue_shared__WEBPACK_IMPORTED_MODULE_1__/* .isObject */ .Kn)(setupResult)) {
        if (false) {}
        // setup returned bindings.
        // assuming a render function compiled from template is present.
        if (( false) || __VUE_PROD_DEVTOOLS__) {
            instance.devtoolsRawSetupState = setupResult;
        }
        instance.setupState = (0,_vue_reactivity__WEBPACK_IMPORTED_MODULE_0__/* .proxyRefs */ .WL)(setupResult);
        if ((false)) {}
    }
    else if (false) {}
    finishComponentSetup(instance, isSSR);
}
let compile;
let installWithProxy;
/**
 * For runtime-dom to register the compiler.
 * Note the exported method uses any to avoid d.ts relying on the compiler types.
 */
function registerRuntimeCompiler(_compile) {
    compile = _compile;
    installWithProxy = i => {
        if (i.render._rc) {
            i.withProxy = new Proxy(i.ctx, RuntimeCompiledPublicInstanceProxyHandlers);
        }
    };
}
// dev only
const isRuntimeOnly = () => !compile;
function finishComponentSetup(instance, isSSR, skipOptions) {
    const Component = instance.type;
    // template / render function normalization
    // could be already set when returned from setup()
    if (!instance.render) {
        // only do on-the-fly compile if not in SSR - SSR on-the-fly compilation
        // is done by server-renderer
        if (!isSSR && compile && !Component.render) {
            const template = Component.template;
            if (template) {
                if ((false)) {}
                const { isCustomElement, compilerOptions } = instance.appContext.config;
                const { delimiters, compilerOptions: componentCompilerOptions } = Component;
                const finalCompilerOptions = (0,_vue_shared__WEBPACK_IMPORTED_MODULE_1__/* .extend */ .l7)((0,_vue_shared__WEBPACK_IMPORTED_MODULE_1__/* .extend */ .l7)({
                    isCustomElement,
                    delimiters
                }, compilerOptions), componentCompilerOptions);
                Component.render = compile(template, finalCompilerOptions);
                if ((false)) {}
            }
        }
        instance.render = (Component.render || _vue_shared__WEBPACK_IMPORTED_MODULE_1__/* .NOOP */ .dG);
        // for runtime-compiled render functions using `with` blocks, the render
        // proxy used needs a different `has` handler which is more performant and
        // also only allows a whitelist of globals to fallthrough.
        if (installWithProxy) {
            installWithProxy(instance);
        }
    }
    // support for 2.x options
    if (__VUE_OPTIONS_API__ && !(false )) {
        setCurrentInstance(instance);
        (0,_vue_reactivity__WEBPACK_IMPORTED_MODULE_0__/* .pauseTracking */ .Jd)();
        applyOptions(instance);
        (0,_vue_reactivity__WEBPACK_IMPORTED_MODULE_0__/* .resetTracking */ .lk)();
        unsetCurrentInstance();
    }
    // warn missing template/render
    // the runtime compilation of template in SSR is done by server-render
    if (false) {}
}
function createAttrsProxy(instance) {
    return new Proxy(instance.attrs, ( false)
        ? 0
        : {
            get(target, key) {
                (0,_vue_reactivity__WEBPACK_IMPORTED_MODULE_0__/* .track */ .j)(instance, "get" /* GET */, '$attrs');
                return target[key];
            }
        });
}
function createSetupContext(instance) {
    const expose = exposed => {
        if (false) {}
        instance.exposed = exposed || {};
    };
    let attrs;
    if ((false)) {}
    else {
        return {
            get attrs() {
                return attrs || (attrs = createAttrsProxy(instance));
            },
            slots: instance.slots,
            emit: instance.emit,
            expose
        };
    }
}
function getExposeProxy(instance) {
    if (instance.exposed) {
        return (instance.exposeProxy ||
            (instance.exposeProxy = new Proxy((0,_vue_reactivity__WEBPACK_IMPORTED_MODULE_0__/* .proxyRefs */ .WL)((0,_vue_reactivity__WEBPACK_IMPORTED_MODULE_0__/* .markRaw */ .Xl)(instance.exposed)), {
                get(target, key) {
                    if (key in target) {
                        return target[key];
                    }
                    else if (key in publicPropertiesMap) {
                        return publicPropertiesMap[key](instance);
                    }
                }
            })));
    }
}
const classifyRE = /(?:^|[-_])(\w)/g;
const classify = (str) => str.replace(classifyRE, c => c.toUpperCase()).replace(/[-_]/g, '');
function getComponentName(Component) {
    return (0,_vue_shared__WEBPACK_IMPORTED_MODULE_1__/* .isFunction */ .mf)(Component)
        ? Component.displayName || Component.name
        : Component.name;
}
/* istanbul ignore next */
function formatComponentName(instance, Component, isRoot = false) {
    let name = getComponentName(Component);
    if (!name && Component.__file) {
        const match = Component.__file.match(/([^/\\]+)\.\w+$/);
        if (match) {
            name = match[1];
        }
    }
    if (!name && instance && instance.parent) {
        // try to infer the name based on reverse resolution
        const inferFromRegistry = (registry) => {
            for (const key in registry) {
                if (registry[key] === Component) {
                    return key;
                }
            }
        };
        name =
            inferFromRegistry(instance.components ||
                instance.parent.type.components) || inferFromRegistry(instance.appContext.components);
    }
    return name ? classify(name) : isRoot ? `App` : `Anonymous`;
}
function isClassComponent(value) {
    return (0,_vue_shared__WEBPACK_IMPORTED_MODULE_1__/* .isFunction */ .mf)(value) && '__vccOpts' in value;
}

const computed = ((getterOrOptions, debugOptions) => {
    // @ts-ignore
    return (0,_vue_reactivity__WEBPACK_IMPORTED_MODULE_0__/* .computed */ .Fl)(getterOrOptions, debugOptions, isInSSRComponentSetup);
});

// dev only
const warnRuntimeUsage = (method) => warn(`${method}() is a compiler-hint helper that is only usable inside ` +
    `<script setup> of a single file component. Its arguments should be ` +
    `compiled away and passing it at runtime has no effect.`);
// implementation
function defineProps() {
    if ((false)) {}
    return null;
}
// implementation
function defineEmits() {
    if ((false)) {}
    return null;
}
/**
 * Vue `<script setup>` compiler macro for declaring a component's exposed
 * instance properties when it is accessed by a parent component via template
 * refs.
 *
 * `<script setup>` components are closed by default - i.e. variables inside
 * the `<script setup>` scope is not exposed to parent unless explicitly exposed
 * via `defineExpose`.
 *
 * This is only usable inside `<script setup>`, is compiled away in the
 * output and should **not** be actually called at runtime.
 */
function defineExpose(exposed) {
    if ((false)) {}
}
/**
 * Vue `<script setup>` compiler macro for providing props default values when
 * using type-based `defineProps` declaration.
 *
 * Example usage:
 * ```ts
 * withDefaults(defineProps<{
 *   size?: number
 *   labels?: string[]
 * }>(), {
 *   size: 3,
 *   labels: () => ['default label']
 * })
 * ```
 *
 * This is only usable inside `<script setup>`, is compiled away in the output
 * and should **not** be actually called at runtime.
 */
function withDefaults(props, defaults) {
    if ((false)) {}
    return null;
}
function useSlots() {
    return getContext().slots;
}
function useAttrs() {
    return getContext().attrs;
}
function getContext() {
    const i = getCurrentInstance();
    if (false) {}
    return i.setupContext || (i.setupContext = createSetupContext(i));
}
/**
 * Runtime helper for merging default declarations. Imported by compiled code
 * only.
 * @internal
 */
function mergeDefaults(raw, defaults) {
    const props = isArray(raw)
        ? raw.reduce((normalized, p) => ((normalized[p] = {}), normalized), {})
        : raw;
    for (const key in defaults) {
        const opt = props[key];
        if (opt) {
            if (isArray(opt) || isFunction(opt)) {
                props[key] = { type: opt, default: defaults[key] };
            }
            else {
                opt.default = defaults[key];
            }
        }
        else if (opt === null) {
            props[key] = { default: defaults[key] };
        }
        else if ((false)) {}
    }
    return props;
}
/**
 * Used to create a proxy for the rest element when destructuring props with
 * defineProps().
 * @internal
 */
function createPropsRestProxy(props, excludedKeys) {
    const ret = {};
    for (const key in props) {
        if (!excludedKeys.includes(key)) {
            Object.defineProperty(ret, key, {
                enumerable: true,
                get: () => props[key]
            });
        }
    }
    return ret;
}
/**
 * `<script setup>` helper for persisting the current instance context over
 * async/await flows.
 *
 * `@vue/compiler-sfc` converts the following:
 *
 * ```ts
 * const x = await foo()
 * ```
 *
 * into:
 *
 * ```ts
 * let __temp, __restore
 * const x = (([__temp, __restore] = withAsyncContext(() => foo())),__temp=await __temp,__restore(),__temp)
 * ```
 * @internal
 */
function withAsyncContext(getAwaitable) {
    const ctx = getCurrentInstance();
    if (false) {}
    let awaitable = getAwaitable();
    unsetCurrentInstance();
    if (isPromise(awaitable)) {
        awaitable = awaitable.catch(e => {
            setCurrentInstance(ctx);
            throw e;
        });
    }
    return [awaitable, () => setCurrentInstance(ctx)];
}

// Actual implementation
function h(type, propsOrChildren, children) {
    const l = arguments.length;
    if (l === 2) {
        if ((0,_vue_shared__WEBPACK_IMPORTED_MODULE_1__/* .isObject */ .Kn)(propsOrChildren) && !(0,_vue_shared__WEBPACK_IMPORTED_MODULE_1__/* .isArray */ .kJ)(propsOrChildren)) {
            // single vnode without props
            if (isVNode(propsOrChildren)) {
                return createVNode(type, null, [propsOrChildren]);
            }
            // props without children
            return createVNode(type, propsOrChildren);
        }
        else {
            // omit props
            return createVNode(type, null, propsOrChildren);
        }
    }
    else {
        if (l > 3) {
            children = Array.prototype.slice.call(arguments, 2);
        }
        else if (l === 3 && isVNode(children)) {
            children = [children];
        }
        return createVNode(type, propsOrChildren, children);
    }
}

const ssrContextKey = Symbol(( false) ? 0 : ``);
const useSSRContext = () => {
    {
        const ctx = inject(ssrContextKey);
        if (!ctx) {
            warn(`Server rendering context not provided. Make sure to only call ` +
                `useSSRContext() conditionally in the server build.`);
        }
        return ctx;
    }
};

function isShallow(value) {
    return !!(value && value["__v_isShallow" /* IS_SHALLOW */]);
}

function initCustomFormatter() {
    /* eslint-disable no-restricted-globals */
    if (true) {
        return;
    }
    const vueStyle = { style: 'color:#3ba776' };
    const numberStyle = { style: 'color:#0b1bc9' };
    const stringStyle = { style: 'color:#b62e24' };
    const keywordStyle = { style: 'color:#9d288c' };
    // custom formatter for Chrome
    // https://www.mattzeunert.com/2016/02/19/custom-chrome-devtools-object-formatters.html
    const formatter = {
        header(obj) {
            // TODO also format ComponentPublicInstance & ctx.slots/attrs in setup
            if (!isObject(obj)) {
                return null;
            }
            if (obj.__isVue) {
                return ['div', vueStyle, `VueInstance`];
            }
            else if (isRef(obj)) {
                return [
                    'div',
                    {},
                    ['span', vueStyle, genRefFlag(obj)],
                    '<',
                    formatValue(obj.value),
                    `>`
                ];
            }
            else if (isReactive(obj)) {
                return [
                    'div',
                    {},
                    ['span', vueStyle, isShallow(obj) ? 'ShallowReactive' : 'Reactive'],
                    '<',
                    formatValue(obj),
                    `>${isReadonly(obj) ? ` (readonly)` : ``}`
                ];
            }
            else if (isReadonly(obj)) {
                return [
                    'div',
                    {},
                    ['span', vueStyle, isShallow(obj) ? 'ShallowReadonly' : 'Readonly'],
                    '<',
                    formatValue(obj),
                    '>'
                ];
            }
            return null;
        },
        hasBody(obj) {
            return obj && obj.__isVue;
        },
        body(obj) {
            if (obj && obj.__isVue) {
                return [
                    'div',
                    {},
                    ...formatInstance(obj.$)
                ];
            }
        }
    };
    function formatInstance(instance) {
        const blocks = [];
        if (instance.type.props && instance.props) {
            blocks.push(createInstanceBlock('props', toRaw(instance.props)));
        }
        if (instance.setupState !== EMPTY_OBJ) {
            blocks.push(createInstanceBlock('setup', instance.setupState));
        }
        if (instance.data !== EMPTY_OBJ) {
            blocks.push(createInstanceBlock('data', toRaw(instance.data)));
        }
        const computed = extractKeys(instance, 'computed');
        if (computed) {
            blocks.push(createInstanceBlock('computed', computed));
        }
        const injected = extractKeys(instance, 'inject');
        if (injected) {
            blocks.push(createInstanceBlock('injected', injected));
        }
        blocks.push([
            'div',
            {},
            [
                'span',
                {
                    style: keywordStyle.style + ';opacity:0.66'
                },
                '$ (internal): '
            ],
            ['object', { object: instance }]
        ]);
        return blocks;
    }
    function createInstanceBlock(type, target) {
        target = extend({}, target);
        if (!Object.keys(target).length) {
            return ['span', {}];
        }
        return [
            'div',
            { style: 'line-height:1.25em;margin-bottom:0.6em' },
            [
                'div',
                {
                    style: 'color:#476582'
                },
                type
            ],
            [
                'div',
                {
                    style: 'padding-left:1.25em'
                },
                ...Object.keys(target).map(key => {
                    return [
                        'div',
                        {},
                        ['span', keywordStyle, key + ': '],
                        formatValue(target[key], false)
                    ];
                })
            ]
        ];
    }
    function formatValue(v, asRaw = true) {
        if (typeof v === 'number') {
            return ['span', numberStyle, v];
        }
        else if (typeof v === 'string') {
            return ['span', stringStyle, JSON.stringify(v)];
        }
        else if (typeof v === 'boolean') {
            return ['span', keywordStyle, v];
        }
        else if (isObject(v)) {
            return ['object', { object: asRaw ? toRaw(v) : v }];
        }
        else {
            return ['span', stringStyle, String(v)];
        }
    }
    function extractKeys(instance, type) {
        const Comp = instance.type;
        if (isFunction(Comp)) {
            return;
        }
        const extracted = {};
        for (const key in instance.ctx) {
            if (isKeyOfType(Comp, key, type)) {
                extracted[key] = instance.ctx[key];
            }
        }
        return extracted;
    }
    function isKeyOfType(Comp, key, type) {
        const opts = Comp[type];
        if ((isArray(opts) && opts.includes(key)) ||
            (isObject(opts) && key in opts)) {
            return true;
        }
        if (Comp.extends && isKeyOfType(Comp.extends, key, type)) {
            return true;
        }
        if (Comp.mixins && Comp.mixins.some(m => isKeyOfType(m, key, type))) {
            return true;
        }
    }
    function genRefFlag(v) {
        if (isShallow(v)) {
            return `ShallowRef`;
        }
        if (v.effect) {
            return `ComputedRef`;
        }
        return `Ref`;
    }
    if (window.devtoolsFormatters) {
        window.devtoolsFormatters.push(formatter);
    }
    else {
        window.devtoolsFormatters = [formatter];
    }
}

function withMemo(memo, render, cache, index) {
    const cached = cache[index];
    if (cached && isMemoSame(cached, memo)) {
        return cached;
    }
    const ret = render();
    // shallow clone
    ret.memo = memo.slice();
    return (cache[index] = ret);
}
function isMemoSame(cached, memo) {
    const prev = cached.memo;
    if (prev.length != memo.length) {
        return false;
    }
    for (let i = 0; i < prev.length; i++) {
        if (hasChanged(prev[i], memo[i])) {
            return false;
        }
    }
    // make sure to let parent block track it when returning cached
    if (isBlockTreeEnabled > 0 && currentBlock) {
        currentBlock.push(cached);
    }
    return true;
}

// Core API ------------------------------------------------------------------
const version = "3.2.35";
const _ssrUtils = {
    createComponentInstance,
    setupComponent,
    renderComponentRoot,
    setCurrentRenderingInstance,
    isVNode,
    normalizeVNode
};
/**
 * SSR utils for \@vue/server-renderer. Only exposed in cjs builds.
 * @internal
 */
const ssrUtils = ((/* unused pure expression or super */ null && (_ssrUtils)) );
/**
 * @internal only exposed in compat builds
 */
const resolveFilter = null;
/**
 * @internal only exposed in compat builds.
 */
const compatUtils = (null);




/***/ }),

/***/ 963:
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "F8": () => (/* binding */ vShow),
/* harmony export */   "W3": () => (/* binding */ TransitionGroup),
/* harmony export */   "YZ": () => (/* binding */ vModelDynamic),
/* harmony export */   "nr": () => (/* binding */ vModelText),
/* harmony export */   "ri": () => (/* binding */ createApp),
/* harmony export */   "uT": () => (/* binding */ Transition)
/* harmony export */ });
/* unused harmony exports VueElement, createSSRApp, defineCustomElement, defineSSRCustomElement, hydrate, initDirectivesForSSR, render, useCssModule, useCssVars, vModelCheckbox, vModelRadio, vModelSelect, withKeys, withModifiers */
/* harmony import */ var _vue_shared__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(577);
/* harmony import */ var _vue_runtime_core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(252);
/* harmony import */ var _vue_runtime_core__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(262);




const svgNS = 'http://www.w3.org/2000/svg';
const doc = (typeof document !== 'undefined' ? document : null);
const templateContainer = doc && /*#__PURE__*/ doc.createElement('template');
const nodeOps = {
    insert: (child, parent, anchor) => {
        parent.insertBefore(child, anchor || null);
    },
    remove: child => {
        const parent = child.parentNode;
        if (parent) {
            parent.removeChild(child);
        }
    },
    createElement: (tag, isSVG, is, props) => {
        const el = isSVG
            ? doc.createElementNS(svgNS, tag)
            : doc.createElement(tag, is ? { is } : undefined);
        if (tag === 'select' && props && props.multiple != null) {
            el.setAttribute('multiple', props.multiple);
        }
        return el;
    },
    createText: text => doc.createTextNode(text),
    createComment: text => doc.createComment(text),
    setText: (node, text) => {
        node.nodeValue = text;
    },
    setElementText: (el, text) => {
        el.textContent = text;
    },
    parentNode: node => node.parentNode,
    nextSibling: node => node.nextSibling,
    querySelector: selector => doc.querySelector(selector),
    setScopeId(el, id) {
        el.setAttribute(id, '');
    },
    cloneNode(el) {
        const cloned = el.cloneNode(true);
        // #3072
        // - in `patchDOMProp`, we store the actual value in the `el._value` property.
        // - normally, elements using `:value` bindings will not be hoisted, but if
        //   the bound value is a constant, e.g. `:value="true"` - they do get
        //   hoisted.
        // - in production, hoisted nodes are cloned when subsequent inserts, but
        //   cloneNode() does not copy the custom property we attached.
        // - This may need to account for other custom DOM properties we attach to
        //   elements in addition to `_value` in the future.
        if (`_value` in el) {
            cloned._value = el._value;
        }
        return cloned;
    },
    // __UNSAFE__
    // Reason: innerHTML.
    // Static content here can only come from compiled templates.
    // As long as the user only uses trusted templates, this is safe.
    insertStaticContent(content, parent, anchor, isSVG, start, end) {
        // <parent> before | first ... last | anchor </parent>
        const before = anchor ? anchor.previousSibling : parent.lastChild;
        // #5308 can only take cached path if:
        // - has a single root node
        // - nextSibling info is still available
        if (start && (start === end || start.nextSibling)) {
            // cached
            while (true) {
                parent.insertBefore(start.cloneNode(true), anchor);
                if (start === end || !(start = start.nextSibling))
                    break;
            }
        }
        else {
            // fresh insert
            templateContainer.innerHTML = isSVG ? `<svg>${content}</svg>` : content;
            const template = templateContainer.content;
            if (isSVG) {
                // remove outer svg wrapper
                const wrapper = template.firstChild;
                while (wrapper.firstChild) {
                    template.appendChild(wrapper.firstChild);
                }
                template.removeChild(wrapper);
            }
            parent.insertBefore(template, anchor);
        }
        return [
            // first
            before ? before.nextSibling : parent.firstChild,
            // last
            anchor ? anchor.previousSibling : parent.lastChild
        ];
    }
};

// compiler should normalize class + :class bindings on the same element
// into a single binding ['staticClass', dynamic]
function patchClass(el, value, isSVG) {
    // directly setting className should be faster than setAttribute in theory
    // if this is an element during a transition, take the temporary transition
    // classes into account.
    const transitionClasses = el._vtc;
    if (transitionClasses) {
        value = (value ? [value, ...transitionClasses] : [...transitionClasses]).join(' ');
    }
    if (value == null) {
        el.removeAttribute('class');
    }
    else if (isSVG) {
        el.setAttribute('class', value);
    }
    else {
        el.className = value;
    }
}

function patchStyle(el, prev, next) {
    const style = el.style;
    const isCssString = (0,_vue_shared__WEBPACK_IMPORTED_MODULE_0__/* .isString */ .HD)(next);
    if (next && !isCssString) {
        for (const key in next) {
            setStyle(style, key, next[key]);
        }
        if (prev && !(0,_vue_shared__WEBPACK_IMPORTED_MODULE_0__/* .isString */ .HD)(prev)) {
            for (const key in prev) {
                if (next[key] == null) {
                    setStyle(style, key, '');
                }
            }
        }
    }
    else {
        const currentDisplay = style.display;
        if (isCssString) {
            if (prev !== next) {
                style.cssText = next;
            }
        }
        else if (prev) {
            el.removeAttribute('style');
        }
        // indicates that the `display` of the element is controlled by `v-show`,
        // so we always keep the current `display` value regardless of the `style`
        // value, thus handing over control to `v-show`.
        if ('_vod' in el) {
            style.display = currentDisplay;
        }
    }
}
const importantRE = /\s*!important$/;
function setStyle(style, name, val) {
    if ((0,_vue_shared__WEBPACK_IMPORTED_MODULE_0__/* .isArray */ .kJ)(val)) {
        val.forEach(v => setStyle(style, name, v));
    }
    else {
        if (val == null)
            val = '';
        if (name.startsWith('--')) {
            // custom property definition
            style.setProperty(name, val);
        }
        else {
            const prefixed = autoPrefix(style, name);
            if (importantRE.test(val)) {
                // !important
                style.setProperty((0,_vue_shared__WEBPACK_IMPORTED_MODULE_0__/* .hyphenate */ .rs)(prefixed), val.replace(importantRE, ''), 'important');
            }
            else {
                style[prefixed] = val;
            }
        }
    }
}
const prefixes = ['Webkit', 'Moz', 'ms'];
const prefixCache = {};
function autoPrefix(style, rawName) {
    const cached = prefixCache[rawName];
    if (cached) {
        return cached;
    }
    let name = (0,_vue_shared__WEBPACK_IMPORTED_MODULE_0__/* .camelize */ ._A)(rawName);
    if (name !== 'filter' && name in style) {
        return (prefixCache[rawName] = name);
    }
    name = (0,_vue_shared__WEBPACK_IMPORTED_MODULE_0__/* .capitalize */ .kC)(name);
    for (let i = 0; i < prefixes.length; i++) {
        const prefixed = prefixes[i] + name;
        if (prefixed in style) {
            return (prefixCache[rawName] = prefixed);
        }
    }
    return rawName;
}

const xlinkNS = 'http://www.w3.org/1999/xlink';
function patchAttr(el, key, value, isSVG, instance) {
    if (isSVG && key.startsWith('xlink:')) {
        if (value == null) {
            el.removeAttributeNS(xlinkNS, key.slice(6, key.length));
        }
        else {
            el.setAttributeNS(xlinkNS, key, value);
        }
    }
    else {
        // note we are only checking boolean attributes that don't have a
        // corresponding dom prop of the same name here.
        const isBoolean = (0,_vue_shared__WEBPACK_IMPORTED_MODULE_0__/* .isSpecialBooleanAttr */ .Pq)(key);
        if (value == null || (isBoolean && !(0,_vue_shared__WEBPACK_IMPORTED_MODULE_0__/* .includeBooleanAttr */ .yA)(value))) {
            el.removeAttribute(key);
        }
        else {
            el.setAttribute(key, isBoolean ? '' : value);
        }
    }
}

// __UNSAFE__
// functions. The user is responsible for using them with only trusted content.
function patchDOMProp(el, key, value, 
// the following args are passed only due to potential innerHTML/textContent
// overriding existing VNodes, in which case the old tree must be properly
// unmounted.
prevChildren, parentComponent, parentSuspense, unmountChildren) {
    if (key === 'innerHTML' || key === 'textContent') {
        if (prevChildren) {
            unmountChildren(prevChildren, parentComponent, parentSuspense);
        }
        el[key] = value == null ? '' : value;
        return;
    }
    if (key === 'value' &&
        el.tagName !== 'PROGRESS' &&
        // custom elements may use _value internally
        !el.tagName.includes('-')) {
        // store value as _value as well since
        // non-string values will be stringified.
        el._value = value;
        const newValue = value == null ? '' : value;
        if (el.value !== newValue ||
            // #4956: always set for OPTION elements because its value falls back to
            // textContent if no value attribute is present. And setting .value for
            // OPTION has no side effect
            el.tagName === 'OPTION') {
            el.value = newValue;
        }
        if (value == null) {
            el.removeAttribute(key);
        }
        return;
    }
    let needRemove = false;
    if (value === '' || value == null) {
        const type = typeof el[key];
        if (type === 'boolean') {
            // e.g. <select multiple> compiles to { multiple: '' }
            value = (0,_vue_shared__WEBPACK_IMPORTED_MODULE_0__/* .includeBooleanAttr */ .yA)(value);
        }
        else if (value == null && type === 'string') {
            // e.g. <div :id="null">
            value = '';
            needRemove = true;
        }
        else if (type === 'number') {
            // e.g. <img :width="null">
            // the value of some IDL attr must be greater than 0, e.g. input.size = 0 -> error
            value = 0;
            needRemove = true;
        }
    }
    // some properties perform value validation and throw,
    // some properties has getter, no setter, will error in 'use strict'
    // eg. <select :type="null"></select> <select :willValidate="null"></select>
    try {
        el[key] = value;
    }
    catch (e) {
        if ((false)) {}
    }
    needRemove && el.removeAttribute(key);
}

// Async edge case fix requires storing an event listener's attach timestamp.
const [_getNow, skipTimestampCheck] = /*#__PURE__*/ (() => {
    let _getNow = Date.now;
    let skipTimestampCheck = false;
    if (typeof window !== 'undefined') {
        // Determine what event timestamp the browser is using. Annoyingly, the
        // timestamp can either be hi-res (relative to page load) or low-res
        // (relative to UNIX epoch), so in order to compare time we have to use the
        // same timestamp type when saving the flush timestamp.
        if (Date.now() > document.createEvent('Event').timeStamp) {
            // if the low-res timestamp which is bigger than the event timestamp
            // (which is evaluated AFTER) it means the event is using a hi-res timestamp,
            // and we need to use the hi-res version for event listeners as well.
            _getNow = () => performance.now();
        }
        // #3485: Firefox <= 53 has incorrect Event.timeStamp implementation
        // and does not fire microtasks in between event propagation, so safe to exclude.
        const ffMatch = navigator.userAgent.match(/firefox\/(\d+)/i);
        skipTimestampCheck = !!(ffMatch && Number(ffMatch[1]) <= 53);
    }
    return [_getNow, skipTimestampCheck];
})();
// To avoid the overhead of repeatedly calling performance.now(), we cache
// and use the same timestamp for all event listeners attached in the same tick.
let cachedNow = 0;
const p = /*#__PURE__*/ Promise.resolve();
const reset = () => {
    cachedNow = 0;
};
const getNow = () => cachedNow || (p.then(reset), (cachedNow = _getNow()));
function addEventListener(el, event, handler, options) {
    el.addEventListener(event, handler, options);
}
function removeEventListener(el, event, handler, options) {
    el.removeEventListener(event, handler, options);
}
function patchEvent(el, rawName, prevValue, nextValue, instance = null) {
    // vei = vue event invokers
    const invokers = el._vei || (el._vei = {});
    const existingInvoker = invokers[rawName];
    if (nextValue && existingInvoker) {
        // patch
        existingInvoker.value = nextValue;
    }
    else {
        const [name, options] = parseName(rawName);
        if (nextValue) {
            // add
            const invoker = (invokers[rawName] = createInvoker(nextValue, instance));
            addEventListener(el, name, invoker, options);
        }
        else if (existingInvoker) {
            // remove
            removeEventListener(el, name, existingInvoker, options);
            invokers[rawName] = undefined;
        }
    }
}
const optionsModifierRE = /(?:Once|Passive|Capture)$/;
function parseName(name) {
    let options;
    if (optionsModifierRE.test(name)) {
        options = {};
        let m;
        while ((m = name.match(optionsModifierRE))) {
            name = name.slice(0, name.length - m[0].length);
            options[m[0].toLowerCase()] = true;
        }
    }
    return [(0,_vue_shared__WEBPACK_IMPORTED_MODULE_0__/* .hyphenate */ .rs)(name.slice(2)), options];
}
function createInvoker(initialValue, instance) {
    const invoker = (e) => {
        // async edge case #6566: inner click event triggers patch, event handler
        // attached to outer element during patch, and triggered again. This
        // happens because browsers fire microtask ticks between event propagation.
        // the solution is simple: we save the timestamp when a handler is attached,
        // and the handler would only fire if the event passed to it was fired
        // AFTER it was attached.
        const timeStamp = e.timeStamp || _getNow();
        if (skipTimestampCheck || timeStamp >= invoker.attached - 1) {
            (0,_vue_runtime_core__WEBPACK_IMPORTED_MODULE_1__/* .callWithAsyncErrorHandling */ .$d)(patchStopImmediatePropagation(e, invoker.value), instance, 5 /* NATIVE_EVENT_HANDLER */, [e]);
        }
    };
    invoker.value = initialValue;
    invoker.attached = getNow();
    return invoker;
}
function patchStopImmediatePropagation(e, value) {
    if ((0,_vue_shared__WEBPACK_IMPORTED_MODULE_0__/* .isArray */ .kJ)(value)) {
        const originalStop = e.stopImmediatePropagation;
        e.stopImmediatePropagation = () => {
            originalStop.call(e);
            e._stopped = true;
        };
        return value.map(fn => (e) => !e._stopped && fn && fn(e));
    }
    else {
        return value;
    }
}

const nativeOnRE = /^on[a-z]/;
const patchProp = (el, key, prevValue, nextValue, isSVG = false, prevChildren, parentComponent, parentSuspense, unmountChildren) => {
    if (key === 'class') {
        patchClass(el, nextValue, isSVG);
    }
    else if (key === 'style') {
        patchStyle(el, prevValue, nextValue);
    }
    else if ((0,_vue_shared__WEBPACK_IMPORTED_MODULE_0__/* .isOn */ .F7)(key)) {
        // ignore v-model listeners
        if (!(0,_vue_shared__WEBPACK_IMPORTED_MODULE_0__/* .isModelListener */ .tR)(key)) {
            patchEvent(el, key, prevValue, nextValue, parentComponent);
        }
    }
    else if (key[0] === '.'
        ? ((key = key.slice(1)), true)
        : key[0] === '^'
            ? ((key = key.slice(1)), false)
            : shouldSetAsProp(el, key, nextValue, isSVG)) {
        patchDOMProp(el, key, nextValue, prevChildren, parentComponent, parentSuspense, unmountChildren);
    }
    else {
        // special case for <input v-model type="checkbox"> with
        // :true-value & :false-value
        // store value as dom properties since non-string values will be
        // stringified.
        if (key === 'true-value') {
            el._trueValue = nextValue;
        }
        else if (key === 'false-value') {
            el._falseValue = nextValue;
        }
        patchAttr(el, key, nextValue, isSVG);
    }
};
function shouldSetAsProp(el, key, value, isSVG) {
    if (isSVG) {
        // most keys must be set as attribute on svg elements to work
        // ...except innerHTML & textContent
        if (key === 'innerHTML' || key === 'textContent') {
            return true;
        }
        // or native onclick with function values
        if (key in el && nativeOnRE.test(key) && (0,_vue_shared__WEBPACK_IMPORTED_MODULE_0__/* .isFunction */ .mf)(value)) {
            return true;
        }
        return false;
    }
    // these are enumerated attrs, however their corresponding DOM properties
    // are actually booleans - this leads to setting it with a string "false"
    // value leading it to be coerced to `true`, so we need to always treat
    // them as attributes.
    // Note that `contentEditable` doesn't have this problem: its DOM
    // property is also enumerated string values.
    if (key === 'spellcheck' || key === 'draggable' || key === 'translate') {
        return false;
    }
    // #1787, #2840 form property on form elements is readonly and must be set as
    // attribute.
    if (key === 'form') {
        return false;
    }
    // #1526 <input list> must be set as attribute
    if (key === 'list' && el.tagName === 'INPUT') {
        return false;
    }
    // #2766 <textarea type> must be set as attribute
    if (key === 'type' && el.tagName === 'TEXTAREA') {
        return false;
    }
    // native onclick with string value, must be set as attribute
    if (nativeOnRE.test(key) && (0,_vue_shared__WEBPACK_IMPORTED_MODULE_0__/* .isString */ .HD)(value)) {
        return false;
    }
    return key in el;
}

function defineCustomElement(options, hydrate) {
    const Comp = defineComponent(options);
    class VueCustomElement extends VueElement {
        constructor(initialProps) {
            super(Comp, initialProps, hydrate);
        }
    }
    VueCustomElement.def = Comp;
    return VueCustomElement;
}
const defineSSRCustomElement = ((options) => {
    // @ts-ignore
    return defineCustomElement(options, hydrate);
});
const BaseClass = (typeof HTMLElement !== 'undefined' ? HTMLElement : class {
});
class VueElement extends (/* unused pure expression or super */ null && (BaseClass)) {
    constructor(_def, _props = {}, hydrate) {
        super();
        this._def = _def;
        this._props = _props;
        /**
         * @internal
         */
        this._instance = null;
        this._connected = false;
        this._resolved = false;
        this._numberProps = null;
        if (this.shadowRoot && hydrate) {
            hydrate(this._createVNode(), this.shadowRoot);
        }
        else {
            if (false) {}
            this.attachShadow({ mode: 'open' });
        }
    }
    connectedCallback() {
        this._connected = true;
        if (!this._instance) {
            this._resolveDef();
        }
    }
    disconnectedCallback() {
        this._connected = false;
        nextTick(() => {
            if (!this._connected) {
                render(null, this.shadowRoot);
                this._instance = null;
            }
        });
    }
    /**
     * resolve inner component definition (handle possible async component)
     */
    _resolveDef() {
        if (this._resolved) {
            return;
        }
        this._resolved = true;
        // set initial attrs
        for (let i = 0; i < this.attributes.length; i++) {
            this._setAttr(this.attributes[i].name);
        }
        // watch future attr changes
        new MutationObserver(mutations => {
            for (const m of mutations) {
                this._setAttr(m.attributeName);
            }
        }).observe(this, { attributes: true });
        const resolve = (def) => {
            const { props, styles } = def;
            const hasOptions = !isArray(props);
            const rawKeys = props ? (hasOptions ? Object.keys(props) : props) : [];
            // cast Number-type props set before resolve
            let numberProps;
            if (hasOptions) {
                for (const key in this._props) {
                    const opt = props[key];
                    if (opt === Number || (opt && opt.type === Number)) {
                        this._props[key] = toNumber(this._props[key]);
                        (numberProps || (numberProps = Object.create(null)))[key] = true;
                    }
                }
            }
            this._numberProps = numberProps;
            // check if there are props set pre-upgrade or connect
            for (const key of Object.keys(this)) {
                if (key[0] !== '_') {
                    this._setProp(key, this[key], true, false);
                }
            }
            // defining getter/setters on prototype
            for (const key of rawKeys.map(camelize$1)) {
                Object.defineProperty(this, key, {
                    get() {
                        return this._getProp(key);
                    },
                    set(val) {
                        this._setProp(key, val);
                    }
                });
            }
            // apply CSS
            this._applyStyles(styles);
            // initial render
            this._update();
        };
        const asyncDef = this._def.__asyncLoader;
        if (asyncDef) {
            asyncDef().then(resolve);
        }
        else {
            resolve(this._def);
        }
    }
    _setAttr(key) {
        let value = this.getAttribute(key);
        if (this._numberProps && this._numberProps[key]) {
            value = toNumber(value);
        }
        this._setProp(camelize$1(key), value, false);
    }
    /**
     * @internal
     */
    _getProp(key) {
        return this._props[key];
    }
    /**
     * @internal
     */
    _setProp(key, val, shouldReflect = true, shouldUpdate = true) {
        if (val !== this._props[key]) {
            this._props[key] = val;
            if (shouldUpdate && this._instance) {
                this._update();
            }
            // reflect
            if (shouldReflect) {
                if (val === true) {
                    this.setAttribute(hyphenate(key), '');
                }
                else if (typeof val === 'string' || typeof val === 'number') {
                    this.setAttribute(hyphenate(key), val + '');
                }
                else if (!val) {
                    this.removeAttribute(hyphenate(key));
                }
            }
        }
    }
    _update() {
        render(this._createVNode(), this.shadowRoot);
    }
    _createVNode() {
        const vnode = createVNode(this._def, extend({}, this._props));
        if (!this._instance) {
            vnode.ce = instance => {
                this._instance = instance;
                instance.isCE = true;
                // HMR
                if ((false)) {}
                // intercept emit
                instance.emit = (event, ...args) => {
                    this.dispatchEvent(new CustomEvent(event, {
                        detail: args
                    }));
                };
                // locate nearest Vue custom element parent for provide/inject
                let parent = this;
                while ((parent =
                    parent && (parent.parentNode || parent.host))) {
                    if (parent instanceof VueElement) {
                        instance.parent = parent._instance;
                        break;
                    }
                }
            };
        }
        return vnode;
    }
    _applyStyles(styles) {
        if (styles) {
            styles.forEach(css => {
                const s = document.createElement('style');
                s.textContent = css;
                this.shadowRoot.appendChild(s);
                // record for HMR
                if ((false)) {}
            });
        }
    }
}

function useCssModule(name = '$style') {
    /* istanbul ignore else */
    {
        const instance = getCurrentInstance();
        if (!instance) {
            ( false) && 0;
            return EMPTY_OBJ;
        }
        const modules = instance.type.__cssModules;
        if (!modules) {
            ( false) && 0;
            return EMPTY_OBJ;
        }
        const mod = modules[name];
        if (!mod) {
            ( false) &&
                0;
            return EMPTY_OBJ;
        }
        return mod;
    }
}

/**
 * Runtime helper for SFC's CSS variable injection feature.
 * @private
 */
function useCssVars(getter) {
    const instance = getCurrentInstance();
    /* istanbul ignore next */
    if (!instance) {
        ( false) &&
            0;
        return;
    }
    const setVars = () => setVarsOnVNode(instance.subTree, getter(instance.proxy));
    watchPostEffect(setVars);
    onMounted(() => {
        const ob = new MutationObserver(setVars);
        ob.observe(instance.subTree.el.parentNode, { childList: true });
        onUnmounted(() => ob.disconnect());
    });
}
function setVarsOnVNode(vnode, vars) {
    if (vnode.shapeFlag & 128 /* SUSPENSE */) {
        const suspense = vnode.suspense;
        vnode = suspense.activeBranch;
        if (suspense.pendingBranch && !suspense.isHydrating) {
            suspense.effects.push(() => {
                setVarsOnVNode(suspense.activeBranch, vars);
            });
        }
    }
    // drill down HOCs until it's a non-component vnode
    while (vnode.component) {
        vnode = vnode.component.subTree;
    }
    if (vnode.shapeFlag & 1 /* ELEMENT */ && vnode.el) {
        setVarsOnNode(vnode.el, vars);
    }
    else if (vnode.type === Fragment) {
        vnode.children.forEach(c => setVarsOnVNode(c, vars));
    }
    else if (vnode.type === Static) {
        let { el, anchor } = vnode;
        while (el) {
            setVarsOnNode(el, vars);
            if (el === anchor)
                break;
            el = el.nextSibling;
        }
    }
}
function setVarsOnNode(el, vars) {
    if (el.nodeType === 1) {
        const style = el.style;
        for (const key in vars) {
            style.setProperty(`--${key}`, vars[key]);
        }
    }
}

const TRANSITION = 'transition';
const ANIMATION = 'animation';
// DOM Transition is a higher-order-component based on the platform-agnostic
// base Transition component, with DOM-specific logic.
const Transition = (props, { slots }) => (0,_vue_runtime_core__WEBPACK_IMPORTED_MODULE_1__.h)(_vue_runtime_core__WEBPACK_IMPORTED_MODULE_1__/* .BaseTransition */ .P$, resolveTransitionProps(props), slots);
Transition.displayName = 'Transition';
const DOMTransitionPropsValidators = {
    name: String,
    type: String,
    css: {
        type: Boolean,
        default: true
    },
    duration: [String, Number, Object],
    enterFromClass: String,
    enterActiveClass: String,
    enterToClass: String,
    appearFromClass: String,
    appearActiveClass: String,
    appearToClass: String,
    leaveFromClass: String,
    leaveActiveClass: String,
    leaveToClass: String
};
const TransitionPropsValidators = (Transition.props =
    /*#__PURE__*/ (0,_vue_shared__WEBPACK_IMPORTED_MODULE_0__/* .extend */ .l7)({}, _vue_runtime_core__WEBPACK_IMPORTED_MODULE_1__/* .BaseTransition.props */ .P$.props, DOMTransitionPropsValidators));
/**
 * #3227 Incoming hooks may be merged into arrays when wrapping Transition
 * with custom HOCs.
 */
const callHook = (hook, args = []) => {
    if ((0,_vue_shared__WEBPACK_IMPORTED_MODULE_0__/* .isArray */ .kJ)(hook)) {
        hook.forEach(h => h(...args));
    }
    else if (hook) {
        hook(...args);
    }
};
/**
 * Check if a hook expects a callback (2nd arg), which means the user
 * intends to explicitly control the end of the transition.
 */
const hasExplicitCallback = (hook) => {
    return hook
        ? (0,_vue_shared__WEBPACK_IMPORTED_MODULE_0__/* .isArray */ .kJ)(hook)
            ? hook.some(h => h.length > 1)
            : hook.length > 1
        : false;
};
function resolveTransitionProps(rawProps) {
    const baseProps = {};
    for (const key in rawProps) {
        if (!(key in DOMTransitionPropsValidators)) {
            baseProps[key] = rawProps[key];
        }
    }
    if (rawProps.css === false) {
        return baseProps;
    }
    const { name = 'v', type, duration, enterFromClass = `${name}-enter-from`, enterActiveClass = `${name}-enter-active`, enterToClass = `${name}-enter-to`, appearFromClass = enterFromClass, appearActiveClass = enterActiveClass, appearToClass = enterToClass, leaveFromClass = `${name}-leave-from`, leaveActiveClass = `${name}-leave-active`, leaveToClass = `${name}-leave-to` } = rawProps;
    const durations = normalizeDuration(duration);
    const enterDuration = durations && durations[0];
    const leaveDuration = durations && durations[1];
    const { onBeforeEnter, onEnter, onEnterCancelled, onLeave, onLeaveCancelled, onBeforeAppear = onBeforeEnter, onAppear = onEnter, onAppearCancelled = onEnterCancelled } = baseProps;
    const finishEnter = (el, isAppear, done) => {
        removeTransitionClass(el, isAppear ? appearToClass : enterToClass);
        removeTransitionClass(el, isAppear ? appearActiveClass : enterActiveClass);
        done && done();
    };
    let isLeaving = false;
    const finishLeave = (el, done) => {
        isLeaving = false;
        removeTransitionClass(el, leaveFromClass);
        removeTransitionClass(el, leaveToClass);
        removeTransitionClass(el, leaveActiveClass);
        done && done();
    };
    const makeEnterHook = (isAppear) => {
        return (el, done) => {
            const hook = isAppear ? onAppear : onEnter;
            const resolve = () => finishEnter(el, isAppear, done);
            callHook(hook, [el, resolve]);
            nextFrame(() => {
                removeTransitionClass(el, isAppear ? appearFromClass : enterFromClass);
                addTransitionClass(el, isAppear ? appearToClass : enterToClass);
                if (!hasExplicitCallback(hook)) {
                    whenTransitionEnds(el, type, enterDuration, resolve);
                }
            });
        };
    };
    return (0,_vue_shared__WEBPACK_IMPORTED_MODULE_0__/* .extend */ .l7)(baseProps, {
        onBeforeEnter(el) {
            callHook(onBeforeEnter, [el]);
            addTransitionClass(el, enterFromClass);
            addTransitionClass(el, enterActiveClass);
        },
        onBeforeAppear(el) {
            callHook(onBeforeAppear, [el]);
            addTransitionClass(el, appearFromClass);
            addTransitionClass(el, appearActiveClass);
        },
        onEnter: makeEnterHook(false),
        onAppear: makeEnterHook(true),
        onLeave(el, done) {
            isLeaving = true;
            const resolve = () => finishLeave(el, done);
            addTransitionClass(el, leaveFromClass);
            // force reflow so *-leave-from classes immediately take effect (#2593)
            forceReflow();
            addTransitionClass(el, leaveActiveClass);
            nextFrame(() => {
                if (!isLeaving) {
                    // cancelled
                    return;
                }
                removeTransitionClass(el, leaveFromClass);
                addTransitionClass(el, leaveToClass);
                if (!hasExplicitCallback(onLeave)) {
                    whenTransitionEnds(el, type, leaveDuration, resolve);
                }
            });
            callHook(onLeave, [el, resolve]);
        },
        onEnterCancelled(el) {
            finishEnter(el, false);
            callHook(onEnterCancelled, [el]);
        },
        onAppearCancelled(el) {
            finishEnter(el, true);
            callHook(onAppearCancelled, [el]);
        },
        onLeaveCancelled(el) {
            finishLeave(el);
            callHook(onLeaveCancelled, [el]);
        }
    });
}
function normalizeDuration(duration) {
    if (duration == null) {
        return null;
    }
    else if ((0,_vue_shared__WEBPACK_IMPORTED_MODULE_0__/* .isObject */ .Kn)(duration)) {
        return [NumberOf(duration.enter), NumberOf(duration.leave)];
    }
    else {
        const n = NumberOf(duration);
        return [n, n];
    }
}
function NumberOf(val) {
    const res = (0,_vue_shared__WEBPACK_IMPORTED_MODULE_0__/* .toNumber */ .He)(val);
    if ((false))
        {}
    return res;
}
function validateDuration(val) {
    if (typeof val !== 'number') {
        warn(`<transition> explicit duration is not a valid number - ` +
            `got ${JSON.stringify(val)}.`);
    }
    else if (isNaN(val)) {
        warn(`<transition> explicit duration is NaN - ` +
            'the duration expression might be incorrect.');
    }
}
function addTransitionClass(el, cls) {
    cls.split(/\s+/).forEach(c => c && el.classList.add(c));
    (el._vtc ||
        (el._vtc = new Set())).add(cls);
}
function removeTransitionClass(el, cls) {
    cls.split(/\s+/).forEach(c => c && el.classList.remove(c));
    const { _vtc } = el;
    if (_vtc) {
        _vtc.delete(cls);
        if (!_vtc.size) {
            el._vtc = undefined;
        }
    }
}
function nextFrame(cb) {
    requestAnimationFrame(() => {
        requestAnimationFrame(cb);
    });
}
let endId = 0;
function whenTransitionEnds(el, expectedType, explicitTimeout, resolve) {
    const id = (el._endId = ++endId);
    const resolveIfNotStale = () => {
        if (id === el._endId) {
            resolve();
        }
    };
    if (explicitTimeout) {
        return setTimeout(resolveIfNotStale, explicitTimeout);
    }
    const { type, timeout, propCount } = getTransitionInfo(el, expectedType);
    if (!type) {
        return resolve();
    }
    const endEvent = type + 'end';
    let ended = 0;
    const end = () => {
        el.removeEventListener(endEvent, onEnd);
        resolveIfNotStale();
    };
    const onEnd = (e) => {
        if (e.target === el && ++ended >= propCount) {
            end();
        }
    };
    setTimeout(() => {
        if (ended < propCount) {
            end();
        }
    }, timeout + 1);
    el.addEventListener(endEvent, onEnd);
}
function getTransitionInfo(el, expectedType) {
    const styles = window.getComputedStyle(el);
    // JSDOM may return undefined for transition properties
    const getStyleProperties = (key) => (styles[key] || '').split(', ');
    const transitionDelays = getStyleProperties(TRANSITION + 'Delay');
    const transitionDurations = getStyleProperties(TRANSITION + 'Duration');
    const transitionTimeout = getTimeout(transitionDelays, transitionDurations);
    const animationDelays = getStyleProperties(ANIMATION + 'Delay');
    const animationDurations = getStyleProperties(ANIMATION + 'Duration');
    const animationTimeout = getTimeout(animationDelays, animationDurations);
    let type = null;
    let timeout = 0;
    let propCount = 0;
    /* istanbul ignore if */
    if (expectedType === TRANSITION) {
        if (transitionTimeout > 0) {
            type = TRANSITION;
            timeout = transitionTimeout;
            propCount = transitionDurations.length;
        }
    }
    else if (expectedType === ANIMATION) {
        if (animationTimeout > 0) {
            type = ANIMATION;
            timeout = animationTimeout;
            propCount = animationDurations.length;
        }
    }
    else {
        timeout = Math.max(transitionTimeout, animationTimeout);
        type =
            timeout > 0
                ? transitionTimeout > animationTimeout
                    ? TRANSITION
                    : ANIMATION
                : null;
        propCount = type
            ? type === TRANSITION
                ? transitionDurations.length
                : animationDurations.length
            : 0;
    }
    const hasTransform = type === TRANSITION &&
        /\b(transform|all)(,|$)/.test(styles[TRANSITION + 'Property']);
    return {
        type,
        timeout,
        propCount,
        hasTransform
    };
}
function getTimeout(delays, durations) {
    while (delays.length < durations.length) {
        delays = delays.concat(delays);
    }
    return Math.max(...durations.map((d, i) => toMs(d) + toMs(delays[i])));
}
// Old versions of Chromium (below 61.0.3163.100) formats floating pointer
// numbers in a locale-dependent way, using a comma instead of a dot.
// If comma is not replaced with a dot, the input will be rounded down
// (i.e. acting as a floor function) causing unexpected behaviors
function toMs(s) {
    return Number(s.slice(0, -1).replace(',', '.')) * 1000;
}
// synchronously force layout to put elements into a certain state
function forceReflow() {
    return document.body.offsetHeight;
}

const positionMap = new WeakMap();
const newPositionMap = new WeakMap();
const TransitionGroupImpl = {
    name: 'TransitionGroup',
    props: /*#__PURE__*/ (0,_vue_shared__WEBPACK_IMPORTED_MODULE_0__/* .extend */ .l7)({}, TransitionPropsValidators, {
        tag: String,
        moveClass: String
    }),
    setup(props, { slots }) {
        const instance = (0,_vue_runtime_core__WEBPACK_IMPORTED_MODULE_1__/* .getCurrentInstance */ .FN)();
        const state = (0,_vue_runtime_core__WEBPACK_IMPORTED_MODULE_1__/* .useTransitionState */ .Y8)();
        let prevChildren;
        let children;
        (0,_vue_runtime_core__WEBPACK_IMPORTED_MODULE_1__/* .onUpdated */ .ic)(() => {
            // children is guaranteed to exist after initial render
            if (!prevChildren.length) {
                return;
            }
            const moveClass = props.moveClass || `${props.name || 'v'}-move`;
            if (!hasCSSTransform(prevChildren[0].el, instance.vnode.el, moveClass)) {
                return;
            }
            // we divide the work into three loops to avoid mixing DOM reads and writes
            // in each iteration - which helps prevent layout thrashing.
            prevChildren.forEach(callPendingCbs);
            prevChildren.forEach(recordPosition);
            const movedChildren = prevChildren.filter(applyTranslation);
            // force reflow to put everything in position
            forceReflow();
            movedChildren.forEach(c => {
                const el = c.el;
                const style = el.style;
                addTransitionClass(el, moveClass);
                style.transform = style.webkitTransform = style.transitionDuration = '';
                const cb = (el._moveCb = (e) => {
                    if (e && e.target !== el) {
                        return;
                    }
                    if (!e || /transform$/.test(e.propertyName)) {
                        el.removeEventListener('transitionend', cb);
                        el._moveCb = null;
                        removeTransitionClass(el, moveClass);
                    }
                });
                el.addEventListener('transitionend', cb);
            });
        });
        return () => {
            const rawProps = (0,_vue_runtime_core__WEBPACK_IMPORTED_MODULE_2__/* .toRaw */ .IU)(props);
            const cssTransitionProps = resolveTransitionProps(rawProps);
            let tag = rawProps.tag || _vue_runtime_core__WEBPACK_IMPORTED_MODULE_1__/* .Fragment */ .HY;
            prevChildren = children;
            children = slots.default ? (0,_vue_runtime_core__WEBPACK_IMPORTED_MODULE_1__/* .getTransitionRawChildren */ .Q6)(slots.default()) : [];
            for (let i = 0; i < children.length; i++) {
                const child = children[i];
                if (child.key != null) {
                    (0,_vue_runtime_core__WEBPACK_IMPORTED_MODULE_1__/* .setTransitionHooks */ .nK)(child, (0,_vue_runtime_core__WEBPACK_IMPORTED_MODULE_1__/* .resolveTransitionHooks */ .U2)(child, cssTransitionProps, state, instance));
                }
                else if ((false)) {}
            }
            if (prevChildren) {
                for (let i = 0; i < prevChildren.length; i++) {
                    const child = prevChildren[i];
                    (0,_vue_runtime_core__WEBPACK_IMPORTED_MODULE_1__/* .setTransitionHooks */ .nK)(child, (0,_vue_runtime_core__WEBPACK_IMPORTED_MODULE_1__/* .resolveTransitionHooks */ .U2)(child, cssTransitionProps, state, instance));
                    positionMap.set(child, child.el.getBoundingClientRect());
                }
            }
            return (0,_vue_runtime_core__WEBPACK_IMPORTED_MODULE_1__/* .createVNode */ .Wm)(tag, null, children);
        };
    }
};
const TransitionGroup = TransitionGroupImpl;
function callPendingCbs(c) {
    const el = c.el;
    if (el._moveCb) {
        el._moveCb();
    }
    if (el._enterCb) {
        el._enterCb();
    }
}
function recordPosition(c) {
    newPositionMap.set(c, c.el.getBoundingClientRect());
}
function applyTranslation(c) {
    const oldPos = positionMap.get(c);
    const newPos = newPositionMap.get(c);
    const dx = oldPos.left - newPos.left;
    const dy = oldPos.top - newPos.top;
    if (dx || dy) {
        const s = c.el.style;
        s.transform = s.webkitTransform = `translate(${dx}px,${dy}px)`;
        s.transitionDuration = '0s';
        return c;
    }
}
function hasCSSTransform(el, root, moveClass) {
    // Detect whether an element with the move class applied has
    // CSS transitions. Since the element may be inside an entering
    // transition at this very moment, we make a clone of it and remove
    // all other transition classes applied to ensure only the move class
    // is applied.
    const clone = el.cloneNode();
    if (el._vtc) {
        el._vtc.forEach(cls => {
            cls.split(/\s+/).forEach(c => c && clone.classList.remove(c));
        });
    }
    moveClass.split(/\s+/).forEach(c => c && clone.classList.add(c));
    clone.style.display = 'none';
    const container = (root.nodeType === 1 ? root : root.parentNode);
    container.appendChild(clone);
    const { hasTransform } = getTransitionInfo(clone);
    container.removeChild(clone);
    return hasTransform;
}

const getModelAssigner = (vnode) => {
    const fn = vnode.props['onUpdate:modelValue'] ||
        (false );
    return (0,_vue_shared__WEBPACK_IMPORTED_MODULE_0__/* .isArray */ .kJ)(fn) ? value => (0,_vue_shared__WEBPACK_IMPORTED_MODULE_0__/* .invokeArrayFns */ .ir)(fn, value) : fn;
};
function onCompositionStart(e) {
    e.target.composing = true;
}
function onCompositionEnd(e) {
    const target = e.target;
    if (target.composing) {
        target.composing = false;
        target.dispatchEvent(new Event('input'));
    }
}
// We are exporting the v-model runtime directly as vnode hooks so that it can
// be tree-shaken in case v-model is never used.
const vModelText = {
    created(el, { modifiers: { lazy, trim, number } }, vnode) {
        el._assign = getModelAssigner(vnode);
        const castToNumber = number || (vnode.props && vnode.props.type === 'number');
        addEventListener(el, lazy ? 'change' : 'input', e => {
            if (e.target.composing)
                return;
            let domValue = el.value;
            if (trim) {
                domValue = domValue.trim();
            }
            if (castToNumber) {
                domValue = (0,_vue_shared__WEBPACK_IMPORTED_MODULE_0__/* .toNumber */ .He)(domValue);
            }
            el._assign(domValue);
        });
        if (trim) {
            addEventListener(el, 'change', () => {
                el.value = el.value.trim();
            });
        }
        if (!lazy) {
            addEventListener(el, 'compositionstart', onCompositionStart);
            addEventListener(el, 'compositionend', onCompositionEnd);
            // Safari < 10.2 & UIWebView doesn't fire compositionend when
            // switching focus before confirming composition choice
            // this also fixes the issue where some browsers e.g. iOS Chrome
            // fires "change" instead of "input" on autocomplete.
            addEventListener(el, 'change', onCompositionEnd);
        }
    },
    // set value on mounted so it's after min/max for type="range"
    mounted(el, { value }) {
        el.value = value == null ? '' : value;
    },
    beforeUpdate(el, { value, modifiers: { lazy, trim, number } }, vnode) {
        el._assign = getModelAssigner(vnode);
        // avoid clearing unresolved text. #2302
        if (el.composing)
            return;
        if (document.activeElement === el && el.type !== 'range') {
            if (lazy) {
                return;
            }
            if (trim && el.value.trim() === value) {
                return;
            }
            if ((number || el.type === 'number') && (0,_vue_shared__WEBPACK_IMPORTED_MODULE_0__/* .toNumber */ .He)(el.value) === value) {
                return;
            }
        }
        const newValue = value == null ? '' : value;
        if (el.value !== newValue) {
            el.value = newValue;
        }
    }
};
const vModelCheckbox = {
    // #4096 array checkboxes need to be deep traversed
    deep: true,
    created(el, _, vnode) {
        el._assign = getModelAssigner(vnode);
        addEventListener(el, 'change', () => {
            const modelValue = el._modelValue;
            const elementValue = getValue(el);
            const checked = el.checked;
            const assign = el._assign;
            if ((0,_vue_shared__WEBPACK_IMPORTED_MODULE_0__/* .isArray */ .kJ)(modelValue)) {
                const index = (0,_vue_shared__WEBPACK_IMPORTED_MODULE_0__/* .looseIndexOf */ .hq)(modelValue, elementValue);
                const found = index !== -1;
                if (checked && !found) {
                    assign(modelValue.concat(elementValue));
                }
                else if (!checked && found) {
                    const filtered = [...modelValue];
                    filtered.splice(index, 1);
                    assign(filtered);
                }
            }
            else if ((0,_vue_shared__WEBPACK_IMPORTED_MODULE_0__/* .isSet */ .DM)(modelValue)) {
                const cloned = new Set(modelValue);
                if (checked) {
                    cloned.add(elementValue);
                }
                else {
                    cloned.delete(elementValue);
                }
                assign(cloned);
            }
            else {
                assign(getCheckboxValue(el, checked));
            }
        });
    },
    // set initial checked on mount to wait for true-value/false-value
    mounted: setChecked,
    beforeUpdate(el, binding, vnode) {
        el._assign = getModelAssigner(vnode);
        setChecked(el, binding, vnode);
    }
};
function setChecked(el, { value, oldValue }, vnode) {
    el._modelValue = value;
    if ((0,_vue_shared__WEBPACK_IMPORTED_MODULE_0__/* .isArray */ .kJ)(value)) {
        el.checked = (0,_vue_shared__WEBPACK_IMPORTED_MODULE_0__/* .looseIndexOf */ .hq)(value, vnode.props.value) > -1;
    }
    else if ((0,_vue_shared__WEBPACK_IMPORTED_MODULE_0__/* .isSet */ .DM)(value)) {
        el.checked = value.has(vnode.props.value);
    }
    else if (value !== oldValue) {
        el.checked = (0,_vue_shared__WEBPACK_IMPORTED_MODULE_0__/* .looseEqual */ .WV)(value, getCheckboxValue(el, true));
    }
}
const vModelRadio = {
    created(el, { value }, vnode) {
        el.checked = (0,_vue_shared__WEBPACK_IMPORTED_MODULE_0__/* .looseEqual */ .WV)(value, vnode.props.value);
        el._assign = getModelAssigner(vnode);
        addEventListener(el, 'change', () => {
            el._assign(getValue(el));
        });
    },
    beforeUpdate(el, { value, oldValue }, vnode) {
        el._assign = getModelAssigner(vnode);
        if (value !== oldValue) {
            el.checked = (0,_vue_shared__WEBPACK_IMPORTED_MODULE_0__/* .looseEqual */ .WV)(value, vnode.props.value);
        }
    }
};
const vModelSelect = {
    // <select multiple> value need to be deep traversed
    deep: true,
    created(el, { value, modifiers: { number } }, vnode) {
        const isSetModel = (0,_vue_shared__WEBPACK_IMPORTED_MODULE_0__/* .isSet */ .DM)(value);
        addEventListener(el, 'change', () => {
            const selectedVal = Array.prototype.filter
                .call(el.options, (o) => o.selected)
                .map((o) => number ? (0,_vue_shared__WEBPACK_IMPORTED_MODULE_0__/* .toNumber */ .He)(getValue(o)) : getValue(o));
            el._assign(el.multiple
                ? isSetModel
                    ? new Set(selectedVal)
                    : selectedVal
                : selectedVal[0]);
        });
        el._assign = getModelAssigner(vnode);
    },
    // set value in mounted & updated because <select> relies on its children
    // <option>s.
    mounted(el, { value }) {
        setSelected(el, value);
    },
    beforeUpdate(el, _binding, vnode) {
        el._assign = getModelAssigner(vnode);
    },
    updated(el, { value }) {
        setSelected(el, value);
    }
};
function setSelected(el, value) {
    const isMultiple = el.multiple;
    if (isMultiple && !(0,_vue_shared__WEBPACK_IMPORTED_MODULE_0__/* .isArray */ .kJ)(value) && !(0,_vue_shared__WEBPACK_IMPORTED_MODULE_0__/* .isSet */ .DM)(value)) {
        ( false) &&
            0;
        return;
    }
    for (let i = 0, l = el.options.length; i < l; i++) {
        const option = el.options[i];
        const optionValue = getValue(option);
        if (isMultiple) {
            if ((0,_vue_shared__WEBPACK_IMPORTED_MODULE_0__/* .isArray */ .kJ)(value)) {
                option.selected = (0,_vue_shared__WEBPACK_IMPORTED_MODULE_0__/* .looseIndexOf */ .hq)(value, optionValue) > -1;
            }
            else {
                option.selected = value.has(optionValue);
            }
        }
        else {
            if ((0,_vue_shared__WEBPACK_IMPORTED_MODULE_0__/* .looseEqual */ .WV)(getValue(option), value)) {
                if (el.selectedIndex !== i)
                    el.selectedIndex = i;
                return;
            }
        }
    }
    if (!isMultiple && el.selectedIndex !== -1) {
        el.selectedIndex = -1;
    }
}
// retrieve raw value set via :value bindings
function getValue(el) {
    return '_value' in el ? el._value : el.value;
}
// retrieve raw value for true-value and false-value set via :true-value or :false-value bindings
function getCheckboxValue(el, checked) {
    const key = checked ? '_trueValue' : '_falseValue';
    return key in el ? el[key] : checked;
}
const vModelDynamic = {
    created(el, binding, vnode) {
        callModelHook(el, binding, vnode, null, 'created');
    },
    mounted(el, binding, vnode) {
        callModelHook(el, binding, vnode, null, 'mounted');
    },
    beforeUpdate(el, binding, vnode, prevVNode) {
        callModelHook(el, binding, vnode, prevVNode, 'beforeUpdate');
    },
    updated(el, binding, vnode, prevVNode) {
        callModelHook(el, binding, vnode, prevVNode, 'updated');
    }
};
function resolveDynamicModel(tagName, type) {
    switch (tagName) {
        case 'SELECT':
            return vModelSelect;
        case 'TEXTAREA':
            return vModelText;
        default:
            switch (type) {
                case 'checkbox':
                    return vModelCheckbox;
                case 'radio':
                    return vModelRadio;
                default:
                    return vModelText;
            }
    }
}
function callModelHook(el, binding, vnode, prevVNode, hook) {
    const modelToUse = resolveDynamicModel(el.tagName, vnode.props && vnode.props.type);
    const fn = modelToUse[hook];
    fn && fn(el, binding, vnode, prevVNode);
}
// SSR vnode transforms, only used when user includes client-oriented render
// function in SSR
function initVModelForSSR() {
    vModelText.getSSRProps = ({ value }) => ({ value });
    vModelRadio.getSSRProps = ({ value }, vnode) => {
        if (vnode.props && looseEqual(vnode.props.value, value)) {
            return { checked: true };
        }
    };
    vModelCheckbox.getSSRProps = ({ value }, vnode) => {
        if (isArray(value)) {
            if (vnode.props && looseIndexOf(value, vnode.props.value) > -1) {
                return { checked: true };
            }
        }
        else if (isSet(value)) {
            if (vnode.props && value.has(vnode.props.value)) {
                return { checked: true };
            }
        }
        else if (value) {
            return { checked: true };
        }
    };
    vModelDynamic.getSSRProps = (binding, vnode) => {
        if (typeof vnode.type !== 'string') {
            return;
        }
        const modelToUse = resolveDynamicModel(
        // resolveDynamicModel expects an uppercase tag name, but vnode.type is lowercase
        vnode.type.toUpperCase(), vnode.props && vnode.props.type);
        if (modelToUse.getSSRProps) {
            return modelToUse.getSSRProps(binding, vnode);
        }
    };
}

const systemModifiers = ['ctrl', 'shift', 'alt', 'meta'];
const modifierGuards = {
    stop: e => e.stopPropagation(),
    prevent: e => e.preventDefault(),
    self: e => e.target !== e.currentTarget,
    ctrl: e => !e.ctrlKey,
    shift: e => !e.shiftKey,
    alt: e => !e.altKey,
    meta: e => !e.metaKey,
    left: e => 'button' in e && e.button !== 0,
    middle: e => 'button' in e && e.button !== 1,
    right: e => 'button' in e && e.button !== 2,
    exact: (e, modifiers) => systemModifiers.some(m => e[`${m}Key`] && !modifiers.includes(m))
};
/**
 * @private
 */
const withModifiers = (fn, modifiers) => {
    return (event, ...args) => {
        for (let i = 0; i < modifiers.length; i++) {
            const guard = modifierGuards[modifiers[i]];
            if (guard && guard(event, modifiers))
                return;
        }
        return fn(event, ...args);
    };
};
// Kept for 2.x compat.
// Note: IE11 compat for `spacebar` and `del` is removed for now.
const keyNames = {
    esc: 'escape',
    space: ' ',
    up: 'arrow-up',
    left: 'arrow-left',
    right: 'arrow-right',
    down: 'arrow-down',
    delete: 'backspace'
};
/**
 * @private
 */
const withKeys = (fn, modifiers) => {
    return (event) => {
        if (!('key' in event)) {
            return;
        }
        const eventKey = hyphenate(event.key);
        if (modifiers.some(k => k === eventKey || keyNames[k] === eventKey)) {
            return fn(event);
        }
    };
};

const vShow = {
    beforeMount(el, { value }, { transition }) {
        el._vod = el.style.display === 'none' ? '' : el.style.display;
        if (transition && value) {
            transition.beforeEnter(el);
        }
        else {
            setDisplay(el, value);
        }
    },
    mounted(el, { value }, { transition }) {
        if (transition && value) {
            transition.enter(el);
        }
    },
    updated(el, { value, oldValue }, { transition }) {
        if (!value === !oldValue)
            return;
        if (transition) {
            if (value) {
                transition.beforeEnter(el);
                setDisplay(el, true);
                transition.enter(el);
            }
            else {
                transition.leave(el, () => {
                    setDisplay(el, false);
                });
            }
        }
        else {
            setDisplay(el, value);
        }
    },
    beforeUnmount(el, { value }) {
        setDisplay(el, value);
    }
};
function setDisplay(el, value) {
    el.style.display = value ? el._vod : 'none';
}
// SSR vnode transforms, only used when user includes client-oriented render
// function in SSR
function initVShowForSSR() {
    vShow.getSSRProps = ({ value }) => {
        if (!value) {
            return { style: { display: 'none' } };
        }
    };
}

const rendererOptions = /*#__PURE__*/ (0,_vue_shared__WEBPACK_IMPORTED_MODULE_0__/* .extend */ .l7)({ patchProp }, nodeOps);
// lazy create the renderer - this makes core renderer logic tree-shakable
// in case the user only imports reactivity utilities from Vue.
let renderer;
let enabledHydration = false;
function ensureRenderer() {
    return (renderer ||
        (renderer = (0,_vue_runtime_core__WEBPACK_IMPORTED_MODULE_1__/* .createRenderer */ .Us)(rendererOptions)));
}
function ensureHydrationRenderer() {
    renderer = enabledHydration
        ? renderer
        : createHydrationRenderer(rendererOptions);
    enabledHydration = true;
    return renderer;
}
// use explicit type casts here to avoid import() calls in rolled-up d.ts
const render = ((...args) => {
    ensureRenderer().render(...args);
});
const hydrate = ((...args) => {
    ensureHydrationRenderer().hydrate(...args);
});
const createApp = ((...args) => {
    const app = ensureRenderer().createApp(...args);
    if ((false)) {}
    const { mount } = app;
    app.mount = (containerOrSelector) => {
        const container = normalizeContainer(containerOrSelector);
        if (!container)
            return;
        const component = app._component;
        if (!(0,_vue_shared__WEBPACK_IMPORTED_MODULE_0__/* .isFunction */ .mf)(component) && !component.render && !component.template) {
            // __UNSAFE__
            // Reason: potential execution of JS expressions in in-DOM template.
            // The user must make sure the in-DOM template is trusted. If it's
            // rendered by the server, the template should not contain any user data.
            component.template = container.innerHTML;
        }
        // clear content before mounting
        container.innerHTML = '';
        const proxy = mount(container, false, container instanceof SVGElement);
        if (container instanceof Element) {
            container.removeAttribute('v-cloak');
            container.setAttribute('data-v-app', '');
        }
        return proxy;
    };
    return app;
});
const createSSRApp = ((...args) => {
    const app = ensureHydrationRenderer().createApp(...args);
    if ((false)) {}
    const { mount } = app;
    app.mount = (containerOrSelector) => {
        const container = normalizeContainer(containerOrSelector);
        if (container) {
            return mount(container, true, container instanceof SVGElement);
        }
    };
    return app;
});
function injectNativeTagCheck(app) {
    // Inject `isNativeTag`
    // this is used for component name validation (dev only)
    Object.defineProperty(app.config, 'isNativeTag', {
        value: (tag) => isHTMLTag(tag) || isSVGTag(tag),
        writable: false
    });
}
// dev only
function injectCompilerOptionsCheck(app) {
    if (isRuntimeOnly()) {
        const isCustomElement = app.config.isCustomElement;
        Object.defineProperty(app.config, 'isCustomElement', {
            get() {
                return isCustomElement;
            },
            set() {
                warn(`The \`isCustomElement\` config option is deprecated. Use ` +
                    `\`compilerOptions.isCustomElement\` instead.`);
            }
        });
        const compilerOptions = app.config.compilerOptions;
        const msg = `The \`compilerOptions\` config option is only respected when using ` +
            `a build of Vue.js that includes the runtime compiler (aka "full build"). ` +
            `Since you are using the runtime-only build, \`compilerOptions\` ` +
            `must be passed to \`@vue/compiler-dom\` in the build setup instead.\n` +
            `- For vue-loader: pass it via vue-loader's \`compilerOptions\` loader option.\n` +
            `- For vue-cli: see https://cli.vuejs.org/guide/webpack.html#modifying-options-of-a-loader\n` +
            `- For vite: pass it via @vitejs/plugin-vue options. See https://github.com/vitejs/vite/tree/main/packages/plugin-vue#example-for-passing-options-to-vuecompiler-dom`;
        Object.defineProperty(app.config, 'compilerOptions', {
            get() {
                warn(msg);
                return compilerOptions;
            },
            set() {
                warn(msg);
            }
        });
    }
}
function normalizeContainer(container) {
    if ((0,_vue_shared__WEBPACK_IMPORTED_MODULE_0__/* .isString */ .HD)(container)) {
        const res = document.querySelector(container);
        if (false) {}
        return res;
    }
    if (false) {}
    return container;
}
let ssrDirectiveInitialized = false;
/**
 * @internal
 */
const initDirectivesForSSR = () => {
        if (!ssrDirectiveInitialized) {
            ssrDirectiveInitialized = true;
            initVModelForSSR();
            initVShowForSSR();
        }
    }
    ;




/***/ }),

/***/ 577:
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "C_": () => (/* binding */ normalizeClass),
/* harmony export */   "DM": () => (/* binding */ isSet),
/* harmony export */   "E9": () => (/* binding */ getGlobalThis),
/* harmony export */   "F7": () => (/* binding */ isOn),
/* harmony export */   "Gg": () => (/* binding */ isReservedProp),
/* harmony export */   "HD": () => (/* binding */ isString),
/* harmony export */   "He": () => (/* binding */ toNumber),
/* harmony export */   "Kn": () => (/* binding */ isObject),
/* harmony export */   "NO": () => (/* binding */ NO),
/* harmony export */   "Nj": () => (/* binding */ def),
/* harmony export */   "Od": () => (/* binding */ remove),
/* harmony export */   "PO": () => (/* binding */ isPlainObject),
/* harmony export */   "Pq": () => (/* binding */ isSpecialBooleanAttr),
/* harmony export */   "RI": () => (/* binding */ hasOwn),
/* harmony export */   "S0": () => (/* binding */ isIntegerKey),
/* harmony export */   "W7": () => (/* binding */ toRawType),
/* harmony export */   "WV": () => (/* binding */ looseEqual),
/* harmony export */   "Z6": () => (/* binding */ EMPTY_ARR),
/* harmony export */   "_A": () => (/* binding */ camelize),
/* harmony export */   "_N": () => (/* binding */ isMap),
/* harmony export */   "aU": () => (/* binding */ hasChanged),
/* harmony export */   "dG": () => (/* binding */ NOOP),
/* harmony export */   "e1": () => (/* binding */ isGloballyWhitelisted),
/* harmony export */   "fY": () => (/* binding */ makeMap),
/* harmony export */   "hR": () => (/* binding */ toHandlerKey),
/* harmony export */   "hq": () => (/* binding */ looseIndexOf),
/* harmony export */   "ir": () => (/* binding */ invokeArrayFns),
/* harmony export */   "j5": () => (/* binding */ normalizeStyle),
/* harmony export */   "kC": () => (/* binding */ capitalize),
/* harmony export */   "kJ": () => (/* binding */ isArray),
/* harmony export */   "kT": () => (/* binding */ EMPTY_OBJ),
/* harmony export */   "l7": () => (/* binding */ extend),
/* harmony export */   "mf": () => (/* binding */ isFunction),
/* harmony export */   "rs": () => (/* binding */ hyphenate),
/* harmony export */   "tI": () => (/* binding */ isPromise),
/* harmony export */   "tR": () => (/* binding */ isModelListener),
/* harmony export */   "yA": () => (/* binding */ includeBooleanAttr),
/* harmony export */   "yk": () => (/* binding */ isSymbol),
/* harmony export */   "zw": () => (/* binding */ toDisplayString)
/* harmony export */ });
/* unused harmony exports PatchFlagNames, escapeHtml, escapeHtmlComment, genPropsAccessExp, generateCodeFrame, isBooleanAttr, isBuiltInDirective, isDate, isHTMLTag, isKnownHtmlAttr, isKnownSvgAttr, isNoUnitNumericStyleProp, isSSRSafeAttrName, isSVGTag, isVoidTag, normalizeProps, objectToString, parseStringStyle, propsToAttrMap, slotFlagsText, stringifyStyle, toTypeString */
/**
 * Make a map and return a function for checking if a key
 * is in that map.
 * IMPORTANT: all calls of this function must be prefixed with
 * \/\*#\_\_PURE\_\_\*\/
 * So that rollup can tree-shake them if necessary.
 */
function makeMap(str, expectsLowerCase) {
    const map = Object.create(null);
    const list = str.split(',');
    for (let i = 0; i < list.length; i++) {
        map[list[i]] = true;
    }
    return expectsLowerCase ? val => !!map[val.toLowerCase()] : val => !!map[val];
}

/**
 * dev only flag -> name mapping
 */
const PatchFlagNames = {
    [1 /* TEXT */]: `TEXT`,
    [2 /* CLASS */]: `CLASS`,
    [4 /* STYLE */]: `STYLE`,
    [8 /* PROPS */]: `PROPS`,
    [16 /* FULL_PROPS */]: `FULL_PROPS`,
    [32 /* HYDRATE_EVENTS */]: `HYDRATE_EVENTS`,
    [64 /* STABLE_FRAGMENT */]: `STABLE_FRAGMENT`,
    [128 /* KEYED_FRAGMENT */]: `KEYED_FRAGMENT`,
    [256 /* UNKEYED_FRAGMENT */]: `UNKEYED_FRAGMENT`,
    [512 /* NEED_PATCH */]: `NEED_PATCH`,
    [1024 /* DYNAMIC_SLOTS */]: `DYNAMIC_SLOTS`,
    [2048 /* DEV_ROOT_FRAGMENT */]: `DEV_ROOT_FRAGMENT`,
    [-1 /* HOISTED */]: `HOISTED`,
    [-2 /* BAIL */]: `BAIL`
};

/**
 * Dev only
 */
const slotFlagsText = {
    [1 /* STABLE */]: 'STABLE',
    [2 /* DYNAMIC */]: 'DYNAMIC',
    [3 /* FORWARDED */]: 'FORWARDED'
};

const GLOBALS_WHITE_LISTED = 'Infinity,undefined,NaN,isFinite,isNaN,parseFloat,parseInt,decodeURI,' +
    'decodeURIComponent,encodeURI,encodeURIComponent,Math,Number,Date,Array,' +
    'Object,Boolean,String,RegExp,Map,Set,JSON,Intl,BigInt';
const isGloballyWhitelisted = /*#__PURE__*/ makeMap(GLOBALS_WHITE_LISTED);

const range = 2;
function generateCodeFrame(source, start = 0, end = source.length) {
    // Split the content into individual lines but capture the newline sequence
    // that separated each line. This is important because the actual sequence is
    // needed to properly take into account the full line length for offset
    // comparison
    let lines = source.split(/(\r?\n)/);
    // Separate the lines and newline sequences into separate arrays for easier referencing
    const newlineSequences = lines.filter((_, idx) => idx % 2 === 1);
    lines = lines.filter((_, idx) => idx % 2 === 0);
    let count = 0;
    const res = [];
    for (let i = 0; i < lines.length; i++) {
        count +=
            lines[i].length +
                ((newlineSequences[i] && newlineSequences[i].length) || 0);
        if (count >= start) {
            for (let j = i - range; j <= i + range || end > count; j++) {
                if (j < 0 || j >= lines.length)
                    continue;
                const line = j + 1;
                res.push(`${line}${' '.repeat(Math.max(3 - String(line).length, 0))}|  ${lines[j]}`);
                const lineLength = lines[j].length;
                const newLineSeqLength = (newlineSequences[j] && newlineSequences[j].length) || 0;
                if (j === i) {
                    // push underline
                    const pad = start - (count - (lineLength + newLineSeqLength));
                    const length = Math.max(1, end > count ? lineLength - pad : end - start);
                    res.push(`   |  ` + ' '.repeat(pad) + '^'.repeat(length));
                }
                else if (j > i) {
                    if (end > count) {
                        const length = Math.max(Math.min(end - count, lineLength), 1);
                        res.push(`   |  ` + '^'.repeat(length));
                    }
                    count += lineLength + newLineSeqLength;
                }
            }
            break;
        }
    }
    return res.join('\n');
}

/**
 * On the client we only need to offer special cases for boolean attributes that
 * have different names from their corresponding dom properties:
 * - itemscope -> N/A
 * - allowfullscreen -> allowFullscreen
 * - formnovalidate -> formNoValidate
 * - ismap -> isMap
 * - nomodule -> noModule
 * - novalidate -> noValidate
 * - readonly -> readOnly
 */
const specialBooleanAttrs = `itemscope,allowfullscreen,formnovalidate,ismap,nomodule,novalidate,readonly`;
const isSpecialBooleanAttr = /*#__PURE__*/ makeMap(specialBooleanAttrs);
/**
 * The full list is needed during SSR to produce the correct initial markup.
 */
const isBooleanAttr = /*#__PURE__*/ makeMap(specialBooleanAttrs +
    `,async,autofocus,autoplay,controls,default,defer,disabled,hidden,` +
    `loop,open,required,reversed,scoped,seamless,` +
    `checked,muted,multiple,selected`);
/**
 * Boolean attributes should be included if the value is truthy or ''.
 * e.g. `<select multiple>` compiles to `{ multiple: '' }`
 */
function includeBooleanAttr(value) {
    return !!value || value === '';
}
const unsafeAttrCharRE = /[>/="'\u0009\u000a\u000c\u0020]/;
const attrValidationCache = {};
function isSSRSafeAttrName(name) {
    if (attrValidationCache.hasOwnProperty(name)) {
        return attrValidationCache[name];
    }
    const isUnsafe = unsafeAttrCharRE.test(name);
    if (isUnsafe) {
        console.error(`unsafe attribute name: ${name}`);
    }
    return (attrValidationCache[name] = !isUnsafe);
}
const propsToAttrMap = {
    acceptCharset: 'accept-charset',
    className: 'class',
    htmlFor: 'for',
    httpEquiv: 'http-equiv'
};
/**
 * CSS properties that accept plain numbers
 */
const isNoUnitNumericStyleProp = /*#__PURE__*/ (/* unused pure expression or super */ null && (makeMap(`animation-iteration-count,border-image-outset,border-image-slice,` +
    `border-image-width,box-flex,box-flex-group,box-ordinal-group,column-count,` +
    `columns,flex,flex-grow,flex-positive,flex-shrink,flex-negative,flex-order,` +
    `grid-row,grid-row-end,grid-row-span,grid-row-start,grid-column,` +
    `grid-column-end,grid-column-span,grid-column-start,font-weight,line-clamp,` +
    `line-height,opacity,order,orphans,tab-size,widows,z-index,zoom,` +
    // SVG
    `fill-opacity,flood-opacity,stop-opacity,stroke-dasharray,stroke-dashoffset,` +
    `stroke-miterlimit,stroke-opacity,stroke-width`)));
/**
 * Known attributes, this is used for stringification of runtime static nodes
 * so that we don't stringify bindings that cannot be set from HTML.
 * Don't also forget to allow `data-*` and `aria-*`!
 * Generated from https://developer.mozilla.org/en-US/docs/Web/HTML/Attributes
 */
const isKnownHtmlAttr = /*#__PURE__*/ (/* unused pure expression or super */ null && (makeMap(`accept,accept-charset,accesskey,action,align,allow,alt,async,` +
    `autocapitalize,autocomplete,autofocus,autoplay,background,bgcolor,` +
    `border,buffered,capture,challenge,charset,checked,cite,class,code,` +
    `codebase,color,cols,colspan,content,contenteditable,contextmenu,controls,` +
    `coords,crossorigin,csp,data,datetime,decoding,default,defer,dir,dirname,` +
    `disabled,download,draggable,dropzone,enctype,enterkeyhint,for,form,` +
    `formaction,formenctype,formmethod,formnovalidate,formtarget,headers,` +
    `height,hidden,high,href,hreflang,http-equiv,icon,id,importance,integrity,` +
    `ismap,itemprop,keytype,kind,label,lang,language,loading,list,loop,low,` +
    `manifest,max,maxlength,minlength,media,min,multiple,muted,name,novalidate,` +
    `open,optimum,pattern,ping,placeholder,poster,preload,radiogroup,readonly,` +
    `referrerpolicy,rel,required,reversed,rows,rowspan,sandbox,scope,scoped,` +
    `selected,shape,size,sizes,slot,span,spellcheck,src,srcdoc,srclang,srcset,` +
    `start,step,style,summary,tabindex,target,title,translate,type,usemap,` +
    `value,width,wrap`)));
/**
 * Generated from https://developer.mozilla.org/en-US/docs/Web/SVG/Attribute
 */
const isKnownSvgAttr = /*#__PURE__*/ (/* unused pure expression or super */ null && (makeMap(`xmlns,accent-height,accumulate,additive,alignment-baseline,alphabetic,amplitude,` +
    `arabic-form,ascent,attributeName,attributeType,azimuth,baseFrequency,` +
    `baseline-shift,baseProfile,bbox,begin,bias,by,calcMode,cap-height,class,` +
    `clip,clipPathUnits,clip-path,clip-rule,color,color-interpolation,` +
    `color-interpolation-filters,color-profile,color-rendering,` +
    `contentScriptType,contentStyleType,crossorigin,cursor,cx,cy,d,decelerate,` +
    `descent,diffuseConstant,direction,display,divisor,dominant-baseline,dur,dx,` +
    `dy,edgeMode,elevation,enable-background,end,exponent,fill,fill-opacity,` +
    `fill-rule,filter,filterRes,filterUnits,flood-color,flood-opacity,` +
    `font-family,font-size,font-size-adjust,font-stretch,font-style,` +
    `font-variant,font-weight,format,from,fr,fx,fy,g1,g2,glyph-name,` +
    `glyph-orientation-horizontal,glyph-orientation-vertical,glyphRef,` +
    `gradientTransform,gradientUnits,hanging,height,href,hreflang,horiz-adv-x,` +
    `horiz-origin-x,id,ideographic,image-rendering,in,in2,intercept,k,k1,k2,k3,` +
    `k4,kernelMatrix,kernelUnitLength,kerning,keyPoints,keySplines,keyTimes,` +
    `lang,lengthAdjust,letter-spacing,lighting-color,limitingConeAngle,local,` +
    `marker-end,marker-mid,marker-start,markerHeight,markerUnits,markerWidth,` +
    `mask,maskContentUnits,maskUnits,mathematical,max,media,method,min,mode,` +
    `name,numOctaves,offset,opacity,operator,order,orient,orientation,origin,` +
    `overflow,overline-position,overline-thickness,panose-1,paint-order,path,` +
    `pathLength,patternContentUnits,patternTransform,patternUnits,ping,` +
    `pointer-events,points,pointsAtX,pointsAtY,pointsAtZ,preserveAlpha,` +
    `preserveAspectRatio,primitiveUnits,r,radius,referrerPolicy,refX,refY,rel,` +
    `rendering-intent,repeatCount,repeatDur,requiredExtensions,requiredFeatures,` +
    `restart,result,rotate,rx,ry,scale,seed,shape-rendering,slope,spacing,` +
    `specularConstant,specularExponent,speed,spreadMethod,startOffset,` +
    `stdDeviation,stemh,stemv,stitchTiles,stop-color,stop-opacity,` +
    `strikethrough-position,strikethrough-thickness,string,stroke,` +
    `stroke-dasharray,stroke-dashoffset,stroke-linecap,stroke-linejoin,` +
    `stroke-miterlimit,stroke-opacity,stroke-width,style,surfaceScale,` +
    `systemLanguage,tabindex,tableValues,target,targetX,targetY,text-anchor,` +
    `text-decoration,text-rendering,textLength,to,transform,transform-origin,` +
    `type,u1,u2,underline-position,underline-thickness,unicode,unicode-bidi,` +
    `unicode-range,units-per-em,v-alphabetic,v-hanging,v-ideographic,` +
    `v-mathematical,values,vector-effect,version,vert-adv-y,vert-origin-x,` +
    `vert-origin-y,viewBox,viewTarget,visibility,width,widths,word-spacing,` +
    `writing-mode,x,x-height,x1,x2,xChannelSelector,xlink:actuate,xlink:arcrole,` +
    `xlink:href,xlink:role,xlink:show,xlink:title,xlink:type,xml:base,xml:lang,` +
    `xml:space,y,y1,y2,yChannelSelector,z,zoomAndPan`)));

function normalizeStyle(value) {
    if (isArray(value)) {
        const res = {};
        for (let i = 0; i < value.length; i++) {
            const item = value[i];
            const normalized = isString(item)
                ? parseStringStyle(item)
                : normalizeStyle(item);
            if (normalized) {
                for (const key in normalized) {
                    res[key] = normalized[key];
                }
            }
        }
        return res;
    }
    else if (isString(value)) {
        return value;
    }
    else if (isObject(value)) {
        return value;
    }
}
const listDelimiterRE = /;(?![^(]*\))/g;
const propertyDelimiterRE = /:(.+)/;
function parseStringStyle(cssText) {
    const ret = {};
    cssText.split(listDelimiterRE).forEach(item => {
        if (item) {
            const tmp = item.split(propertyDelimiterRE);
            tmp.length > 1 && (ret[tmp[0].trim()] = tmp[1].trim());
        }
    });
    return ret;
}
function stringifyStyle(styles) {
    let ret = '';
    if (!styles || isString(styles)) {
        return ret;
    }
    for (const key in styles) {
        const value = styles[key];
        const normalizedKey = key.startsWith(`--`) ? key : hyphenate(key);
        if (isString(value) ||
            (typeof value === 'number' && isNoUnitNumericStyleProp(normalizedKey))) {
            // only render valid values
            ret += `${normalizedKey}:${value};`;
        }
    }
    return ret;
}
function normalizeClass(value) {
    let res = '';
    if (isString(value)) {
        res = value;
    }
    else if (isArray(value)) {
        for (let i = 0; i < value.length; i++) {
            const normalized = normalizeClass(value[i]);
            if (normalized) {
                res += normalized + ' ';
            }
        }
    }
    else if (isObject(value)) {
        for (const name in value) {
            if (value[name]) {
                res += name + ' ';
            }
        }
    }
    return res.trim();
}
function normalizeProps(props) {
    if (!props)
        return null;
    let { class: klass, style } = props;
    if (klass && !isString(klass)) {
        props.class = normalizeClass(klass);
    }
    if (style) {
        props.style = normalizeStyle(style);
    }
    return props;
}

// These tag configs are shared between compiler-dom and runtime-dom, so they
// https://developer.mozilla.org/en-US/docs/Web/HTML/Element
const HTML_TAGS = (/* unused pure expression or super */ null && ('html,body,base,head,link,meta,style,title,address,article,aside,footer,' +
    'header,h1,h2,h3,h4,h5,h6,nav,section,div,dd,dl,dt,figcaption,' +
    'figure,picture,hr,img,li,main,ol,p,pre,ul,a,b,abbr,bdi,bdo,br,cite,code,' +
    'data,dfn,em,i,kbd,mark,q,rp,rt,ruby,s,samp,small,span,strong,sub,sup,' +
    'time,u,var,wbr,area,audio,map,track,video,embed,object,param,source,' +
    'canvas,script,noscript,del,ins,caption,col,colgroup,table,thead,tbody,td,' +
    'th,tr,button,datalist,fieldset,form,input,label,legend,meter,optgroup,' +
    'option,output,progress,select,textarea,details,dialog,menu,' +
    'summary,template,blockquote,iframe,tfoot'));
// https://developer.mozilla.org/en-US/docs/Web/SVG/Element
const SVG_TAGS = (/* unused pure expression or super */ null && ('svg,animate,animateMotion,animateTransform,circle,clipPath,color-profile,' +
    'defs,desc,discard,ellipse,feBlend,feColorMatrix,feComponentTransfer,' +
    'feComposite,feConvolveMatrix,feDiffuseLighting,feDisplacementMap,' +
    'feDistanceLight,feDropShadow,feFlood,feFuncA,feFuncB,feFuncG,feFuncR,' +
    'feGaussianBlur,feImage,feMerge,feMergeNode,feMorphology,feOffset,' +
    'fePointLight,feSpecularLighting,feSpotLight,feTile,feTurbulence,filter,' +
    'foreignObject,g,hatch,hatchpath,image,line,linearGradient,marker,mask,' +
    'mesh,meshgradient,meshpatch,meshrow,metadata,mpath,path,pattern,' +
    'polygon,polyline,radialGradient,rect,set,solidcolor,stop,switch,symbol,' +
    'text,textPath,title,tspan,unknown,use,view'));
const VOID_TAGS = 'area,base,br,col,embed,hr,img,input,link,meta,param,source,track,wbr';
/**
 * Compiler only.
 * Do NOT use in runtime code paths unless behind `(process.env.NODE_ENV !== 'production')` flag.
 */
const isHTMLTag = /*#__PURE__*/ (/* unused pure expression or super */ null && (makeMap(HTML_TAGS)));
/**
 * Compiler only.
 * Do NOT use in runtime code paths unless behind `(process.env.NODE_ENV !== 'production')` flag.
 */
const isSVGTag = /*#__PURE__*/ (/* unused pure expression or super */ null && (makeMap(SVG_TAGS)));
/**
 * Compiler only.
 * Do NOT use in runtime code paths unless behind `(process.env.NODE_ENV !== 'production')` flag.
 */
const isVoidTag = /*#__PURE__*/ (/* unused pure expression or super */ null && (makeMap(VOID_TAGS)));

const escapeRE = /["'&<>]/;
function escapeHtml(string) {
    const str = '' + string;
    const match = escapeRE.exec(str);
    if (!match) {
        return str;
    }
    let html = '';
    let escaped;
    let index;
    let lastIndex = 0;
    for (index = match.index; index < str.length; index++) {
        switch (str.charCodeAt(index)) {
            case 34: // "
                escaped = '&quot;';
                break;
            case 38: // &
                escaped = '&amp;';
                break;
            case 39: // '
                escaped = '&#39;';
                break;
            case 60: // <
                escaped = '&lt;';
                break;
            case 62: // >
                escaped = '&gt;';
                break;
            default:
                continue;
        }
        if (lastIndex !== index) {
            html += str.slice(lastIndex, index);
        }
        lastIndex = index + 1;
        html += escaped;
    }
    return lastIndex !== index ? html + str.slice(lastIndex, index) : html;
}
// https://www.w3.org/TR/html52/syntax.html#comments
const commentStripRE = /^-?>|<!--|-->|--!>|<!-$/g;
function escapeHtmlComment(src) {
    return src.replace(commentStripRE, '');
}

function looseCompareArrays(a, b) {
    if (a.length !== b.length)
        return false;
    let equal = true;
    for (let i = 0; equal && i < a.length; i++) {
        equal = looseEqual(a[i], b[i]);
    }
    return equal;
}
function looseEqual(a, b) {
    if (a === b)
        return true;
    let aValidType = isDate(a);
    let bValidType = isDate(b);
    if (aValidType || bValidType) {
        return aValidType && bValidType ? a.getTime() === b.getTime() : false;
    }
    aValidType = isSymbol(a);
    bValidType = isSymbol(b);
    if (aValidType || bValidType) {
        return a === b;
    }
    aValidType = isArray(a);
    bValidType = isArray(b);
    if (aValidType || bValidType) {
        return aValidType && bValidType ? looseCompareArrays(a, b) : false;
    }
    aValidType = isObject(a);
    bValidType = isObject(b);
    if (aValidType || bValidType) {
        /* istanbul ignore if: this if will probably never be called */
        if (!aValidType || !bValidType) {
            return false;
        }
        const aKeysCount = Object.keys(a).length;
        const bKeysCount = Object.keys(b).length;
        if (aKeysCount !== bKeysCount) {
            return false;
        }
        for (const key in a) {
            const aHasKey = a.hasOwnProperty(key);
            const bHasKey = b.hasOwnProperty(key);
            if ((aHasKey && !bHasKey) ||
                (!aHasKey && bHasKey) ||
                !looseEqual(a[key], b[key])) {
                return false;
            }
        }
    }
    return String(a) === String(b);
}
function looseIndexOf(arr, val) {
    return arr.findIndex(item => looseEqual(item, val));
}

/**
 * For converting {{ interpolation }} values to displayed strings.
 * @private
 */
const toDisplayString = (val) => {
    return isString(val)
        ? val
        : val == null
            ? ''
            : isArray(val) ||
                (isObject(val) &&
                    (val.toString === objectToString || !isFunction(val.toString)))
                ? JSON.stringify(val, replacer, 2)
                : String(val);
};
const replacer = (_key, val) => {
    // can't use isRef here since @vue/shared has no deps
    if (val && val.__v_isRef) {
        return replacer(_key, val.value);
    }
    else if (isMap(val)) {
        return {
            [`Map(${val.size})`]: [...val.entries()].reduce((entries, [key, val]) => {
                entries[`${key} =>`] = val;
                return entries;
            }, {})
        };
    }
    else if (isSet(val)) {
        return {
            [`Set(${val.size})`]: [...val.values()]
        };
    }
    else if (isObject(val) && !isArray(val) && !isPlainObject(val)) {
        return String(val);
    }
    return val;
};

const EMPTY_OBJ = ( false)
    ? 0
    : {};
const EMPTY_ARR = ( false) ? 0 : [];
const NOOP = () => { };
/**
 * Always return false.
 */
const NO = () => false;
const onRE = /^on[^a-z]/;
const isOn = (key) => onRE.test(key);
const isModelListener = (key) => key.startsWith('onUpdate:');
const extend = Object.assign;
const remove = (arr, el) => {
    const i = arr.indexOf(el);
    if (i > -1) {
        arr.splice(i, 1);
    }
};
const hasOwnProperty = Object.prototype.hasOwnProperty;
const hasOwn = (val, key) => hasOwnProperty.call(val, key);
const isArray = Array.isArray;
const isMap = (val) => toTypeString(val) === '[object Map]';
const isSet = (val) => toTypeString(val) === '[object Set]';
const isDate = (val) => toTypeString(val) === '[object Date]';
const isFunction = (val) => typeof val === 'function';
const isString = (val) => typeof val === 'string';
const isSymbol = (val) => typeof val === 'symbol';
const isObject = (val) => val !== null && typeof val === 'object';
const isPromise = (val) => {
    return isObject(val) && isFunction(val.then) && isFunction(val.catch);
};
const objectToString = Object.prototype.toString;
const toTypeString = (value) => objectToString.call(value);
const toRawType = (value) => {
    // extract "RawType" from strings like "[object RawType]"
    return toTypeString(value).slice(8, -1);
};
const isPlainObject = (val) => toTypeString(val) === '[object Object]';
const isIntegerKey = (key) => isString(key) &&
    key !== 'NaN' &&
    key[0] !== '-' &&
    '' + parseInt(key, 10) === key;
const isReservedProp = /*#__PURE__*/ makeMap(
// the leading comma is intentional so empty string "" is also included
',key,ref,ref_for,ref_key,' +
    'onVnodeBeforeMount,onVnodeMounted,' +
    'onVnodeBeforeUpdate,onVnodeUpdated,' +
    'onVnodeBeforeUnmount,onVnodeUnmounted');
const isBuiltInDirective = /*#__PURE__*/ (/* unused pure expression or super */ null && (makeMap('bind,cloak,else-if,else,for,html,if,model,on,once,pre,show,slot,text,memo')));
const cacheStringFunction = (fn) => {
    const cache = Object.create(null);
    return ((str) => {
        const hit = cache[str];
        return hit || (cache[str] = fn(str));
    });
};
const camelizeRE = /-(\w)/g;
/**
 * @private
 */
const camelize = cacheStringFunction((str) => {
    return str.replace(camelizeRE, (_, c) => (c ? c.toUpperCase() : ''));
});
const hyphenateRE = /\B([A-Z])/g;
/**
 * @private
 */
const hyphenate = cacheStringFunction((str) => str.replace(hyphenateRE, '-$1').toLowerCase());
/**
 * @private
 */
const capitalize = cacheStringFunction((str) => str.charAt(0).toUpperCase() + str.slice(1));
/**
 * @private
 */
const toHandlerKey = cacheStringFunction((str) => str ? `on${capitalize(str)}` : ``);
// compare whether a value has changed, accounting for NaN.
const hasChanged = (value, oldValue) => !Object.is(value, oldValue);
const invokeArrayFns = (fns, arg) => {
    for (let i = 0; i < fns.length; i++) {
        fns[i](arg);
    }
};
const def = (obj, key, value) => {
    Object.defineProperty(obj, key, {
        configurable: true,
        enumerable: false,
        value
    });
};
const toNumber = (val) => {
    const n = parseFloat(val);
    return isNaN(n) ? val : n;
};
let _globalThis;
const getGlobalThis = () => {
    return (_globalThis ||
        (_globalThis =
            typeof globalThis !== 'undefined'
                ? globalThis
                : typeof self !== 'undefined'
                    ? self
                    : typeof window !== 'undefined'
                        ? window
                        : typeof __webpack_require__.g !== 'undefined'
                            ? __webpack_require__.g
                            : {}));
};
const identRE = /^[_$a-zA-Z\xA0-\uFFFF][_$a-zA-Z0-9\xA0-\uFFFF]*$/;
function genPropsAccessExp(name) {
    return identRE.test(name)
        ? `__props.${name}`
        : `__props[${JSON.stringify(name)}]`;
}




/***/ }),

/***/ 757:
/***/ (() => {

// extracted by mini-css-extract-plugin


/***/ }),

/***/ 744:
/***/ ((__unused_webpack_module, exports) => {

var __webpack_unused_export__;

__webpack_unused_export__ = ({ value: true });
// runtime helper for setting properties on components
// in a tree-shakable way
exports.Z = (sfc, props) => {
    const target = sfc.__vccOpts || sfc;
    for (const [key, val] of props) {
        target[key] = val;
    }
    return target;
};


/***/ }),

/***/ 948:
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

// ESM COMPAT FLAG
__webpack_require__.r(__webpack_exports__);

// EXPORTS
__webpack_require__.d(__webpack_exports__, {
  "VAlert": () => (/* reexport */ VAlert),
  "VAlertTitle": () => (/* reexport */ VAlertTitle),
  "VApp": () => (/* reexport */ VApp),
  "VAppBar": () => (/* reexport */ VAppBar),
  "VAppBarNavIcon": () => (/* reexport */ VAppBarNavIcon),
  "VAppBarTitle": () => (/* reexport */ VAppBarTitle),
  "VAutocomplete": () => (/* reexport */ VAutocomplete),
  "VAvatar": () => (/* reexport */ VAvatar),
  "VBadge": () => (/* reexport */ VBadge),
  "VBanner": () => (/* reexport */ VBanner),
  "VBannerActions": () => (/* reexport */ VBannerActions),
  "VBannerAvatar": () => (/* reexport */ VBannerAvatar),
  "VBannerIcon": () => (/* reexport */ VBannerIcon),
  "VBannerText": () => (/* reexport */ VBannerText),
  "VBottomNavigation": () => (/* reexport */ VBottomNavigation),
  "VBreadcrumbs": () => (/* reexport */ VBreadcrumbs),
  "VBreadcrumbsDivider": () => (/* reexport */ VBreadcrumbsDivider),
  "VBreadcrumbsItem": () => (/* reexport */ VBreadcrumbsItem),
  "VBtn": () => (/* reexport */ VBtn),
  "VBtnGroup": () => (/* reexport */ VBtnGroup),
  "VBtnToggle": () => (/* reexport */ VBtnToggle),
  "VCard": () => (/* reexport */ VCard),
  "VCardActions": () => (/* reexport */ VCardActions),
  "VCardAvatar": () => (/* reexport */ VCardAvatar),
  "VCardContent": () => (/* reexport */ VCardContent),
  "VCardHeader": () => (/* reexport */ VCardHeader),
  "VCardHeaderText": () => (/* reexport */ VCardHeaderText),
  "VCardImg": () => (/* reexport */ VCardImg),
  "VCardSubtitle": () => (/* reexport */ VCardSubtitle),
  "VCardText": () => (/* reexport */ VCardText),
  "VCardTitle": () => (/* reexport */ VCardTitle),
  "VCarousel": () => (/* reexport */ VCarousel),
  "VCarouselItem": () => (/* reexport */ VCarouselItem),
  "VCarouselReverseTransition": () => (/* reexport */ VCarouselReverseTransition),
  "VCarouselTransition": () => (/* reexport */ VCarouselTransition),
  "VCheckbox": () => (/* reexport */ VCheckbox),
  "VChip": () => (/* reexport */ VChip),
  "VChipGroup": () => (/* reexport */ VChipGroup),
  "VClassIcon": () => (/* reexport */ icons/* VClassIcon */.$0),
  "VCode": () => (/* reexport */ VCode),
  "VCol": () => (/* reexport */ VCol),
  "VColorPicker": () => (/* reexport */ VColorPicker),
  "VCombobox": () => (/* reexport */ VCombobox),
  "VComponentIcon": () => (/* reexport */ icons/* VComponentIcon */.$e),
  "VContainer": () => (/* reexport */ VContainer),
  "VCounter": () => (/* reexport */ VCounter),
  "VDefaultsProvider": () => (/* reexport */ VDefaultsProvider),
  "VDialog": () => (/* reexport */ VDialog),
  "VDialogBottomTransition": () => (/* reexport */ VDialogBottomTransition),
  "VDialogTopTransition": () => (/* reexport */ VDialogTopTransition),
  "VDialogTransition": () => (/* reexport */ VDialogTransition),
  "VDivider": () => (/* reexport */ VDivider),
  "VExpandTransition": () => (/* reexport */ VExpandTransition),
  "VExpandXTransition": () => (/* reexport */ VExpandXTransition),
  "VExpansionPanel": () => (/* reexport */ VExpansionPanel),
  "VExpansionPanelText": () => (/* reexport */ VExpansionPanelText),
  "VExpansionPanelTitle": () => (/* reexport */ VExpansionPanelTitle),
  "VExpansionPanels": () => (/* reexport */ VExpansionPanels),
  "VFabTransition": () => (/* reexport */ VFabTransition),
  "VFadeTransition": () => (/* reexport */ VFadeTransition),
  "VField": () => (/* reexport */ VField),
  "VFieldLabel": () => (/* reexport */ VFieldLabel),
  "VFileInput": () => (/* reexport */ VFileInput),
  "VFooter": () => (/* reexport */ VFooter),
  "VForm": () => (/* reexport */ VForm),
  "VHover": () => (/* reexport */ VHover),
  "VIcon": () => (/* reexport */ VIcon),
  "VImg": () => (/* reexport */ VImg),
  "VInput": () => (/* reexport */ VInput),
  "VItem": () => (/* reexport */ VItem),
  "VItemGroup": () => (/* reexport */ VItemGroup),
  "VKbd": () => (/* reexport */ VKbd),
  "VLabel": () => (/* reexport */ VLabel),
  "VLayout": () => (/* reexport */ VLayout),
  "VLayoutItem": () => (/* reexport */ VLayoutItem),
  "VLazy": () => (/* reexport */ VLazy),
  "VLigatureIcon": () => (/* reexport */ icons/* VLigatureIcon */.w8),
  "VList": () => (/* reexport */ VList),
  "VListGroup": () => (/* reexport */ VListGroup),
  "VListImg": () => (/* reexport */ VListImg),
  "VListItem": () => (/* reexport */ VListItem),
  "VListItemAction": () => (/* reexport */ VListItemAction),
  "VListItemAvatar": () => (/* reexport */ VListItemAvatar),
  "VListItemHeader": () => (/* reexport */ VListItemHeader),
  "VListItemIcon": () => (/* reexport */ VListItemIcon),
  "VListItemMedia": () => (/* reexport */ VListItemMedia),
  "VListItemSubtitle": () => (/* reexport */ VListItemSubtitle),
  "VListItemTitle": () => (/* reexport */ VListItemTitle),
  "VListSubheader": () => (/* reexport */ VListSubheader),
  "VLocaleProvider": () => (/* reexport */ VLocaleProvider),
  "VMain": () => (/* reexport */ VMain),
  "VMenu": () => (/* reexport */ VMenu),
  "VMenuTransition": () => (/* reexport */ VMenuTransition),
  "VMessages": () => (/* reexport */ VMessages),
  "VNavigationDrawer": () => (/* reexport */ VNavigationDrawer),
  "VNoSsr": () => (/* reexport */ VNoSsr),
  "VOverlay": () => (/* reexport */ VOverlay),
  "VPagination": () => (/* reexport */ VPagination),
  "VParallax": () => (/* reexport */ VParallax),
  "VProgressCircular": () => (/* reexport */ VProgressCircular),
  "VProgressLinear": () => (/* reexport */ VProgressLinear),
  "VRadio": () => (/* reexport */ VRadio),
  "VRadioGroup": () => (/* reexport */ VRadioGroup),
  "VRangeSlider": () => (/* reexport */ VRangeSlider),
  "VRating": () => (/* reexport */ VRating),
  "VResponsive": () => (/* reexport */ VResponsive),
  "VRow": () => (/* reexport */ VRow),
  "VScaleTransition": () => (/* reexport */ VScaleTransition),
  "VScrollXReverseTransition": () => (/* reexport */ VScrollXReverseTransition),
  "VScrollXTransition": () => (/* reexport */ VScrollXTransition),
  "VScrollYReverseTransition": () => (/* reexport */ VScrollYReverseTransition),
  "VScrollYTransition": () => (/* reexport */ VScrollYTransition),
  "VSelect": () => (/* reexport */ VSelect),
  "VSelectionControl": () => (/* reexport */ VSelectionControl),
  "VSelectionControlGroup": () => (/* reexport */ VSelectionControlGroup),
  "VSheet": () => (/* reexport */ VSheet),
  "VSlideGroup": () => (/* reexport */ VSlideGroup),
  "VSlideGroupItem": () => (/* reexport */ VSlideGroupItem),
  "VSlideGroupSymbol": () => (/* reexport */ VSlideGroupSymbol),
  "VSlideXReverseTransition": () => (/* reexport */ VSlideXReverseTransition),
  "VSlideXTransition": () => (/* reexport */ VSlideXTransition),
  "VSlideYReverseTransition": () => (/* reexport */ VSlideYReverseTransition),
  "VSlideYTransition": () => (/* reexport */ VSlideYTransition),
  "VSlider": () => (/* reexport */ VSlider),
  "VSnackbar": () => (/* reexport */ VSnackbar),
  "VSpacer": () => (/* reexport */ VSpacer),
  "VSvgIcon": () => (/* reexport */ icons/* VSvgIcon */.oX),
  "VSwitch": () => (/* reexport */ VSwitch),
  "VSystemBar": () => (/* reexport */ VSystemBar),
  "VTab": () => (/* reexport */ VTab),
  "VTabReverseTransition": () => (/* reexport */ VTabReverseTransition),
  "VTabTransition": () => (/* reexport */ VTabTransition),
  "VTable": () => (/* reexport */ VTable),
  "VTabs": () => (/* reexport */ VTabs),
  "VTextField": () => (/* reexport */ VTextField),
  "VTextarea": () => (/* reexport */ VTextarea),
  "VThemeProvider": () => (/* reexport */ VThemeProvider),
  "VTimeline": () => (/* reexport */ VTimeline),
  "VTimelineItem": () => (/* reexport */ VTimelineItem),
  "VToolbar": () => (/* reexport */ VToolbar),
  "VToolbarItems": () => (/* reexport */ VToolbarItems),
  "VToolbarTitle": () => (/* reexport */ VToolbarTitle),
  "VTooltip": () => (/* reexport */ VTooltip),
  "VValidation": () => (/* reexport */ VValidation),
  "VWindow": () => (/* reexport */ VWindow),
  "VWindowItem": () => (/* reexport */ VWindowItem)
});

// EXTERNAL MODULE: ./node_modules/@vue/runtime-core/dist/runtime-core.esm-bundler.js
var runtime_core_esm_bundler = __webpack_require__(252);
;// CONCATENATED MODULE: ./node_modules/vuetify/lib/components/VApp/VApp.css
// extracted by mini-css-extract-plugin

// EXTERNAL MODULE: ./node_modules/vuetify/lib/composables/theme.mjs + 1 modules
var composables_theme = __webpack_require__(195);
// EXTERNAL MODULE: ./node_modules/@vue/reactivity/dist/reactivity.esm-bundler.js
var reactivity_esm_bundler = __webpack_require__(262);
// EXTERNAL MODULE: ./node_modules/vuetify/lib/util/globals.mjs
var globals = __webpack_require__(228);
;// CONCATENATED MODULE: ./node_modules/vuetify/lib/composables/resizeObserver.mjs
// Utilities

// Globals

function useResizeObserver(callback) {
  const resizeRef = (0,reactivity_esm_bundler/* ref */.iH)();
  const contentRect = (0,reactivity_esm_bundler/* ref */.iH)();

  if (globals/* IN_BROWSER */.BR) {
    const observer = new ResizeObserver(entries => {
      callback == null ? void 0 : callback(entries, observer);
      if (!entries.length) return;
      contentRect.value = entries[0].contentRect;
    });
    (0,runtime_core_esm_bundler/* onBeforeUnmount */.Jd)(() => {
      observer.disconnect();
    });
    (0,runtime_core_esm_bundler/* watch */.YP)(resizeRef, (newValue, oldValue) => {
      if (oldValue) {
        observer.unobserve(oldValue);
        contentRect.value = undefined;
      }

      if (newValue) observer.observe(newValue);
    }, {
      flush: 'post'
    });
  }

  return {
    resizeRef,
    contentRect: (0,reactivity_esm_bundler/* readonly */.OT)(contentRect)
  };
}
//# sourceMappingURL=resizeObserver.mjs.map
// EXTERNAL MODULE: ./node_modules/vuetify/lib/util/propsFactory.mjs
var propsFactory = __webpack_require__(533);
// EXTERNAL MODULE: ./node_modules/vuetify/lib/util/helpers.mjs
var helpers = __webpack_require__(676);
// EXTERNAL MODULE: ./node_modules/vuetify/lib/util/getCurrentInstance.mjs
var util_getCurrentInstance = __webpack_require__(83);
;// CONCATENATED MODULE: ./node_modules/vuetify/lib/composables/layout.mjs
// Composables
 // Utilities


 // Types

const VuetifyLayoutKey = Symbol.for('vuetify:layout');
const VuetifyLayoutItemKey = Symbol.for('vuetify:layout-item');
const ROOT_ZINDEX = 1000;
const makeLayoutProps = (0,propsFactory/* propsFactory */.U)({
  overlaps: {
    type: Array,
    default: () => []
  },
  fullHeight: Boolean
}, 'layout'); // Composables

const makeLayoutItemProps = (0,propsFactory/* propsFactory */.U)({
  name: {
    type: String
  },
  priority: {
    type: [Number, String],
    default: 0
  },
  absolute: Boolean
}, 'layout-item');
function useLayout() {
  const layout = (0,runtime_core_esm_bundler/* inject */.f3)(VuetifyLayoutKey);
  if (!layout) throw new Error('Could not find injected Vuetify layout');
  return layout;
}
function useLayoutItem(options) {
  var _options$id;

  const layout = (0,runtime_core_esm_bundler/* inject */.f3)(VuetifyLayoutKey);
  if (!layout) throw new Error('Could not find injected Vuetify layout');
  const id = (_options$id = options.id) != null ? _options$id : `layout-item-${(0,helpers/* getUid */.sq)()}`;
  const vm = (0,util_getCurrentInstance/* getCurrentInstance */.F)('useLayoutItem');
  (0,runtime_core_esm_bundler/* provide */.JJ)(VuetifyLayoutItemKey, {
    id
  });
  const isKeptAlive = (0,reactivity_esm_bundler/* ref */.iH)(false);
  (0,runtime_core_esm_bundler/* onDeactivated */.se)(() => isKeptAlive.value = true);
  (0,runtime_core_esm_bundler/* onActivated */.dl)(() => isKeptAlive.value = false);
  const {
    layoutItemStyles,
    layoutItemScrimStyles
  } = layout.register(vm, { ...options,
    active: (0,runtime_core_esm_bundler/* computed */.Fl)(() => isKeptAlive.value ? false : options.active.value),
    id
  });
  (0,runtime_core_esm_bundler/* onBeforeUnmount */.Jd)(() => layout.unregister(id));
  return {
    layoutItemStyles,
    layoutRect: layout.layoutRect,
    layoutItemScrimStyles
  };
}

const generateLayers = (layout, positions, layoutSizes, activeItems) => {
  let previousLayer = {
    top: 0,
    left: 0,
    right: 0,
    bottom: 0
  };
  const layers = [{
    id: '',
    layer: { ...previousLayer
    }
  }];

  for (const id of layout) {
    const position = positions.get(id);
    const amount = layoutSizes.get(id);
    const active = activeItems.get(id);
    if (!position || !amount || !active) continue;
    const layer = { ...previousLayer,
      [position.value]: parseInt(previousLayer[position.value], 10) + (active.value ? parseInt(amount.value, 10) : 0)
    };
    layers.push({
      id,
      layer
    });
    previousLayer = layer;
  }

  return layers;
};

function createLayout(props) {
  const parentLayout = (0,runtime_core_esm_bundler/* inject */.f3)(VuetifyLayoutKey, null);
  const rootZIndex = (0,runtime_core_esm_bundler/* computed */.Fl)(() => parentLayout ? parentLayout.rootZIndex.value - 100 : ROOT_ZINDEX);
  const registered = (0,reactivity_esm_bundler/* ref */.iH)([]);
  const positions = (0,reactivity_esm_bundler/* reactive */.qj)(new Map());
  const layoutSizes = (0,reactivity_esm_bundler/* reactive */.qj)(new Map());
  const priorities = (0,reactivity_esm_bundler/* reactive */.qj)(new Map());
  const activeItems = (0,reactivity_esm_bundler/* reactive */.qj)(new Map());
  const disabledTransitions = (0,reactivity_esm_bundler/* reactive */.qj)(new Map());
  const {
    resizeRef,
    contentRect: layoutRect
  } = useResizeObserver();
  const computedOverlaps = (0,runtime_core_esm_bundler/* computed */.Fl)(() => {
    var _props$overlaps;

    const map = new Map();
    const overlaps = (_props$overlaps = props.overlaps) != null ? _props$overlaps : [];

    for (const overlap of overlaps.filter(item => item.includes(':'))) {
      const [top, bottom] = overlap.split(':');
      if (!registered.value.includes(top) || !registered.value.includes(bottom)) continue;
      const topPosition = positions.get(top);
      const bottomPosition = positions.get(bottom);
      const topAmount = layoutSizes.get(top);
      const bottomAmount = layoutSizes.get(bottom);
      if (!topPosition || !bottomPosition || !topAmount || !bottomAmount) continue;
      map.set(bottom, {
        position: topPosition.value,
        amount: parseInt(topAmount.value, 10)
      });
      map.set(top, {
        position: bottomPosition.value,
        amount: -parseInt(bottomAmount.value, 10)
      });
    }

    return map;
  });
  const layers = (0,runtime_core_esm_bundler/* computed */.Fl)(() => {
    const uniquePriorities = [...new Set([...priorities.values()].map(p => p.value))].sort((a, b) => a - b);
    const layout = [];

    for (const p of uniquePriorities) {
      const items = registered.value.filter(id => {
        var _priorities$get;

        return ((_priorities$get = priorities.get(id)) == null ? void 0 : _priorities$get.value) === p;
      });
      layout.push(...items);
    }

    return generateLayers(layout, positions, layoutSizes, activeItems);
  });
  const transitionsEnabled = (0,runtime_core_esm_bundler/* computed */.Fl)(() => {
    return !Array.from(disabledTransitions.values()).some(ref => ref.value);
  });
  const mainStyles = (0,runtime_core_esm_bundler/* computed */.Fl)(() => {
    const layer = layers.value[layers.value.length - 1].layer;
    return {
      position: 'relative',
      paddingLeft: (0,helpers/* convertToUnit */.kb)(layer.left),
      paddingRight: (0,helpers/* convertToUnit */.kb)(layer.right),
      paddingTop: (0,helpers/* convertToUnit */.kb)(layer.top),
      paddingBottom: (0,helpers/* convertToUnit */.kb)(layer.bottom),
      ...(transitionsEnabled.value ? undefined : {
        transition: 'none'
      })
    };
  });
  const items = (0,runtime_core_esm_bundler/* computed */.Fl)(() => {
    return layers.value.slice(1).map((_ref, index) => {
      let {
        id
      } = _ref;
      const {
        layer
      } = layers.value[index];
      const size = layoutSizes.get(id);
      return {
        id,
        ...layer,
        size: Number(size.value)
      };
    });
  });

  const getLayoutItem = id => {
    return items.value.find(item => item.id === id);
  };

  const rootVm = (0,util_getCurrentInstance/* getCurrentInstance */.F)('createLayout');
  const isMounted = (0,reactivity_esm_bundler/* ref */.iH)(false);
  (0,runtime_core_esm_bundler/* onMounted */.bv)(() => {
    isMounted.value = true;
  });
  (0,runtime_core_esm_bundler/* provide */.JJ)(VuetifyLayoutKey, {
    register: (vm, _ref2) => {
      let {
        id,
        priority,
        position,
        layoutSize,
        elementSize,
        active,
        disableTransitions,
        absolute
      } = _ref2;
      priorities.set(id, priority);
      positions.set(id, position);
      layoutSizes.set(id, layoutSize);
      activeItems.set(id, active);
      disableTransitions && disabledTransitions.set(id, disableTransitions);
      const instances = (0,helpers/* findChildrenWithProvide */.bY)(VuetifyLayoutItemKey, rootVm == null ? void 0 : rootVm.vnode);
      const instanceIndex = instances.indexOf(vm);
      if (instanceIndex > -1) registered.value.splice(instanceIndex, 0, id);else registered.value.push(id);
      const index = (0,runtime_core_esm_bundler/* computed */.Fl)(() => items.value.findIndex(i => i.id === id));
      const zIndex = (0,runtime_core_esm_bundler/* computed */.Fl)(() => rootZIndex.value + layers.value.length * 2 - index.value * 2);
      const layoutItemStyles = (0,runtime_core_esm_bundler/* computed */.Fl)(() => {
        const isHorizontal = position.value === 'left' || position.value === 'right';
        const isOppositeHorizontal = position.value === 'right';
        const isOppositeVertical = position.value === 'bottom';
        const styles = {
          [position.value]: 0,
          zIndex: zIndex.value,
          transform: `translate${isHorizontal ? 'X' : 'Y'}(${(active.value ? 0 : -110) * (isOppositeHorizontal || isOppositeVertical ? -1 : 1)}%)`,
          position: absolute.value || rootZIndex.value !== ROOT_ZINDEX ? 'absolute' : 'fixed',
          ...(transitionsEnabled.value ? undefined : {
            transition: 'none'
          })
        };
        if (!isMounted.value) return styles;
        if (index.value < 0) throw new Error(`Layout item "${id}" is missing`);
        const item = items.value[index.value];
        if (!item) throw new Error(`Could not find layout item "${id}`);
        const overlap = computedOverlaps.value.get(id);

        if (overlap) {
          item[overlap.position] += overlap.amount;
        }

        return { ...styles,
          height: isHorizontal ? `calc(100% - ${item.top}px - ${item.bottom}px)` : elementSize.value ? `${elementSize.value}px` : undefined,
          marginLeft: isOppositeHorizontal ? undefined : `${item.left}px`,
          marginRight: isOppositeHorizontal ? `${item.right}px` : undefined,
          marginTop: position.value !== 'bottom' ? `${item.top}px` : undefined,
          marginBottom: position.value !== 'top' ? `${item.bottom}px` : undefined,
          width: !isHorizontal ? `calc(100% - ${item.left}px - ${item.right}px)` : elementSize.value ? `${elementSize.value}px` : undefined
        };
      });
      const layoutItemScrimStyles = (0,runtime_core_esm_bundler/* computed */.Fl)(() => ({
        zIndex: zIndex.value - 1,
        position: rootZIndex.value === ROOT_ZINDEX ? 'fixed' : 'absolute'
      }));
      return {
        layoutItemStyles,
        layoutItemScrimStyles,
        zIndex
      };
    },
    unregister: id => {
      priorities.delete(id);
      positions.delete(id);
      layoutSizes.delete(id);
      activeItems.delete(id);
      disabledTransitions.delete(id);
      registered.value = registered.value.filter(v => v !== id);
    },
    mainStyles,
    getLayoutItem,
    items,
    layoutRect,
    rootZIndex
  });
  const layoutClasses = (0,runtime_core_esm_bundler/* computed */.Fl)(() => ['v-layout', {
    'v-layout--full-height': props.fullHeight
  }]);
  const layoutStyles = (0,runtime_core_esm_bundler/* computed */.Fl)(() => ({
    zIndex: rootZIndex.value
  }));
  return {
    layoutClasses,
    layoutStyles,
    getLayoutItem,
    items,
    layoutRect,
    layoutRef: resizeRef
  };
}
//# sourceMappingURL=layout.mjs.map
// EXTERNAL MODULE: ./node_modules/vuetify/lib/util/defineComponent.mjs
var defineComponent = __webpack_require__(719);
;// CONCATENATED MODULE: ./node_modules/vuetify/lib/util/useRender.mjs
// Utilities
 // Types

function useRender(render) {
  const vm = (0,util_getCurrentInstance/* getCurrentInstance */.F)('useRender');
  vm.render = render;
}
//# sourceMappingURL=useRender.mjs.map
// EXTERNAL MODULE: ./node_modules/vuetify/lib/composables/rtl.mjs + 1 modules
var rtl = __webpack_require__(144);
;// CONCATENATED MODULE: ./node_modules/vuetify/lib/components/VApp/VApp.mjs

// Styles
 // Composables


 // Utilities



const VApp = (0,defineComponent/* defineComponent */.a)({
  name: 'VApp',
  props: { ...makeLayoutProps({
      fullHeight: true
    }),
    ...(0,composables_theme/* makeThemeProps */.x$)()
  },

  setup(props, _ref) {
    let {
      slots
    } = _ref;
    const theme = (0,composables_theme/* provideTheme */.ER)(props);
    const {
      layoutClasses,
      layoutStyles,
      getLayoutItem,
      items,
      layoutRef
    } = createLayout(props);
    const {
      rtlClasses
    } = (0,rtl/* useRtl */.Vw)();
    useRender(() => {
      var _slots$default;

      return (0,runtime_core_esm_bundler/* createVNode */.Wm)("div", {
        "ref": layoutRef,
        "class": ['v-application', theme.themeClasses.value, layoutClasses.value, rtlClasses.value],
        "style": layoutStyles.value,
        "data-app": "true"
      }, [(0,runtime_core_esm_bundler/* createVNode */.Wm)("div", {
        "class": "v-application__wrap"
      }, [(_slots$default = slots.default) == null ? void 0 : _slots$default.call(slots)])]);
    });
    return {
      getLayoutItem,
      items,
      theme
    };
  }

});
//# sourceMappingURL=VApp.mjs.map
;// CONCATENATED MODULE: ./node_modules/vuetify/lib/components/VApp/index.mjs

//# sourceMappingURL=index.mjs.map
;// CONCATENATED MODULE: ./node_modules/vuetify/lib/components/VAppBar/VAppBar.css
// extracted by mini-css-extract-plugin

;// CONCATENATED MODULE: ./node_modules/vuetify/lib/components/VToolbar/VToolbar.css
// extracted by mini-css-extract-plugin

// EXTERNAL MODULE: ./node_modules/vuetify/lib/composables/defaults.mjs
var composables_defaults = __webpack_require__(474);
;// CONCATENATED MODULE: ./node_modules/vuetify/lib/components/VDefaultsProvider/VDefaultsProvider.mjs
// Composables
 // Utilities

 // Types

const VDefaultsProvider = (0,runtime_core_esm_bundler/* defineComponent */.aZ)({
  name: 'VDefaultsProvider',
  props: {
    defaults: Object,
    reset: [Number, String],
    root: Boolean,
    scoped: Boolean
  },

  setup(props, _ref) {
    let {
      slots
    } = _ref;
    const {
      defaults,
      reset,
      root,
      scoped
    } = (0,reactivity_esm_bundler/* toRefs */.BK)(props);
    (0,composables_defaults/* provideDefaults */.AF)(defaults, {
      reset,
      root,
      scoped
    });
    return () => {
      var _slots$default;

      return (_slots$default = slots.default) == null ? void 0 : _slots$default.call(slots);
    };
  }

});
//# sourceMappingURL=VDefaultsProvider.mjs.map
;// CONCATENATED MODULE: ./node_modules/vuetify/lib/components/VImg/VImg.css
// extracted by mini-css-extract-plugin

;// CONCATENATED MODULE: ./node_modules/vuetify/lib/components/VResponsive/VResponsive.css
// extracted by mini-css-extract-plugin

;// CONCATENATED MODULE: ./node_modules/vuetify/lib/composables/dimensions.mjs
// Utilities

 // Types

// Composables
const makeDimensionProps = (0,propsFactory/* propsFactory */.U)({
  height: [Number, String],
  maxHeight: [Number, String],
  maxWidth: [Number, String],
  minHeight: [Number, String],
  minWidth: [Number, String],
  width: [Number, String]
}, 'dimension');
function useDimension(props) {
  const dimensionStyles = (0,runtime_core_esm_bundler/* computed */.Fl)(() => ({
    height: (0,helpers/* convertToUnit */.kb)(props.height),
    maxHeight: (0,helpers/* convertToUnit */.kb)(props.maxHeight),
    maxWidth: (0,helpers/* convertToUnit */.kb)(props.maxWidth),
    minHeight: (0,helpers/* convertToUnit */.kb)(props.minHeight),
    minWidth: (0,helpers/* convertToUnit */.kb)(props.minWidth),
    width: (0,helpers/* convertToUnit */.kb)(props.width)
  }));
  return {
    dimensionStyles
  };
}
//# sourceMappingURL=dimensions.mjs.map
;// CONCATENATED MODULE: ./node_modules/vuetify/lib/components/VResponsive/VResponsive.mjs

// Styles
 // Composables

 // Utilities



function useAspectStyles(props) {
  return {
    aspectStyles: (0,runtime_core_esm_bundler/* computed */.Fl)(() => {
      const ratio = Number(props.aspectRatio);
      return ratio ? {
        paddingBottom: String(1 / ratio * 100) + '%'
      } : undefined;
    })
  };
}
const VResponsive = (0,defineComponent/* defineComponent */.a)({
  name: 'VResponsive',
  props: {
    aspectRatio: [String, Number],
    contentClass: String,
    ...makeDimensionProps()
  },

  setup(props, _ref) {
    let {
      slots
    } = _ref;
    const {
      dimensionStyles
    } = useDimension(props);
    const {
      aspectStyles
    } = useAspectStyles(props);
    return () => {
      var _slots$additional;

      return (0,runtime_core_esm_bundler/* createVNode */.Wm)("div", {
        "class": "v-responsive",
        "style": dimensionStyles.value
      }, [(0,runtime_core_esm_bundler/* createVNode */.Wm)("div", {
        "class": "v-responsive__sizer",
        "style": aspectStyles.value
      }, null), (_slots$additional = slots.additional) == null ? void 0 : _slots$additional.call(slots), slots.default && (0,runtime_core_esm_bundler/* createVNode */.Wm)("div", {
        "class": ['v-responsive__content', props.contentClass]
      }, [slots.default()])]);
    };
  }

});
//# sourceMappingURL=VResponsive.mjs.map
// EXTERNAL MODULE: ./node_modules/vuetify/lib/directives/intersect/index.mjs
var intersect = __webpack_require__(137);
// EXTERNAL MODULE: ./node_modules/@vue/runtime-dom/dist/runtime-dom.esm-bundler.js
var runtime_dom_esm_bundler = __webpack_require__(963);
;// CONCATENATED MODULE: ./node_modules/vuetify/lib/composables/transition.mjs
// Utilities

 // Types

const makeTransitionProps = (0,propsFactory/* propsFactory */.U)({
  transition: {
    type: [Boolean, String, Object],
    default: 'fade-transition',
    validator: val => val !== true
  }
}, 'transition');
const MaybeTransition = (props, _ref) => {
  var _slots$default;

  let {
    slots
  } = _ref;
  const {
    transition,
    ...rest
  } = props;
  if (!transition || typeof transition === 'boolean') return (_slots$default = slots.default) == null ? void 0 : _slots$default.call(slots);
  const {
    component = runtime_dom_esm_bundler/* Transition */.uT,
    ...customProps
  } = typeof transition === 'object' ? transition : {};
  return (0,runtime_core_esm_bundler.h)(component, (0,runtime_core_esm_bundler/* mergeProps */.dG)(typeof transition === 'string' ? {
    name: transition
  } : customProps, rest), slots);
};
//# sourceMappingURL=transition.mjs.map
;// CONCATENATED MODULE: ./node_modules/vuetify/lib/components/VImg/VImg.mjs

 // Components

 // Directives

 // Composables

 // Utilities


 // Types

const VImg = (0,defineComponent/* defineComponent */.a)({
  name: 'VImg',
  directives: {
    intersect: intersect/* default */.Z
  },
  props: {
    aspectRatio: [String, Number],
    alt: String,
    cover: Boolean,
    eager: Boolean,
    gradient: String,
    lazySrc: String,
    options: {
      type: Object,
      // For more information on types, navigate to:
      // https://developer.mozilla.org/en-US/docs/Web/API/Intersection_Observer_API
      default: () => ({
        root: undefined,
        rootMargin: undefined,
        threshold: undefined
      })
    },
    sizes: String,
    src: {
      type: [String, Object],
      default: ''
    },
    srcset: String,
    width: [String, Number],
    ...makeTransitionProps()
  },
  emits: ['loadstart', 'load', 'error'],

  setup(props, _ref) {
    let {
      emit,
      slots
    } = _ref;
    const currentSrc = (0,reactivity_esm_bundler/* ref */.iH)(''); // Set from srcset

    const image = (0,reactivity_esm_bundler/* ref */.iH)();
    const state = (0,reactivity_esm_bundler/* ref */.iH)(props.eager ? 'loading' : 'idle');
    const naturalWidth = (0,reactivity_esm_bundler/* ref */.iH)();
    const naturalHeight = (0,reactivity_esm_bundler/* ref */.iH)();
    const normalisedSrc = (0,runtime_core_esm_bundler/* computed */.Fl)(() => {
      return props.src && typeof props.src === 'object' ? {
        src: props.src.src,
        srcset: props.srcset || props.src.srcset,
        lazySrc: props.lazySrc || props.src.lazySrc,
        aspect: Number(props.aspectRatio || props.src.aspect)
      } : {
        src: props.src,
        srcset: props.srcset,
        lazySrc: props.lazySrc,
        aspect: Number(props.aspectRatio || 0)
      };
    });
    const aspectRatio = (0,runtime_core_esm_bundler/* computed */.Fl)(() => {
      return normalisedSrc.value.aspect || naturalWidth.value / naturalHeight.value || 0;
    });
    (0,runtime_core_esm_bundler/* watch */.YP)(() => props.src, () => {
      init(state.value !== 'idle');
    }); // TODO: getSrc when window width changes

    (0,runtime_core_esm_bundler/* onBeforeMount */.wF)(() => init());

    function init(isIntersecting) {
      if (props.eager && isIntersecting) return;
      if (globals/* SUPPORTS_INTERSECTION */.cu && !isIntersecting && !props.eager) return;
      state.value = 'loading';

      if (normalisedSrc.value.lazySrc) {
        const lazyImg = new Image();
        lazyImg.src = normalisedSrc.value.lazySrc;
        pollForSize(lazyImg, null);
      }

      if (!normalisedSrc.value.src) return;
      (0,runtime_core_esm_bundler/* nextTick */.Y3)(() => {
        var _image$value, _image$value2;

        emit('loadstart', ((_image$value = image.value) == null ? void 0 : _image$value.currentSrc) || normalisedSrc.value.src);

        if ((_image$value2 = image.value) != null && _image$value2.complete) {
          if (!image.value.naturalWidth) {
            onError();
          }

          if (state.value === 'error') return;
          if (!aspectRatio.value) pollForSize(image.value, null);
          onLoad();
        } else {
          if (!aspectRatio.value) pollForSize(image.value);
          getSrc();
        }
      });
    }

    function onLoad() {
      var _image$value3;

      getSrc();
      state.value = 'loaded';
      emit('load', ((_image$value3 = image.value) == null ? void 0 : _image$value3.currentSrc) || normalisedSrc.value.src);
    }

    function onError() {
      var _image$value4;

      state.value = 'error';
      emit('error', ((_image$value4 = image.value) == null ? void 0 : _image$value4.currentSrc) || normalisedSrc.value.src);
    }

    function getSrc() {
      const img = image.value;
      if (img) currentSrc.value = img.currentSrc || img.src;
    }

    function pollForSize(img) {
      let timeout = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 100;

      const poll = () => {
        const {
          naturalHeight: imgHeight,
          naturalWidth: imgWidth
        } = img;

        if (imgHeight || imgWidth) {
          naturalWidth.value = imgWidth;
          naturalHeight.value = imgHeight;
        } else if (!img.complete && state.value === 'loading' && timeout != null) {
          setTimeout(poll, timeout);
        } else if (img.currentSrc.endsWith('.svg') || img.currentSrc.startsWith('data:image/svg+xml')) {
          naturalWidth.value = 1;
          naturalHeight.value = 1;
        }
      };

      poll();
    }

    const containClasses = (0,runtime_core_esm_bundler/* computed */.Fl)(() => ({
      'v-img__img--cover': props.cover,
      'v-img__img--contain': !props.cover
    }));

    const __image = (0,runtime_core_esm_bundler/* computed */.Fl)(() => {
      var _slots$sources;

      if (!normalisedSrc.value.src || state.value === 'idle') return;
      const img = (0,runtime_core_esm_bundler.h)('img', {
        class: ['v-img__img', containClasses.value],
        src: normalisedSrc.value.src,
        srcset: normalisedSrc.value.srcset,
        sizes: props.sizes,
        ref: image,
        onLoad,
        onError
      });
      const sources = (_slots$sources = slots.sources) == null ? void 0 : _slots$sources.call(slots);
      return (0,runtime_core_esm_bundler/* createVNode */.Wm)(MaybeTransition, {
        "transition": props.transition,
        "appear": true
      }, {
        default: () => [(0,runtime_core_esm_bundler/* withDirectives */.wy)(sources ? (0,runtime_core_esm_bundler/* createVNode */.Wm)("picture", {
          "class": "v-img__picture"
        }, [sources, img]) : img, [[runtime_dom_esm_bundler/* vShow */.F8, state.value === 'loaded']])]
      });
    });

    const __preloadImage = (0,runtime_core_esm_bundler/* computed */.Fl)(() => (0,runtime_core_esm_bundler/* createVNode */.Wm)(MaybeTransition, {
      "transition": props.transition
    }, {
      default: () => [normalisedSrc.value.lazySrc && state.value !== 'loaded' && (0,runtime_core_esm_bundler/* createVNode */.Wm)("img", {
        "class": ['v-img__img', 'v-img__img--preload', containClasses.value],
        "src": normalisedSrc.value.lazySrc,
        "alt": ""
      }, null)]
    }));

    const __placeholder = (0,runtime_core_esm_bundler/* computed */.Fl)(() => {
      if (!slots.placeholder) return;
      return (0,runtime_core_esm_bundler/* createVNode */.Wm)(MaybeTransition, {
        "transition": props.transition,
        "appear": true
      }, {
        default: () => [(state.value === 'loading' || state.value === 'error' && !slots.error) && (0,runtime_core_esm_bundler/* createVNode */.Wm)("div", {
          "class": "v-img__placeholder"
        }, [slots.placeholder()])]
      });
    });

    const __error = (0,runtime_core_esm_bundler/* computed */.Fl)(() => {
      if (!slots.error) return;
      return (0,runtime_core_esm_bundler/* createVNode */.Wm)(MaybeTransition, {
        "transition": props.transition,
        "appear": true
      }, {
        default: () => [state.value === 'error' && (0,runtime_core_esm_bundler/* createVNode */.Wm)("div", {
          "class": "v-img__error"
        }, [slots.error()])]
      });
    });

    const __gradient = (0,runtime_core_esm_bundler/* computed */.Fl)(() => {
      if (!props.gradient) return;
      return (0,runtime_core_esm_bundler/* createVNode */.Wm)("div", {
        "class": "v-img__gradient",
        "style": {
          backgroundImage: `linear-gradient(${props.gradient})`
        }
      }, null);
    });

    const isBooted = (0,reactivity_esm_bundler/* ref */.iH)(false);
    {
      const stop = (0,runtime_core_esm_bundler/* watch */.YP)(aspectRatio, val => {
        if (val) {
          // Doesn't work with nextTick, idk why
          requestAnimationFrame(() => {
            requestAnimationFrame(() => {
              isBooted.value = true;
            });
          });
          stop();
        }
      });
    }
    useRender(() => (0,runtime_core_esm_bundler/* withDirectives */.wy)((0,runtime_core_esm_bundler/* createVNode */.Wm)(VResponsive, {
      "class": ['v-img', {
        'v-img--booting': !isBooted.value
      }],
      "style": {
        width: (0,helpers/* convertToUnit */.kb)(props.width === 'auto' ? naturalWidth.value : props.width)
      },
      "aspectRatio": aspectRatio.value,
      "aria-label": props.alt,
      "role": props.alt ? 'img' : undefined
    }, {
      additional: () => [__image.value, __preloadImage.value, __gradient.value, __placeholder.value, __error.value],
      default: slots.default
    }), [[(0,runtime_core_esm_bundler/* resolveDirective */.Q2)("intersect"), {
      handler: init,
      options: props.options
    }, null, {
      once: true
    }]]));
    return {
      currentSrc,
      image,
      state,
      naturalWidth,
      naturalHeight
    };
  }

});
//# sourceMappingURL=VImg.mjs.map
;// CONCATENATED MODULE: ./node_modules/vuetify/lib/composables/tag.mjs
// Utilities
 // Types

// Composables
const makeTagProps = (0,propsFactory/* propsFactory */.U)({
  tag: {
    type: String,
    default: 'div'
  }
}, 'tag');
//# sourceMappingURL=tag.mjs.map
;// CONCATENATED MODULE: ./node_modules/vuetify/lib/components/VToolbar/VToolbarTitle.mjs

// Composables
 // Utilities

 // Types

const VToolbarTitle = (0,defineComponent/* genericComponent */.e)()({
  name: 'VToolbarTitle',
  props: {
    text: String,
    ...makeTagProps()
  },

  setup(props, _ref) {
    let {
      slots
    } = _ref;
    useRender(() => {
      var _slots$default;

      const hasText = !!(slots.default || slots.text || props.text);
      return (0,runtime_core_esm_bundler/* createVNode */.Wm)(props.tag, {
        "class": "v-toolbar-title"
      }, {
        default: () => [hasText && (0,runtime_core_esm_bundler/* createVNode */.Wm)("div", {
          "class": "v-toolbar-title__placeholder"
        }, [slots.text ? slots.text() : props.text, (_slots$default = slots.default) == null ? void 0 : _slots$default.call(slots)])]
      });
    });
    return {};
  }

});
//# sourceMappingURL=VToolbarTitle.mjs.map
;// CONCATENATED MODULE: ./node_modules/vuetify/lib/composables/border.mjs
// Utilities

 // Types

// Composables
const makeBorderProps = (0,propsFactory/* propsFactory */.U)({
  border: [Boolean, Number, String]
}, 'border');
function useBorder(props) {
  let name = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : (0,util_getCurrentInstance/* getCurrentInstanceName */.B)();
  const borderClasses = (0,runtime_core_esm_bundler/* computed */.Fl)(() => {
    const classes = [];

    if (props.border != null && props.border !== false) {
      classes.push(`${name}--border`);
    }

    if (typeof props.border === 'string' && props.border !== '' || props.border === 0) {
      for (const value of String(props.border).split(' ')) {
        classes.push(`border-${value}`);
      }
    }

    return classes;
  });
  return {
    borderClasses
  };
}
//# sourceMappingURL=border.mjs.map
;// CONCATENATED MODULE: ./node_modules/vuetify/lib/composables/elevation.mjs
// Utilities

 // Types

// Composables
const makeElevationProps = (0,propsFactory/* propsFactory */.U)({
  elevation: {
    type: [Number, String],

    validator(v) {
      const value = parseInt(v);
      return !isNaN(value) && value >= 0 && // Material Design has a maximum elevation of 24
      // https://material.io/design/environment/elevation.html#default-elevations
      value <= 24;
    }

  }
}, 'elevation');
function useElevation(props) {
  const elevationClasses = (0,runtime_core_esm_bundler/* computed */.Fl)(() => {
    const elevation = (0,reactivity_esm_bundler/* isRef */.dq)(props) ? props.value : props.elevation;
    const classes = [];
    if (elevation == null) return classes;
    classes.push(`elevation-${elevation}`);
    return classes;
  });
  return {
    elevationClasses
  };
}
//# sourceMappingURL=elevation.mjs.map
;// CONCATENATED MODULE: ./node_modules/vuetify/lib/composables/rounded.mjs
// Utilities

 // Types

// Composables
const makeRoundedProps = (0,propsFactory/* propsFactory */.U)({
  rounded: {
    type: [Boolean, Number, String],
    default: undefined
  }
}, 'rounded');
function useRounded(props) {
  let name = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : (0,util_getCurrentInstance/* getCurrentInstanceName */.B)();
  const roundedClasses = (0,runtime_core_esm_bundler/* computed */.Fl)(() => {
    const rounded = (0,reactivity_esm_bundler/* isRef */.dq)(props) ? props.value : props.rounded;
    const classes = [];

    if (rounded === true || rounded === '') {
      classes.push(`${name}--rounded`);
    } else if (typeof rounded === 'string' || rounded === 0) {
      for (const value of String(rounded).split(' ')) {
        classes.push(`rounded-${value}`);
      }
    }

    return classes;
  });
  return {
    roundedClasses
  };
}
//# sourceMappingURL=rounded.mjs.map
// EXTERNAL MODULE: ./node_modules/vuetify/lib/util/colorUtils.mjs + 2 modules
var colorUtils = __webpack_require__(64);
;// CONCATENATED MODULE: ./node_modules/vuetify/lib/composables/color.mjs
// Utilities

 // Types

// Composables
function useColor(colors) {
  const backgroundIsCssColor = (0,runtime_core_esm_bundler/* computed */.Fl)(() => (0,colorUtils/* isCssColor */.NA)(colors.value.background));
  const textIsCssColor = (0,runtime_core_esm_bundler/* computed */.Fl)(() => (0,colorUtils/* isCssColor */.NA)(colors.value.text));
  const colorClasses = (0,runtime_core_esm_bundler/* computed */.Fl)(() => {
    const classes = [];

    if (colors.value.background && !backgroundIsCssColor.value) {
      classes.push(`bg-${colors.value.background}`);
    }

    if (colors.value.text && !textIsCssColor.value) {
      classes.push(`text-${colors.value.text}`);
    }

    return classes;
  });
  const colorStyles = (0,runtime_core_esm_bundler/* computed */.Fl)(() => {
    const styles = {};

    if (colors.value.background && backgroundIsCssColor.value) {
      styles.backgroundColor = colors.value.background;
    }

    if (colors.value.text && textIsCssColor.value) {
      styles.color = colors.value.text;
      styles.caretColor = colors.value.text;
    }

    return styles;
  });
  return {
    colorClasses,
    colorStyles
  };
}
function useTextColor(props, name) {
  const colors = (0,runtime_core_esm_bundler/* computed */.Fl)(() => ({
    text: (0,reactivity_esm_bundler/* isRef */.dq)(props) ? props.value : name ? props[name] : null
  }));
  const {
    colorClasses: textColorClasses,
    colorStyles: textColorStyles
  } = useColor(colors);
  return {
    textColorClasses,
    textColorStyles
  };
}
function useBackgroundColor(props, name) {
  const colors = (0,runtime_core_esm_bundler/* computed */.Fl)(() => ({
    background: (0,reactivity_esm_bundler/* isRef */.dq)(props) ? props.value : name ? props[name] : null
  }));
  const {
    colorClasses: backgroundColorClasses,
    colorStyles: backgroundColorStyles
  } = useColor(colors);
  return {
    backgroundColorClasses,
    backgroundColorStyles
  };
}
//# sourceMappingURL=color.mjs.map
;// CONCATENATED MODULE: ./node_modules/vuetify/lib/composables/forwardRef.mjs
function useForwardRef(target) {
  for (var _len = arguments.length, refs = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
    refs[_key - 1] = arguments[_key];
  }

  return new Proxy(target, {
    get(target, key) {
      if (Reflect.has(target, key)) {
        return Reflect.get(target, key);
      }

      for (const ref of refs) {
        if (ref.value && Reflect.has(ref.value, key)) {
          const val = Reflect.get(ref.value, key);
          return typeof val === 'function' ? val.bind(ref.value) : val;
        }
      }
    },

    getOwnPropertyDescriptor(target, key) {
      const descriptor = Reflect.getOwnPropertyDescriptor(target, key);
      if (descriptor) return descriptor; // Check each ref's own properties

      for (const ref of refs) {
        if (!ref.value) continue;
        const descriptor = Reflect.getOwnPropertyDescriptor(ref.value, key);
        if (descriptor) return descriptor;
      } // Recursive search up each ref's prototype


      for (const ref of refs) {
        let obj = ref.value && Object.getPrototypeOf(ref.value);

        while (obj) {
          const descriptor = Reflect.getOwnPropertyDescriptor(obj, key);
          if (descriptor) return descriptor;
          obj = Object.getPrototypeOf(obj);
        }
      }

      return undefined;
    }

  });
}
//# sourceMappingURL=forwardRef.mjs.map
;// CONCATENATED MODULE: ./node_modules/vuetify/lib/components/VToolbar/VToolbar.mjs

// Styles
 // Components



 // Composables







 // Utilities


 // Types


const allowedDensities = [null, 'prominent', 'default', 'comfortable', 'compact'];
const makeVToolbarProps = (0,propsFactory/* propsFactory */.U)({
  absolute: Boolean,
  collapse: Boolean,
  color: String,
  density: {
    type: String,
    default: 'default',
    validator: v => allowedDensities.includes(v)
  },
  extended: Boolean,
  extensionHeight: {
    type: [Number, String],
    default: 48
  },
  flat: Boolean,
  floating: Boolean,
  height: {
    type: [Number, String],
    default: 56
  },
  image: String,
  title: String,
  ...makeBorderProps(),
  ...makeElevationProps(),
  ...makeRoundedProps(),
  ...makeTagProps({
    tag: 'header'
  }),
  ...(0,composables_theme/* makeThemeProps */.x$)()
}, 'v-toolbar');
const VToolbar = (0,defineComponent/* genericComponent */.e)()({
  name: 'VToolbar',
  props: makeVToolbarProps(),

  setup(props, _ref) {
    let {
      slots
    } = _ref;
    const {
      borderClasses
    } = useBorder(props);
    const {
      elevationClasses
    } = useElevation(props);
    const {
      roundedClasses
    } = useRounded(props);
    const {
      themeClasses
    } = (0,composables_theme/* provideTheme */.ER)(props);
    const {
      backgroundColorClasses,
      backgroundColorStyles
    } = useBackgroundColor((0,reactivity_esm_bundler/* toRef */.Vh)(props, 'color'));
    const isExtended = (0,runtime_core_esm_bundler/* computed */.Fl)(() => !!(props.extended || slots.extension));
    const contentHeight = (0,runtime_core_esm_bundler/* computed */.Fl)(() => parseInt(Number(props.height) + (props.density === 'prominent' ? Number(props.height) : 0) - (props.density === 'comfortable' ? 8 : 0) - (props.density === 'compact' ? 16 : 0), 10));
    const extensionHeight = (0,runtime_core_esm_bundler/* computed */.Fl)(() => isExtended.value ? parseInt(Number(props.extensionHeight) + (props.density === 'prominent' ? Number(props.extensionHeight) : 0) - (props.density === 'comfortable' ? 4 : 0) - (props.density === 'compact' ? 8 : 0), 10) : 0);
    (0,composables_defaults/* provideDefaults */.AF)({
      VBtn: {
        flat: true,
        variant: 'text'
      }
    });
    useRender(() => {
      var _slots$image, _slots$prepend, _slots$default, _slots$append, _slots$extension;

      const hasTitle = !!(props.title || slots.title);
      const hasImage = !!(slots.image || props.image);
      return (0,runtime_core_esm_bundler/* createVNode */.Wm)(props.tag, {
        "class": ['v-toolbar', {
          'v-toolbar--absolute': props.absolute,
          'v-toolbar--collapse': props.collapse,
          'v-toolbar--flat': props.flat,
          'v-toolbar--floating': props.floating,
          [`v-toolbar--density-${props.density}`]: true
        }, backgroundColorClasses.value, borderClasses.value, elevationClasses.value, roundedClasses.value, themeClasses.value],
        "style": [backgroundColorStyles.value]
      }, {
        default: () => [hasImage && (0,runtime_core_esm_bundler/* createVNode */.Wm)("div", {
          "class": "v-toolbar__image"
        }, [(0,runtime_core_esm_bundler/* createVNode */.Wm)(VDefaultsProvider, {
          "defaults": {
            VImg: {
              cover: true,
              src: props.image
            }
          },
          "scoped": true
        }, {
          default: () => [slots.image ? (_slots$image = slots.image) == null ? void 0 : _slots$image.call(slots) : (0,runtime_core_esm_bundler/* createVNode */.Wm)(VImg, null, null)]
        })]), (0,runtime_core_esm_bundler/* createVNode */.Wm)("div", {
          "class": "v-toolbar__content",
          "style": {
            height: (0,helpers/* convertToUnit */.kb)(contentHeight.value)
          }
        }, [slots.prepend && (0,runtime_core_esm_bundler/* createVNode */.Wm)("div", {
          "class": "v-toolbar__prepend"
        }, [(_slots$prepend = slots.prepend) == null ? void 0 : _slots$prepend.call(slots)]), hasTitle && (0,runtime_core_esm_bundler/* createVNode */.Wm)(VToolbarTitle, {
          "text": props.title
        }, {
          text: slots.title
        }), (_slots$default = slots.default) == null ? void 0 : _slots$default.call(slots), slots.append && (0,runtime_core_esm_bundler/* createVNode */.Wm)("div", {
          "class": "v-toolbar__append"
        }, [(_slots$append = slots.append) == null ? void 0 : _slots$append.call(slots)])]), isExtended.value && (0,runtime_core_esm_bundler/* createVNode */.Wm)("div", {
          "class": "v-toolbar__extension",
          "style": {
            height: (0,helpers/* convertToUnit */.kb)(extensionHeight.value)
          }
        }, [(_slots$extension = slots.extension) == null ? void 0 : _slots$extension.call(slots)])]
      });
    });
    return useForwardRef({
      contentHeight,
      extensionHeight
    });
  }

});
function filterToolbarProps(props) {
  var _VToolbar$props;

  return (0,helpers/* pick */.ei)(props, Object.keys((_VToolbar$props = VToolbar == null ? void 0 : VToolbar.props) != null ? _VToolbar$props : {}));
}
//# sourceMappingURL=VToolbar.mjs.map
;// CONCATENATED MODULE: ./node_modules/vuetify/lib/composables/proxiedModel.mjs
// Utilities

 // Types

// Composables
function useProxiedModel(props, prop, defaultValue) {
  let transformIn = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : v => v;
  let transformOut = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : v => v;
  const vm = (0,util_getCurrentInstance/* getCurrentInstance */.F)('useProxiedModel');
  const propIsDefined = (0,runtime_core_esm_bundler/* computed */.Fl)(() => {
    var _vm$vnode$props, _vm$vnode$props2;

    return !!(typeof props[prop] !== 'undefined' && (vm != null && (_vm$vnode$props = vm.vnode.props) != null && _vm$vnode$props.hasOwnProperty(prop) || vm != null && (_vm$vnode$props2 = vm.vnode.props) != null && _vm$vnode$props2.hasOwnProperty((0,helpers/* toKebabCase */.mA)(prop))));
  });
  const internal = (0,reactivity_esm_bundler/* ref */.iH)(transformIn(props[prop]));
  return (0,runtime_core_esm_bundler/* computed */.Fl)({
    get() {
      if (propIsDefined.value) return transformIn(props[prop]);else return internal.value;
    },

    set(newValue) {
      if ((propIsDefined.value ? transformIn(props[prop]) : internal.value) === newValue) {
        return;
      }

      internal.value = newValue;
      vm == null ? void 0 : vm.emit(`update:${prop}`, transformOut(newValue));
    }

  });
}
//# sourceMappingURL=proxiedModel.mjs.map
;// CONCATENATED MODULE: ./node_modules/vuetify/lib/components/VAppBar/VAppBar.mjs

// Styles
 // Components

 // Composables


 // Utilities


 // Types

const VAppBar = (0,defineComponent/* defineComponent */.a)({
  name: 'VAppBar',
  props: {
    // TODO: Implement scrolling techniques
    // hideOnScroll: Boolean
    // invertedScroll: Boolean
    // collapseOnScroll: Boolean
    // elevateOnScroll: Boolean
    // shrinkOnScroll: Boolean
    // fadeImageOnScroll: Boolean
    modelValue: {
      type: Boolean,
      default: true
    },
    position: {
      type: String,
      default: 'top',
      validator: value => ['top', 'bottom'].includes(value)
    },
    ...makeVToolbarProps(),
    ...makeLayoutItemProps(),
    height: {
      type: [Number, String],
      default: 64
    }
  },
  emits: {
    'update:modelValue': value => true
  },

  setup(props, _ref) {
    let {
      slots
    } = _ref;
    const vToolbarRef = (0,reactivity_esm_bundler/* ref */.iH)();
    const isActive = useProxiedModel(props, 'modelValue');
    const height = (0,runtime_core_esm_bundler/* computed */.Fl)(() => {
      var _vToolbarRef$value$co, _vToolbarRef$value, _vToolbarRef$value$ex, _vToolbarRef$value2;

      const height = (_vToolbarRef$value$co = (_vToolbarRef$value = vToolbarRef.value) == null ? void 0 : _vToolbarRef$value.contentHeight) != null ? _vToolbarRef$value$co : 0;
      const extensionHeight = (_vToolbarRef$value$ex = (_vToolbarRef$value2 = vToolbarRef.value) == null ? void 0 : _vToolbarRef$value2.extensionHeight) != null ? _vToolbarRef$value$ex : 0;
      return height + extensionHeight;
    });
    const {
      layoutItemStyles
    } = useLayoutItem({
      id: props.name,
      priority: (0,runtime_core_esm_bundler/* computed */.Fl)(() => parseInt(props.priority, 10)),
      position: (0,reactivity_esm_bundler/* toRef */.Vh)(props, 'position'),
      layoutSize: height,
      elementSize: height,
      active: isActive,
      absolute: (0,reactivity_esm_bundler/* toRef */.Vh)(props, 'absolute')
    });
    return () => {
      const [toolbarProps] = filterToolbarProps(props);
      return (0,runtime_core_esm_bundler/* createVNode */.Wm)(VToolbar, (0,runtime_core_esm_bundler/* mergeProps */.dG)({
        "ref": vToolbarRef,
        "class": ['v-app-bar', {
          'v-app-bar--bottom': props.position === 'bottom'
        }],
        "style": { ...layoutItemStyles.value,
          height: undefined
        }
      }, toolbarProps), slots);
    };
  }

});
//# sourceMappingURL=VAppBar.mjs.map
;// CONCATENATED MODULE: ./node_modules/vuetify/lib/components/VBtn/VBtn.css
// extracted by mini-css-extract-plugin

;// CONCATENATED MODULE: ./node_modules/vuetify/lib/components/VBtnToggle/VBtnToggle.css
// extracted by mini-css-extract-plugin

;// CONCATENATED MODULE: ./node_modules/vuetify/lib/components/VBtnGroup/VBtnGroup.css
// extracted by mini-css-extract-plugin

;// CONCATENATED MODULE: ./node_modules/vuetify/lib/composables/density.mjs
// Utilities

 // Types

const density_allowedDensities = [null, 'default', 'comfortable', 'compact'];
// Composables
const makeDensityProps = (0,propsFactory/* propsFactory */.U)({
  density: {
    type: String,
    default: 'default',
    validator: v => density_allowedDensities.includes(v)
  }
}, 'density');
function useDensity(props) {
  let name = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : (0,util_getCurrentInstance/* getCurrentInstanceName */.B)();
  const densityClasses = (0,runtime_core_esm_bundler/* computed */.Fl)(() => {
    return `${name}--density-${props.density}`;
  });
  return {
    densityClasses
  };
}
//# sourceMappingURL=density.mjs.map
;// CONCATENATED MODULE: ./node_modules/vuetify/lib/composables/variant.mjs

// Composables
 // Utilities


 // Types

const allowedVariants = ['outlined', 'plain', 'text', 'contained', 'contained-flat', 'contained-text'];
function genOverlays(isClickable, name) {
  return (0,runtime_core_esm_bundler/* createVNode */.Wm)(runtime_core_esm_bundler/* Fragment */.HY, null, [isClickable && (0,runtime_core_esm_bundler/* createVNode */.Wm)("div", {
    "class": `${name}__overlay`
  }, null), (0,runtime_core_esm_bundler/* createVNode */.Wm)("div", {
    "class": `${name}__underlay`
  }, null)]);
}
const makeVariantProps = (0,propsFactory/* propsFactory */.U)({
  color: String,
  variant: {
    type: String,
    default: 'contained',
    validator: v => allowedVariants.includes(v)
  }
}, 'variant');
function useVariant(props) {
  let name = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : (0,util_getCurrentInstance/* getCurrentInstanceName */.B)();
  const variantClasses = (0,runtime_core_esm_bundler/* computed */.Fl)(() => {
    const {
      variant
    } = (0,reactivity_esm_bundler/* unref */.SU)(props);
    return `${name}--variant-${variant}`;
  });
  const {
    colorClasses,
    colorStyles
  } = useColor((0,runtime_core_esm_bundler/* computed */.Fl)(() => {
    const {
      variant,
      color
    } = (0,reactivity_esm_bundler/* unref */.SU)(props);
    return {
      [['contained', 'contained-flat'].includes(variant) ? 'background' : 'text']: color
    };
  }));
  return {
    colorClasses,
    colorStyles,
    variantClasses
  };
}
//# sourceMappingURL=variant.mjs.map
;// CONCATENATED MODULE: ./node_modules/vuetify/lib/components/VBtnGroup/VBtnGroup.mjs

// Styles
 // Composables








 // Utility



const VBtnGroup = (0,defineComponent/* defineComponent */.a)({
  name: 'VBtnGroup',
  props: {
    divided: Boolean,
    ...makeBorderProps(),
    ...makeDensityProps(),
    ...makeElevationProps(),
    ...makeRoundedProps(),
    ...makeTagProps(),
    ...(0,composables_theme/* makeThemeProps */.x$)(),
    ...makeVariantProps()
  },

  setup(props, _ref) {
    let {
      slots
    } = _ref;
    const {
      themeClasses
    } = (0,composables_theme/* provideTheme */.ER)(props);
    const {
      densityClasses
    } = useDensity(props);
    const {
      borderClasses
    } = useBorder(props);
    const {
      elevationClasses
    } = useElevation(props);
    const {
      roundedClasses
    } = useRounded(props);
    (0,composables_defaults/* provideDefaults */.AF)({
      VBtn: {
        height: 'auto',
        color: (0,reactivity_esm_bundler/* toRef */.Vh)(props, 'color'),
        density: (0,reactivity_esm_bundler/* toRef */.Vh)(props, 'density'),
        flat: true,
        variant: (0,reactivity_esm_bundler/* toRef */.Vh)(props, 'variant')
      }
    });
    useRender(() => {
      return (0,runtime_core_esm_bundler/* createVNode */.Wm)(props.tag, {
        "class": ['v-btn-group', {
          'v-btn-group--divided': props.divided
        }, themeClasses.value, borderClasses.value, densityClasses.value, elevationClasses.value, roundedClasses.value]
      }, slots);
    });
  }

});
//# sourceMappingURL=VBtnGroup.mjs.map
// EXTERNAL MODULE: ./node_modules/vuetify/lib/util/console.mjs
var util_console = __webpack_require__(130);
;// CONCATENATED MODULE: ./node_modules/vuetify/lib/composables/group.mjs
// Composables
 // Utilities


 // Types

const makeGroupProps = (0,propsFactory/* propsFactory */.U)({
  modelValue: {
    type: null,
    default: undefined
  },
  multiple: Boolean,
  mandatory: [Boolean, String],
  max: Number,
  selectedClass: String,
  disabled: Boolean
}, 'group');
const makeGroupItemProps = (0,propsFactory/* propsFactory */.U)({
  value: null,
  disabled: Boolean,
  selectedClass: String
}, 'group-item');
function useGroupItem(props, injectKey) {
  let required = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : true;
  const vm = (0,util_getCurrentInstance/* getCurrentInstance */.F)('useGroupItem');

  if (!vm) {
    throw new Error('[Vuetify] useGroupItem composable must be used inside a component setup function');
  }

  const id = (0,helpers/* getUid */.sq)();
  (0,runtime_core_esm_bundler/* provide */.JJ)(Symbol.for(`${injectKey.description}:id`), id);
  const group = (0,runtime_core_esm_bundler/* inject */.f3)(injectKey, null);

  if (!group) {
    if (!required) return group;
    throw new Error(`[Vuetify] Could not find useGroup injection with symbol ${injectKey.description}`);
  }

  const value = (0,reactivity_esm_bundler/* toRef */.Vh)(props, 'value');
  const disabled = (0,runtime_core_esm_bundler/* computed */.Fl)(() => group.disabled.value || props.disabled);
  group.register({
    id,
    value,
    disabled
  }, vm);
  (0,runtime_core_esm_bundler/* onBeforeUnmount */.Jd)(() => {
    group.unregister(id);
  });
  const isSelected = (0,runtime_core_esm_bundler/* computed */.Fl)(() => {
    return group.isSelected(id);
  });
  const selectedClass = (0,runtime_core_esm_bundler/* computed */.Fl)(() => isSelected.value && [group.selectedClass.value, props.selectedClass]);
  (0,runtime_core_esm_bundler/* watch */.YP)(isSelected, value => {
    vm.emit('group:selected', {
      value
    });
  });
  return {
    id,
    isSelected,
    toggle: () => group.select(id, !isSelected.value),
    select: value => group.select(id, value),
    selectedClass,
    value,
    disabled,
    group
  };
}
function useGroup(props, injectKey) {
  let isUnmounted = false;
  const items = (0,reactivity_esm_bundler/* reactive */.qj)([]);
  const selected = useProxiedModel(props, 'modelValue', [], v => {
    if (v == null) return [];
    return getIds(items, (0,helpers/* wrapInArray */.FT)(v));
  }, v => {
    const arr = getValues(items, v);
    return props.multiple ? arr : arr[0];
  });
  const groupVm = (0,util_getCurrentInstance/* getCurrentInstance */.F)('useGroup');

  function register(item, vm) {
    // Is there a better way to fix this typing?
    const unwrapped = item;
    const key = Symbol.for(`${injectKey.description}:id`);
    const children = (0,helpers/* findChildrenWithProvide */.bY)(key, groupVm == null ? void 0 : groupVm.vnode);
    const index = children.indexOf(vm);

    if (index > -1) {
      items.splice(index, 0, unwrapped);
    } else {
      items.push(unwrapped);
    }
  }

  function unregister(id) {
    if (isUnmounted) return; // TODO: re-evaluate this line's importance in the future
    // should we only modify the model if mandatory is set.
    // selected.value = selected.value.filter(v => v !== id)

    forceMandatoryValue();
    const index = items.findIndex(item => item.id === id);
    items.splice(index, 1);
  } // If mandatory and nothing is selected, then select first non-disabled item


  function forceMandatoryValue() {
    const item = items.find(item => !item.disabled);

    if (item && props.mandatory === 'force' && !selected.value.length) {
      selected.value = [item.id];
    }
  }

  (0,runtime_core_esm_bundler/* onMounted */.bv)(() => {
    forceMandatoryValue();
  });
  (0,runtime_core_esm_bundler/* onBeforeUnmount */.Jd)(() => {
    isUnmounted = true;
  });

  function select(id, value) {
    const item = items.find(item => item.id === id);
    if (value && item != null && item.disabled) return;

    if (props.multiple) {
      var _value;

      const internalValue = selected.value.slice();
      const index = internalValue.findIndex(v => v === id);
      const isSelected = ~index;
      value = (_value = value) != null ? _value : !isSelected; // We can't remove value if group is
      // mandatory, value already exists,
      // and it is the only value

      if (isSelected && props.mandatory && internalValue.length <= 1) return; // We can't add value if it would
      // cause max limit to be exceeded

      if (!isSelected && props.max != null && internalValue.length + 1 > props.max) return;
      if (index < 0 && value) internalValue.push(id);else if (index >= 0 && !value) internalValue.splice(index, 1);
      selected.value = internalValue;
    } else {
      var _value2;

      const isSelected = selected.value.includes(id);
      if (props.mandatory && isSelected) return;
      selected.value = ((_value2 = value) != null ? _value2 : !isSelected) ? [id] : [];
    }
  }

  function step(offset) {
    // getting an offset from selected value obviously won't work with multiple values
    if (props.multiple) (0,util_console/* consoleWarn */.Kd)('This method is not supported when using "multiple" prop');

    if (!selected.value.length) {
      const item = items.find(item => !item.disabled);
      item && (selected.value = [item.id]);
    } else {
      const currentId = selected.value[0];
      const currentIndex = items.findIndex(i => i.id === currentId);
      let newIndex = (currentIndex + offset) % items.length;
      let newItem = items[newIndex];

      while (newItem.disabled && newIndex !== currentIndex) {
        newIndex = (newIndex + offset) % items.length;
        newItem = items[newIndex];
      }

      if (newItem.disabled) return;
      selected.value = [items[newIndex].id];
    }
  }

  const state = {
    register,
    unregister,
    selected,
    select,
    disabled: (0,reactivity_esm_bundler/* toRef */.Vh)(props, 'disabled'),
    prev: () => step(items.length - 1),
    next: () => step(1),
    isSelected: id => selected.value.includes(id),
    selectedClass: (0,runtime_core_esm_bundler/* computed */.Fl)(() => props.selectedClass),
    items: (0,runtime_core_esm_bundler/* computed */.Fl)(() => items),
    getItemIndex: value => getItemIndex(items, value)
  };
  (0,runtime_core_esm_bundler/* provide */.JJ)(injectKey, state);
  return state;
}

function getItemIndex(items, value) {
  const ids = getIds(items, [value]);
  if (!ids.length) return -1;
  return items.findIndex(item => item.id === ids[0]);
}

function getIds(items, modelValue) {
  const ids = [];

  for (let i = 0; i < items.length; i++) {
    const item = items[i];

    if (item.value != null) {
      if (modelValue.find(value => (0,helpers/* deepEqual */.vZ)(value, item.value)) != null) {
        ids.push(item.id);
      }
    } else if (modelValue.includes(i)) {
      ids.push(item.id);
    }
  }

  return ids;
}

function getValues(items, ids) {
  const values = [];

  for (let i = 0; i < items.length; i++) {
    const item = items[i];

    if (ids.includes(item.id)) {
      values.push(item.value != null ? item.value : i);
    }
  }

  return values;
}
//# sourceMappingURL=group.mjs.map
;// CONCATENATED MODULE: ./node_modules/vuetify/lib/components/VBtnToggle/VBtnToggle.mjs

// Styles
 // Components

 // Composables

 // Utility

 // Types

const VBtnToggleSymbol = Symbol.for('vuetify:v-btn-toggle');
const VBtnToggle = (0,defineComponent/* genericComponent */.e)()({
  name: 'VBtnToggle',
  props: makeGroupProps({
    selectedClass: 'v-btn--selected'
  }),
  emits: {
    'update:modelValue': value => true
  },

  setup(props, _ref) {
    let {
      slots
    } = _ref;
    const {
      isSelected,
      next,
      prev,
      select,
      selected
    } = useGroup(props, VBtnToggleSymbol);
    useRender(() => {
      var _slots$default;

      return (0,runtime_core_esm_bundler/* createVNode */.Wm)(VBtnGroup, {
        "class": "v-btn-toggle"
      }, {
        default: () => [(_slots$default = slots.default) == null ? void 0 : _slots$default.call(slots, {
          isSelected,
          next,
          prev,
          select,
          selected
        })]
      });
    });
    return {
      next,
      prev,
      select
    };
  }

});
//# sourceMappingURL=VBtnToggle.mjs.map
;// CONCATENATED MODULE: ./node_modules/vuetify/lib/components/VIcon/VIcon.css
// extracted by mini-css-extract-plugin

;// CONCATENATED MODULE: ./node_modules/vuetify/lib/composables/size.mjs
// Utilities

 // Types

const predefinedSizes = ['x-small', 'small', 'default', 'large', 'x-large'];
// Composables
const makeSizeProps = (0,propsFactory/* propsFactory */.U)({
  size: {
    type: [String, Number],
    default: 'default'
  }
}, 'size');
function useSize(props) {
  let name = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : (0,util_getCurrentInstance/* getCurrentInstanceName */.B)();
  const sizeClasses = (0,runtime_core_esm_bundler/* computed */.Fl)(() => {
    return predefinedSizes.includes(props.size) ? `${name}--size-${props.size}` : null;
  });
  const sizeStyles = (0,runtime_core_esm_bundler/* computed */.Fl)(() => {
    return !predefinedSizes.includes(props.size) && props.size ? {
      width: (0,helpers/* convertToUnit */.kb)(props.size),
      height: (0,helpers/* convertToUnit */.kb)(props.size)
    } : null;
  });
  return {
    sizeClasses,
    sizeStyles
  };
}
//# sourceMappingURL=size.mjs.map
// EXTERNAL MODULE: ./node_modules/vuetify/lib/composables/icons.mjs
var icons = __webpack_require__(264);
;// CONCATENATED MODULE: ./node_modules/vuetify/lib/components/VIcon/VIcon.mjs

// Styles
 // Composables





 // Utilities


 // Types

const makeVIconProps = (0,propsFactory/* propsFactory */.U)({
  color: String,
  start: Boolean,
  end: Boolean,
  icon: {
    type: [String, Object]
  },
  ...makeSizeProps(),
  ...makeTagProps({
    tag: 'i'
  }),
  ...(0,composables_theme/* makeThemeProps */.x$)()
}, 'v-icon');
const VIcon = (0,defineComponent/* defineComponent */.a)({
  name: 'VIcon',
  props: makeVIconProps(),

  setup(props, _ref) {
    let {
      attrs,
      slots
    } = _ref;
    let slotIcon;

    if (slots.default) {
      slotIcon = (0,runtime_core_esm_bundler/* computed */.Fl)(() => {
        var _slots$default, _flattenFragments$fil;

        const slot = (_slots$default = slots.default) == null ? void 0 : _slots$default.call(slots);
        if (!slot) return;
        return (_flattenFragments$fil = (0,helpers/* flattenFragments */.RA)(slot).filter(node => node.children && typeof node.children === 'string')[0]) == null ? void 0 : _flattenFragments$fil.children;
      });
    }

    const {
      themeClasses
    } = (0,composables_theme/* provideTheme */.ER)(props);
    const {
      iconData
    } = (0,icons/* useIcon */.bi)(slotIcon || props);
    const {
      sizeClasses
    } = useSize(props);
    const {
      textColorClasses,
      textColorStyles
    } = useTextColor((0,reactivity_esm_bundler/* toRef */.Vh)(props, 'color'));
    return () => {
      return (0,runtime_core_esm_bundler/* createVNode */.Wm)(iconData.value.component, {
        "tag": props.tag,
        "icon": iconData.value.icon,
        "class": ['v-icon', 'notranslate', sizeClasses.value, textColorClasses.value, themeClasses.value, {
          'v-icon--clickable': !!attrs.onClick,
          'v-icon--start': props.start,
          'v-icon--end': props.end
        }],
        "style": [!sizeClasses.value ? {
          fontSize: (0,helpers/* convertToUnit */.kb)(props.size),
          width: (0,helpers/* convertToUnit */.kb)(props.size),
          height: (0,helpers/* convertToUnit */.kb)(props.size)
        } : undefined, textColorStyles.value],
        "aria-hidden": "true"
      }, null);
    };
  }

});
//# sourceMappingURL=VIcon.mjs.map
;// CONCATENATED MODULE: ./node_modules/vuetify/lib/composables/position.mjs
// Utilities

 // Types

const positionValues = ['static', 'relative', 'fixed', 'absolute', 'sticky'];
// Composables
const makePositionProps = (0,propsFactory/* propsFactory */.U)({
  absolute: Boolean,
  bottom: [Boolean, Number, String],
  fixed: Boolean,
  left: [Boolean, Number, String],
  position: {
    type: String,
    validator:
    /* istanbul ignore next */
    v => positionValues.includes(v)
  },
  right: [Boolean, Number, String],
  top: [Boolean, Number, String]
}, 'position');
function usePosition(props) {
  let name = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : (0,util_getCurrentInstance/* getCurrentInstanceName */.B)();
  const targets = ['top', 'right', 'bottom', 'left'];
  const positionClasses = (0,runtime_core_esm_bundler/* computed */.Fl)(() => {
    if (props.fixed) return `${name}--fixed`;
    if (props.absolute) return `${name}--absolute`;
    return props.position ? `position-${props.position}` : undefined;
  });
  const positionStyles = (0,runtime_core_esm_bundler/* computed */.Fl)(() => {
    const styles = {};

    for (const target of targets) {
      const prop = props[target];
      if (prop == null || prop === false) continue;
      styles[target] = (0,helpers/* convertToUnit */.kb)(prop === true ? '0' : String(prop));
    }

    return styles;
  });
  return {
    positionClasses,
    positionStyles
  };
}
//# sourceMappingURL=position.mjs.map
;// CONCATENATED MODULE: ./node_modules/vuetify/lib/composables/router.mjs
// Utilities

 // Types

function useRoute() {
  const vm = getCurrentInstance('useRoute');
  return computed(() => {
    var _vm$proxy;

    return vm == null ? void 0 : (_vm$proxy = vm.proxy) == null ? void 0 : _vm$proxy.$route;
  });
}
function useRouter() {
  var _getCurrentInstance, _getCurrentInstance$p;

  return (_getCurrentInstance = (0,util_getCurrentInstance/* getCurrentInstance */.F)('useRouter')) == null ? void 0 : (_getCurrentInstance$p = _getCurrentInstance.proxy) == null ? void 0 : _getCurrentInstance$p.$router;
}
function useLink(props, attrs) {
  const RouterLink = (0,runtime_core_esm_bundler/* resolveDynamicComponent */.LL)('RouterLink');
  const isLink = (0,runtime_core_esm_bundler/* computed */.Fl)(() => !!(props.href || props.to));
  const isClickable = (0,runtime_core_esm_bundler/* computed */.Fl)(() => {
    return (isLink == null ? void 0 : isLink.value) || !!(attrs.onClick || attrs.onClickOnce);
  });

  if (typeof RouterLink === 'string') {
    return {
      isLink,
      isClickable,
      href: (0,reactivity_esm_bundler/* toRef */.Vh)(props, 'href')
    };
  }

  const link = props.to ? RouterLink.useLink(props) : undefined;
  return { ...link,
    isLink,
    isClickable,
    href: (0,runtime_core_esm_bundler/* computed */.Fl)(() => props.to ? link == null ? void 0 : link.route.value.href : props.href)
  };
}
const makeRouterProps = (0,propsFactory/* propsFactory */.U)({
  href: String,
  replace: Boolean,
  to: [String, Object]
}, 'router');
let inTransition = false;
function useBackButton(cb) {
  const router = useRouter();
  let popped = false;
  let removeBefore;
  let removeAfter;
  (0,runtime_core_esm_bundler/* onMounted */.bv)(() => {
    window.addEventListener('popstate', onPopstate);
    removeBefore = router == null ? void 0 : router.beforeEach((to, from, next) => {
      if (!inTransition) {
        setTimeout(() => popped ? cb(next) : next());
      } else {
        popped ? cb(next) : next();
      }

      inTransition = true;
    });
    removeAfter = router == null ? void 0 : router.afterEach(() => {
      inTransition = false;
    });
  });
  (0,runtime_core_esm_bundler/* onBeforeUnmount */.Jd)(() => {
    var _removeBefore, _removeAfter;

    window.removeEventListener('popstate', onPopstate);
    (_removeBefore = removeBefore) == null ? void 0 : _removeBefore();
    (_removeAfter = removeAfter) == null ? void 0 : _removeAfter();
  });

  function onPopstate(e) {
    var _e$state;

    if ((_e$state = e.state) != null && _e$state.replaced) return;
    popped = true;
    setTimeout(() => popped = false);
  }
}
//# sourceMappingURL=router.mjs.map
;// CONCATENATED MODULE: ./node_modules/vuetify/lib/composables/selectLink.mjs
// Utilities
 // Types

function useSelectLink(link, select) {
  (0,runtime_core_esm_bundler/* watch */.YP)(() => {
    var _link$isExactActive;

    return (_link$isExactActive = link.isExactActive) == null ? void 0 : _link$isExactActive.value;
  }, isExactActive => {
    if (link.isLink.value && isExactActive && select) {
      (0,runtime_core_esm_bundler/* nextTick */.Y3)(() => {
        select(true);
      });
    }
  }, {
    immediate: true
  });
}
//# sourceMappingURL=selectLink.mjs.map
// EXTERNAL MODULE: ./node_modules/vuetify/lib/directives/ripple/index.mjs + 1 modules
var ripple = __webpack_require__(902);
;// CONCATENATED MODULE: ./node_modules/vuetify/lib/components/VBtn/VBtn.mjs

// Styles
 // Components


 // Composables













 // Directives

 // Utilities



const VBtn = (0,defineComponent/* defineComponent */.a)({
  name: 'VBtn',
  directives: {
    Ripple: ripple/* Ripple */.H
  },
  props: {
    active: Boolean,
    symbol: {
      type: null,
      default: VBtnToggleSymbol
    },
    flat: Boolean,
    icon: [Boolean, String],
    prependIcon: String,
    appendIcon: String,
    block: Boolean,
    stacked: Boolean,
    ripple: {
      type: Boolean,
      default: true
    },
    ...makeBorderProps(),
    ...makeRoundedProps(),
    ...makeDensityProps(),
    ...makeDimensionProps(),
    ...makeElevationProps(),
    ...makeGroupItemProps(),
    ...makePositionProps(),
    ...makeRouterProps(),
    ...makeSizeProps(),
    ...makeTagProps({
      tag: 'button'
    }),
    ...(0,composables_theme/* makeThemeProps */.x$)(),
    ...makeVariantProps({
      variant: 'contained'
    })
  },

  setup(props, _ref) {
    let {
      attrs,
      slots
    } = _ref;
    const {
      themeClasses
    } = (0,composables_theme/* provideTheme */.ER)(props);
    const {
      borderClasses
    } = useBorder(props);
    const {
      colorClasses,
      colorStyles,
      variantClasses
    } = useVariant(props);
    const {
      densityClasses
    } = useDensity(props);
    const {
      dimensionStyles
    } = useDimension(props);
    const {
      elevationClasses
    } = useElevation(props);
    const {
      positionClasses,
      positionStyles
    } = usePosition(props);
    const {
      roundedClasses
    } = useRounded(props);
    const {
      sizeClasses
    } = useSize(props);
    const group = useGroupItem(props, props.symbol, false);
    const link = useLink(props, attrs);
    const isDisabled = (0,runtime_core_esm_bundler/* computed */.Fl)(() => (group == null ? void 0 : group.disabled.value) || props.disabled);
    const isElevated = (0,runtime_core_esm_bundler/* computed */.Fl)(() => {
      return props.variant === 'contained' && !(props.disabled || props.flat || props.border);
    });
    useSelectLink(link, group == null ? void 0 : group.select);
    return () => {
      var _slots$default;

      const Tag = link.isLink.value ? 'a' : props.tag;
      const hasColor = !group || group.isSelected.value;
      return (0,runtime_core_esm_bundler/* withDirectives */.wy)((0,runtime_core_esm_bundler/* createVNode */.Wm)(Tag, {
        "type": Tag === 'a' ? undefined : 'button',
        "class": ['v-btn', group == null ? void 0 : group.selectedClass.value, {
          'v-btn--active': props.active,
          'v-btn--block': props.block,
          'v-btn--disabled': isDisabled.value,
          'v-btn--elevated': isElevated.value,
          'v-btn--flat': props.flat,
          'v-btn--icon': !!props.icon,
          'v-btn--stacked': props.stacked
        }, themeClasses.value, borderClasses.value, hasColor ? colorClasses.value : undefined, densityClasses.value, elevationClasses.value, positionClasses.value, roundedClasses.value, sizeClasses.value, variantClasses.value],
        "style": [hasColor ? colorStyles.value : undefined, dimensionStyles.value, positionStyles.value],
        "disabled": isDisabled.value || undefined,
        "href": link.href.value,
        "onClick": e => {
          var _link$navigate;

          if (isDisabled.value) return;
          (_link$navigate = link.navigate) == null ? void 0 : _link$navigate.call(link, e);
          group == null ? void 0 : group.toggle();
        }
      }, {
        default: () => [genOverlays(true, 'v-btn'), !props.icon && props.prependIcon && (0,runtime_core_esm_bundler/* createVNode */.Wm)(VIcon, {
          "class": "v-btn__icon",
          "icon": props.prependIcon,
          "start": true
        }, null), typeof props.icon === 'boolean' ? (_slots$default = slots.default) == null ? void 0 : _slots$default.call(slots) : (0,runtime_core_esm_bundler/* createVNode */.Wm)(VIcon, {
          "class": "v-btn__icon",
          "icon": props.icon,
          "size": props.size
        }, null), !props.icon && props.appendIcon && (0,runtime_core_esm_bundler/* createVNode */.Wm)(VIcon, {
          "class": "v-btn__icon",
          "icon": props.appendIcon,
          "end": true
        }, null)]
      }), [[(0,runtime_core_esm_bundler/* resolveDirective */.Q2)("ripple"), !isDisabled.value && props.ripple, null]]);
    };
  }

});
//# sourceMappingURL=VBtn.mjs.map
;// CONCATENATED MODULE: ./node_modules/vuetify/lib/components/VAppBar/VAppBarNavIcon.mjs

// Components
 // Utilities


const VAppBarNavIcon = (0,defineComponent/* defineComponent */.a)({
  name: 'VAppBarNavIcon',
  props: {
    icon: {
      type: String,
      default: '$menu'
    }
  },

  setup(props, _ref) {
    let {
      slots
    } = _ref;
    return () => {
      var _slots$default;

      return (0,runtime_core_esm_bundler/* createVNode */.Wm)(VBtn, {
        "class": "v-app-bar-nav-icon",
        "icon": props.icon
      }, {
        default: () => [(_slots$default = slots.default) == null ? void 0 : _slots$default.call(slots)]
      });
    };
  }

});
//# sourceMappingURL=VAppBarNavIcon.mjs.map
;// CONCATENATED MODULE: ./node_modules/vuetify/lib/components/VAppBar/VAppBarTitle.mjs

// Composables
 // Utilities


const VAppBarTitle = (0,defineComponent/* defineComponent */.a)({ ...VToolbarTitle,
  name: 'VAppBarTitle',

  setup(_, _ref) {
    let {
      slots
    } = _ref;
    return () => (0,runtime_core_esm_bundler/* createVNode */.Wm)(VToolbarTitle, {
      "class": "v-app-bar-title"
    }, slots);
  }

});
//# sourceMappingURL=VAppBarTitle.mjs.map
;// CONCATENATED MODULE: ./node_modules/vuetify/lib/components/VAppBar/index.mjs



//# sourceMappingURL=index.mjs.map
;// CONCATENATED MODULE: ./node_modules/vuetify/lib/components/VAlert/VAlert.css
// extracted by mini-css-extract-plugin

// EXTERNAL MODULE: ./node_modules/@vue/shared/dist/shared.esm-bundler.js
var shared_esm_bundler = __webpack_require__(577);
;// CONCATENATED MODULE: ./node_modules/vuetify/lib/util/createSimpleFunctional.mjs


function createSimpleFunctional(klass) {
  let tag = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'div';
  let name = arguments.length > 2 ? arguments[2] : undefined;
  return (0,defineComponent/* defineComponent */.a)({
    name: name != null ? name : (0,shared_esm_bundler/* capitalize */.kC)((0,shared_esm_bundler/* camelize */._A)(klass.replace(/__/g, '-'))),
    props: {
      tag: {
        type: String,
        default: tag
      }
    },

    setup(props, _ref) {
      let {
        slots
      } = _ref;
      return () => {
        var _slots$default;

        return (0,runtime_core_esm_bundler.h)(props.tag, {
          class: klass
        }, (_slots$default = slots.default) == null ? void 0 : _slots$default.call(slots));
      };
    }

  });
}
//# sourceMappingURL=createSimpleFunctional.mjs.map
;// CONCATENATED MODULE: ./node_modules/vuetify/lib/components/VAlert/VAlertTitle.mjs
// Utilities

const VAlertTitle = createSimpleFunctional('v-alert-title');
//# sourceMappingURL=VAlertTitle.mjs.map
;// CONCATENATED MODULE: ./node_modules/vuetify/lib/components/VAlert/VAlert.mjs

// Styles
 // Components



 // Composables










 // Utilities


 // Types

const allowedTypes = ['success', 'info', 'warning', 'error'];
const VAlert = (0,defineComponent/* defineComponent */.a)({
  name: 'VAlert',
  props: {
    border: {
      type: [Boolean, String],
      validator: val => {
        return typeof val === 'boolean' || ['top', 'end', 'bottom', 'start'].includes(val);
      }
    },
    borderColor: String,
    closable: Boolean,
    closeIcon: {
      type: String,
      default: '$close'
    },
    closeLabel: {
      type: String,
      default: '$vuetify.close'
    },
    icon: {
      type: [Boolean, String],
      default: null
    },
    modelValue: {
      type: Boolean,
      default: true
    },
    prominent: Boolean,
    title: String,
    text: String,
    type: {
      type: String,
      validator: val => allowedTypes.includes(val)
    },
    ...makeDensityProps(),
    ...makeDimensionProps(),
    ...makeElevationProps(),
    ...makePositionProps(),
    ...makeRoundedProps(),
    ...makeTagProps(),
    ...(0,composables_theme/* makeThemeProps */.x$)(),
    ...makeVariantProps({
      variant: 'contained-flat'
    })
  },
  emits: {
    'update:modelValue': value => true
  },

  setup(props, _ref) {
    let {
      slots
    } = _ref;
    const isActive = useProxiedModel(props, 'modelValue');
    const icon = (0,runtime_core_esm_bundler/* computed */.Fl)(() => {
      var _props$icon;

      if (props.icon === false) return undefined;
      if (!props.type) return props.icon;
      return (_props$icon = props.icon) != null ? _props$icon : `$${props.type}`;
    });
    const variantProps = (0,runtime_core_esm_bundler/* computed */.Fl)(() => {
      var _props$color;

      return {
        color: (_props$color = props.color) != null ? _props$color : props.type,
        variant: props.variant
      };
    });
    const {
      themeClasses
    } = (0,composables_theme/* provideTheme */.ER)(props);
    const {
      colorClasses,
      colorStyles,
      variantClasses
    } = useVariant(variantProps);
    const {
      densityClasses
    } = useDensity(props);
    const {
      dimensionStyles
    } = useDimension(props);
    const {
      elevationClasses
    } = useElevation(props);
    const {
      positionClasses,
      positionStyles
    } = usePosition(props);
    const {
      roundedClasses
    } = useRounded(props);
    const {
      textColorClasses,
      textColorStyles
    } = useTextColor((0,reactivity_esm_bundler/* toRef */.Vh)(props, 'borderColor'));

    function onCloseClick(e) {
      isActive.value = false;
    }

    return () => {
      var _slots$default;

      const hasPrepend = !!(slots.prepend || icon.value);
      const hasTitle = !!(slots.title || props.title);
      const hasText = !!(props.text || slots.text);
      const hasClose = !!(slots.close || props.closable);
      return isActive.value && (0,runtime_core_esm_bundler/* createVNode */.Wm)(props.tag, {
        "class": ['v-alert', props.border && {
          'v-alert--border': !!props.border,
          [`v-alert--border-${props.border === true ? 'start' : props.border}`]: true
        }, {
          'v-alert--prominent': props.prominent
        }, themeClasses.value, colorClasses.value, densityClasses.value, elevationClasses.value, positionClasses.value, roundedClasses.value, variantClasses.value],
        "style": [colorStyles.value, dimensionStyles.value, positionStyles.value],
        "role": "alert"
      }, {
        default: () => [genOverlays(false, 'v-alert'), props.border && (0,runtime_core_esm_bundler/* createVNode */.Wm)("div", {
          "class": ['v-alert__border', textColorClasses.value],
          "style": textColorStyles.value
        }, null), hasPrepend && (0,runtime_core_esm_bundler/* createVNode */.Wm)(VDefaultsProvider, {
          "defaults": {
            VIcon: {
              density: props.density,
              icon: icon.value,
              size: props.prominent ? 44 : 'default'
            }
          }
        }, {
          default: () => [(0,runtime_core_esm_bundler/* createVNode */.Wm)("div", {
            "class": "v-alert__prepend"
          }, [slots.prepend ? slots.prepend() : icon.value && (0,runtime_core_esm_bundler/* createVNode */.Wm)(VIcon, null, null)])]
        }), (0,runtime_core_esm_bundler/* createVNode */.Wm)("div", {
          "class": "v-alert__content"
        }, [hasTitle && (0,runtime_core_esm_bundler/* createVNode */.Wm)(VAlertTitle, null, {
          default: () => [slots.title ? slots.title() : props.title]
        }), hasText && (slots.text ? slots.text() : props.text), (_slots$default = slots.default) == null ? void 0 : _slots$default.call(slots)]), slots.append && (0,runtime_core_esm_bundler/* createVNode */.Wm)("div", {
          "class": "v-alert__append"
        }, [slots.append()]), hasClose && (0,runtime_core_esm_bundler/* createVNode */.Wm)(VDefaultsProvider, {
          "defaults": {
            VIcon: {
              icon: props.closeIcon,
              size: 'small'
            }
          }
        }, {
          default: () => [(0,runtime_core_esm_bundler/* createVNode */.Wm)("div", {
            "class": "v-alert__close",
            "onClick": onCloseClick
          }, [slots.close ? slots.close() : (0,runtime_core_esm_bundler/* createVNode */.Wm)(VIcon, null, null)])]
        })]
      });
    };
  }

});
//# sourceMappingURL=VAlert.mjs.map
;// CONCATENATED MODULE: ./node_modules/vuetify/lib/components/VAlert/index.mjs


//# sourceMappingURL=index.mjs.map
;// CONCATENATED MODULE: ./node_modules/vuetify/lib/components/VAutocomplete/VAutocomplete.css
// extracted by mini-css-extract-plugin

;// CONCATENATED MODULE: ./node_modules/vuetify/lib/components/VSelect/VSelect.css
// extracted by mini-css-extract-plugin

;// CONCATENATED MODULE: ./node_modules/vuetify/lib/components/VChip/VChip.css
// extracted by mini-css-extract-plugin

;// CONCATENATED MODULE: ./node_modules/vuetify/lib/components/VAvatar/VAvatar.css
// extracted by mini-css-extract-plugin

;// CONCATENATED MODULE: ./node_modules/vuetify/lib/components/VAvatar/VAvatar.mjs

// Styles
 // Components


 // Composables





 // Utilities



const makeVAvatarProps = (0,propsFactory/* propsFactory */.U)({
  color: String,
  start: Boolean,
  end: Boolean,
  icon: String,
  image: String,
  ...makeDensityProps(),
  ...makeRoundedProps(),
  ...makeSizeProps(),
  ...makeTagProps()
});
const VAvatar = (0,defineComponent/* defineComponent */.a)({
  name: 'VAvatar',
  props: makeVAvatarProps(),

  setup(props, _ref) {
    let {
      slots
    } = _ref;
    const {
      backgroundColorClasses,
      backgroundColorStyles
    } = useBackgroundColor((0,reactivity_esm_bundler/* toRef */.Vh)(props, 'color'));
    const {
      densityClasses
    } = useDensity(props);
    const {
      roundedClasses
    } = useRounded(props);
    const {
      sizeClasses,
      sizeStyles
    } = useSize(props);
    useRender(() => {
      var _slots$default;

      return (0,runtime_core_esm_bundler/* createVNode */.Wm)(props.tag, {
        "class": ['v-avatar', {
          'v-avatar--start': props.start,
          'v-avatar--end': props.end
        }, backgroundColorClasses.value, densityClasses.value, roundedClasses.value, sizeClasses.value],
        "style": [backgroundColorStyles.value, sizeStyles.value]
      }, {
        default: () => [props.image ? (0,runtime_core_esm_bundler/* createVNode */.Wm)(VImg, {
          "src": props.image,
          "alt": ""
        }, null) : props.icon ? (0,runtime_core_esm_bundler/* createVNode */.Wm)(VIcon, {
          "icon": props.icon
        }, null) : (_slots$default = slots.default) == null ? void 0 : _slots$default.call(slots)]
      });
    });
    return {};
  }

});
//# sourceMappingURL=VAvatar.mjs.map
;// CONCATENATED MODULE: ./node_modules/vuetify/lib/components/VChipGroup/VChipGroup.css
// extracted by mini-css-extract-plugin

;// CONCATENATED MODULE: ./node_modules/vuetify/lib/components/VChipGroup/VChipGroup.mjs

// Styles
 // Composables





 // Utilities


 // Types

const VChipGroupSymbol = Symbol.for('vuetify:v-chip-group');
const VChipGroup = (0,defineComponent/* defineComponent */.a)({
  name: 'VChipGroup',
  props: {
    column: Boolean,
    filter: Boolean,
    valueComparator: {
      type: Function,
      default: helpers/* deepEqual */.vZ
    },
    ...makeGroupProps({
      selectedClass: 'v-chip--selected'
    }),
    ...makeTagProps(),
    ...(0,composables_theme/* makeThemeProps */.x$)(),
    ...makeVariantProps({
      variant: 'contained-text'
    })
  },
  emits: {
    'update:modelValue': value => true
  },

  setup(props, _ref) {
    let {
      slots
    } = _ref;
    const {
      themeClasses
    } = (0,composables_theme/* provideTheme */.ER)(props);
    const {
      isSelected,
      select,
      next,
      prev,
      selected
    } = useGroup(props, VChipGroupSymbol);
    (0,composables_defaults/* provideDefaults */.AF)({
      VChip: {
        color: (0,reactivity_esm_bundler/* toRef */.Vh)(props, 'color'),
        filter: (0,reactivity_esm_bundler/* toRef */.Vh)(props, 'filter'),
        variant: (0,reactivity_esm_bundler/* toRef */.Vh)(props, 'variant')
      }
    });
    return () => {
      var _slots$default;

      return (0,runtime_core_esm_bundler/* createVNode */.Wm)(props.tag, {
        "class": ['v-chip-group', {
          'v-chip-group--column': props.column
        }, themeClasses.value]
      }, {
        default: () => [(_slots$default = slots.default) == null ? void 0 : _slots$default.call(slots, {
          isSelected,
          select,
          next,
          prev,
          selected: selected.value
        })]
      });
    };
  }

});
//# sourceMappingURL=VChipGroup.mjs.map
;// CONCATENATED MODULE: ./node_modules/vuetify/lib/components/transitions/createTransition.mjs
// Utilities

 // Types

function createCssTransition(name) {
  let origin = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'top center 0';
  let mode = arguments.length > 2 ? arguments[2] : undefined;
  return (0,defineComponent/* defineComponent */.a)({
    name,
    props: {
      group: Boolean,
      hideOnLeave: Boolean,
      leaveAbsolute: Boolean,
      mode: {
        type: String,
        default: mode
      },
      origin: {
        type: String,
        default: origin
      }
    },

    setup(props, _ref) {
      let {
        slots
      } = _ref;
      return () => {
        const tag = props.group ? runtime_dom_esm_bundler/* TransitionGroup */.W3 : runtime_dom_esm_bundler/* Transition */.uT;
        return (0,runtime_core_esm_bundler.h)(tag, {
          name,
          mode: props.mode,

          onBeforeEnter(el) {
            el.style.transformOrigin = props.origin;
          },

          onLeave(el) {
            if (props.leaveAbsolute) {
              const {
                offsetTop,
                offsetLeft,
                offsetWidth,
                offsetHeight
              } = el;
              el._transitionInitialStyles = {
                position: el.style.position,
                top: el.style.top,
                left: el.style.left,
                width: el.style.width,
                height: el.style.height
              };
              el.style.position = 'absolute';
              el.style.top = `${offsetTop}px`;
              el.style.left = `${offsetLeft}px`;
              el.style.width = `${offsetWidth}px`;
              el.style.height = `${offsetHeight}px`;
            }

            if (props.hideOnLeave) {
              el.style.setProperty('display', 'none', 'important');
            }
          },

          onAfterLeave(el) {
            if (props.leaveAbsolute && el != null && el._transitionInitialStyles) {
              const {
                position,
                top,
                left,
                width,
                height
              } = el._transitionInitialStyles;
              delete el._transitionInitialStyles;
              el.style.position = position || '';
              el.style.top = top || '';
              el.style.left = left || '';
              el.style.width = width || '';
              el.style.height = height || '';
            }
          }

        }, slots.default);
      };
    }

  });
}
function createJavascriptTransition(name, functions) {
  let mode = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 'in-out';
  return (0,defineComponent/* defineComponent */.a)({
    name,
    props: {
      mode: {
        type: String,
        default: mode
      }
    },

    setup(props, _ref2) {
      let {
        slots
      } = _ref2;
      return () => {
        return (0,runtime_core_esm_bundler.h)(runtime_dom_esm_bundler/* Transition */.uT, {
          name,
          // mode: props.mode, // TODO: vuejs/vue-next#3104
          ...functions
        }, slots.default);
      };
    }

  });
}
//# sourceMappingURL=createTransition.mjs.map
;// CONCATENATED MODULE: ./node_modules/vuetify/lib/components/transitions/expand-transition.mjs
// Utilities

/* harmony default export */ function expand_transition() {
  let expandedParentClass = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '';
  let x = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;
  const sizeProperty = x ? 'width' : 'height';
  const offsetProperty = (0,shared_esm_bundler/* camelize */._A)(`offset-${sizeProperty}`);
  return {
    onBeforeEnter(el) {
      el._parent = el.parentNode;
      el._initialStyle = {
        transition: el.style.transition,
        overflow: el.style.overflow,
        [sizeProperty]: el.style[sizeProperty]
      };
    },

    onEnter(el) {
      const initialStyle = el._initialStyle;
      el.style.setProperty('transition', 'none', 'important'); // Hide overflow to account for collapsed margins in the calculated height

      el.style.overflow = 'hidden';
      const offset = `${el[offsetProperty]}px`;
      el.style[sizeProperty] = '0';
      void el.offsetHeight; // force reflow

      el.style.transition = initialStyle.transition;

      if (expandedParentClass && el._parent) {
        el._parent.classList.add(expandedParentClass);
      }

      requestAnimationFrame(() => {
        el.style[sizeProperty] = offset;
      });
    },

    onAfterEnter: resetStyles,
    onEnterCancelled: resetStyles,

    onLeave(el) {
      el._initialStyle = {
        transition: '',
        overflow: el.style.overflow,
        [sizeProperty]: el.style[sizeProperty]
      };
      el.style.overflow = 'hidden';
      el.style[sizeProperty] = `${el[offsetProperty]}px`;
      void el.offsetHeight; // force reflow

      requestAnimationFrame(() => el.style[sizeProperty] = '0');
    },

    onAfterLeave,
    onLeaveCancelled: onAfterLeave
  };

  function onAfterLeave(el) {
    if (expandedParentClass && el._parent) {
      el._parent.classList.remove(expandedParentClass);
    }

    resetStyles(el);
  }

  function resetStyles(el) {
    const size = el._initialStyle[sizeProperty];
    el.style.overflow = el._initialStyle.overflow;
    if (size != null) el.style[sizeProperty] = size;
    delete el._initialStyle;
  }
}
//# sourceMappingURL=expand-transition.mjs.map
;// CONCATENATED MODULE: ./node_modules/vuetify/lib/util/easing.mjs
const standardEasing = 'cubic-bezier(0.4, 0, 0.2, 1)';
const deceleratedEasing = 'cubic-bezier(0.0, 0, 0.2, 1)'; // Entering

const acceleratedEasing = 'cubic-bezier(0.4, 0, 1, 1)'; // Leaving
//# sourceMappingURL=easing.mjs.map
;// CONCATENATED MODULE: ./node_modules/vuetify/lib/util/box.mjs
class Box {
  constructor(_ref) {
    let {
      x,
      y,
      width,
      height
    } = _ref;
    this.x = x;
    this.y = y;
    this.width = width;
    this.height = height;
  }

  get top() {
    return this.y;
  }

  get bottom() {
    return this.y + this.height;
  }

  get left() {
    return this.x;
  }

  get right() {
    return this.x + this.width;
  }

}
//# sourceMappingURL=box.mjs.map
;// CONCATENATED MODULE: ./node_modules/vuetify/lib/util/animation.mjs

/** @see https://stackoverflow.com/a/57876601/2074736 */

function nullifyTransforms(el) {
  const rect = el.getBoundingClientRect();
  const style = getComputedStyle(el);
  const tx = style.transform;

  if (tx) {
    let ta, sx, sy, dx, dy;

    if (tx.startsWith('matrix3d(')) {
      ta = tx.slice(9, -1).split(/, /);
      sx = +ta[0];
      sy = +ta[5];
      dx = +ta[12];
      dy = +ta[13];
    } else if (tx.startsWith('matrix(')) {
      ta = tx.slice(7, -1).split(/, /);
      sx = +ta[0];
      sy = +ta[3];
      dx = +ta[4];
      dy = +ta[5];
    } else {
      return new Box(rect);
    }

    const to = style.transformOrigin;
    const x = rect.x - dx - (1 - sx) * parseFloat(to);
    const y = rect.y - dy - (1 - sy) * parseFloat(to.slice(to.indexOf(' ') + 1));
    const w = sx ? rect.width / sx : el.offsetWidth;
    const h = sy ? rect.height / sy : el.offsetHeight;
    return new Box({
      x,
      y,
      width: w,
      height: h
    });
  } else {
    return new Box(rect);
  }
}
//# sourceMappingURL=animation.mjs.map
;// CONCATENATED MODULE: ./node_modules/vuetify/lib/components/transitions/dialog-transition.mjs



const VDialogTransition = (0,defineComponent/* defineComponent */.a)({
  name: 'VDialogTransition',
  props: {
    target: Object
  },

  setup(props, _ref) {
    let {
      slots
    } = _ref;
    const functions = {
      onBeforeEnter(el) {
        el.style.pointerEvents = 'none';
      },

      async onEnter(el, done) {
        await new Promise(resolve => requestAnimationFrame(resolve));
        const {
          x,
          y
        } = getDimensions(props.target, el);
        const animation = el.animate([{
          transform: `translate(${x}px, ${y}px) scale(0.1)`,
          opacity: 0
        }, {
          transform: ''
        }], {
          duration: 225,
          easing: deceleratedEasing
        });
        animation.finished.then(() => done());
      },

      onAfterEnter(el) {
        el.style.removeProperty('pointer-events');
      },

      onBeforeLeave(el) {
        el.style.pointerEvents = 'none';
      },

      async onLeave(el, done) {
        await new Promise(resolve => requestAnimationFrame(resolve));
        const {
          x,
          y
        } = getDimensions(props.target, el);
        const animation = el.animate([{
          transform: ''
        }, {
          transform: `translate(${x}px, ${y}px) scale(0.1)`,
          opacity: 0
        }], {
          duration: 125,
          easing: acceleratedEasing
        });
        animation.finished.then(() => done());
      },

      onAfterLeave(el) {
        el.style.removeProperty('pointer-events');
      }

    };
    return () => {
      return props.target ? (0,runtime_core_esm_bundler/* createVNode */.Wm)(runtime_dom_esm_bundler/* Transition */.uT, (0,runtime_core_esm_bundler/* mergeProps */.dG)({
        "name": "dialog-transition"
      }, functions, {
        "css": false
      }), slots) : (0,runtime_core_esm_bundler/* createVNode */.Wm)(runtime_dom_esm_bundler/* Transition */.uT, {
        "name": "dialog-transition"
      }, slots);
    };
  }

});

function getDimensions(target, el) {
  const targetBox = target.getBoundingClientRect();
  const elBox = nullifyTransforms(el);
  const [originX, originY] = getComputedStyle(el).transformOrigin.split(' ').map(v => parseFloat(v));
  const [anchorSide, anchorOffset] = getComputedStyle(el).getPropertyValue('--v-overlay-anchor-origin').split(' ');
  let offsetX = targetBox.left + targetBox.width / 2;

  if (anchorSide === 'left' || anchorOffset === 'left') {
    offsetX -= targetBox.width / 2;
  } else if (anchorSide === 'right' || anchorOffset === 'right') {
    offsetX += targetBox.width / 2;
  }

  let offsetY = targetBox.top + targetBox.height / 2;

  if (anchorSide === 'top' || anchorOffset === 'top') {
    offsetY -= targetBox.height / 2;
  } else if (anchorSide === 'bottom' || anchorOffset === 'bottom') {
    offsetY += targetBox.height / 2;
  }

  return {
    x: offsetX - (originX + elBox.left),
    y: offsetY - (originY + elBox.top)
  };
}
//# sourceMappingURL=dialog-transition.mjs.map
;// CONCATENATED MODULE: ./node_modules/vuetify/lib/components/transitions/index.mjs

 // Component specific transitions

const VCarouselTransition = createCssTransition('carousel-transition');
const VCarouselReverseTransition = createCssTransition('carousel-reverse-transition');
const VTabTransition = createCssTransition('tab-transition');
const VTabReverseTransition = createCssTransition('tab-reverse-transition');
const VMenuTransition = createCssTransition('menu-transition');
const VFabTransition = createCssTransition('fab-transition', 'center center', 'out-in'); // Generic transitions

const VDialogBottomTransition = createCssTransition('dialog-bottom-transition');
const VDialogTopTransition = createCssTransition('dialog-top-transition');
const VFadeTransition = createCssTransition('fade-transition');
const VScaleTransition = createCssTransition('scale-transition');
const VScrollXTransition = createCssTransition('scroll-x-transition');
const VScrollXReverseTransition = createCssTransition('scroll-x-reverse-transition');
const VScrollYTransition = createCssTransition('scroll-y-transition');
const VScrollYReverseTransition = createCssTransition('scroll-y-reverse-transition');
const VSlideXTransition = createCssTransition('slide-x-transition');
const VSlideXReverseTransition = createCssTransition('slide-x-reverse-transition');
const VSlideYTransition = createCssTransition('slide-y-transition');
const VSlideYReverseTransition = createCssTransition('slide-y-reverse-transition'); // Javascript transitions

const VExpandTransition = createJavascriptTransition('expand-transition', expand_transition());
const VExpandXTransition = createJavascriptTransition('expand-x-transition', expand_transition('', true));

//# sourceMappingURL=index.mjs.map
;// CONCATENATED MODULE: ./node_modules/vuetify/lib/components/VChip/VChip.mjs

// Styles
 // Components




 // Composables











 // Directives

 // Utilities


const VChip = (0,defineComponent/* defineComponent */.a)({
  name: 'VChip',
  directives: {
    Ripple: ripple/* Ripple */.H
  },
  props: {
    activeClass: String,
    appendAvatar: String,
    appendIcon: String,
    closable: Boolean,
    closeIcon: {
      type: String,
      default: '$delete'
    },
    closeLabel: {
      type: String,
      default: '$vuetify.close'
    },
    draggable: Boolean,
    filter: Boolean,
    filterIcon: {
      type: String,
      default: '$complete'
    },
    label: Boolean,
    link: Boolean,
    pill: Boolean,
    prependAvatar: String,
    prependIcon: String,
    ripple: {
      type: Boolean,
      default: true
    },
    text: String,
    modelValue: {
      type: Boolean,
      default: true
    },
    ...makeBorderProps(),
    ...makeDensityProps(),
    ...makeElevationProps(),
    ...makeGroupItemProps(),
    ...makeRoundedProps(),
    ...makeRouterProps(),
    ...makeSizeProps(),
    ...makeTagProps({
      tag: 'span'
    }),
    ...(0,composables_theme/* makeThemeProps */.x$)(),
    ...makeVariantProps({
      variant: 'contained-text'
    })
  },
  emits: {
    'click:close': e => true,
    'update:active': value => true,
    'update:modelValue': value => true
  },

  setup(props, _ref) {
    let {
      attrs,
      emit,
      slots
    } = _ref;
    const isActive = useProxiedModel(props, 'modelValue');
    const {
      themeClasses
    } = (0,composables_theme/* provideTheme */.ER)(props);
    const {
      borderClasses
    } = useBorder(props);
    const {
      colorClasses,
      colorStyles,
      variantClasses
    } = useVariant(props);
    const {
      elevationClasses
    } = useElevation(props);
    const group = useGroupItem(props, VChipGroupSymbol, false);
    const {
      roundedClasses
    } = useRounded(props);
    const {
      sizeClasses
    } = useSize(props);
    const {
      densityClasses
    } = useDensity(props);
    const link = useLink(props, attrs);

    function onCloseClick(e) {
      isActive.value = false;
      emit('click:close', e);
    }

    return () => {
      var _slots$default, _slots$default2;

      const Tag = link.isLink.value ? 'a' : props.tag;
      const hasAppend = !!(slots.append || props.appendIcon || props.appendAvatar);
      const hasClose = !!(slots.close || props.closable);
      const hasFilter = !!(slots.filter || props.filter) && group;
      const hasPrepend = !!(slots.prepend || props.prependIcon || props.prependAvatar);
      const hasColor = !group || group.isSelected.value;
      const isClickable = !props.disabled && (!!group || link.isClickable.value || props.link);
      const onClickFunc = props.link ? props.link : group == null ? void 0 : group.toggle;
      return isActive.value && (0,runtime_core_esm_bundler/* withDirectives */.wy)((0,runtime_core_esm_bundler/* createVNode */.Wm)(Tag, {
        "class": ['v-chip', {
          'v-chip--disabled': props.disabled,
          'v-chip--label': props.label,
          'v-chip--link': isClickable,
          'v-chip--pill': props.pill
        }, themeClasses.value, borderClasses.value, hasColor ? colorClasses.value : undefined, densityClasses.value, elevationClasses.value, roundedClasses.value, sizeClasses.value, variantClasses.value, group == null ? void 0 : group.selectedClass.value],
        "style": [hasColor ? colorStyles.value : undefined],
        "disabled": props.disabled || undefined,
        "draggable": props.draggable,
        "href": link.href.value,
        "onClick": isClickable && onClickFunc
      }, {
        default: () => [genOverlays(isClickable, 'v-chip'), hasFilter && (0,runtime_core_esm_bundler/* createVNode */.Wm)(VExpandXTransition, null, {
          default: () => [(0,runtime_core_esm_bundler/* withDirectives */.wy)((0,runtime_core_esm_bundler/* createVNode */.Wm)("div", {
            "class": "v-chip__filter"
          }, [slots.filter ? slots.filter() : (0,runtime_core_esm_bundler/* createVNode */.Wm)(VIcon, {
            "icon": props.filterIcon
          }, null)]), [[runtime_dom_esm_bundler/* vShow */.F8, group.isSelected.value]])]
        }), hasPrepend && (0,runtime_core_esm_bundler/* createVNode */.Wm)("div", {
          "class": "v-chip__prepend"
        }, [slots.prepend ? slots.prepend() : (0,runtime_core_esm_bundler/* createVNode */.Wm)(VAvatar, {
          "icon": props.prependIcon,
          "image": props.prependAvatar,
          "size": props.size
        }, null)]), (_slots$default = (_slots$default2 = slots.default) == null ? void 0 : _slots$default2.call(slots, {
          isSelected: group == null ? void 0 : group.isSelected.value,
          selectedClass: group == null ? void 0 : group.selectedClass.value,
          select: group == null ? void 0 : group.select,
          toggle: group == null ? void 0 : group.toggle,
          value: group == null ? void 0 : group.value.value,
          disabled: props.disabled
        })) != null ? _slots$default : props.text, hasAppend && (0,runtime_core_esm_bundler/* createVNode */.Wm)("div", {
          "class": "v-chip__append"
        }, [slots.append ? slots.append() : (0,runtime_core_esm_bundler/* createVNode */.Wm)(VAvatar, {
          "icon": props.appendIcon,
          "image": props.appendAvatar,
          "size": props.size
        }, null)]), hasClose && (0,runtime_core_esm_bundler/* createVNode */.Wm)("div", {
          "class": "v-chip__close",
          "onClick": onCloseClick
        }, [slots.close ? slots.close({
          props: {
            onClick: onCloseClick
          }
        }) : (0,runtime_core_esm_bundler/* createVNode */.Wm)(VIcon, {
          "icon": props.closeIcon,
          "size": "x-small"
        }, null)])]
      }), [[(0,runtime_core_esm_bundler/* resolveDirective */.Q2)("ripple"), isClickable && props.ripple, null]]);
    };
  }

});
//# sourceMappingURL=VChip.mjs.map
;// CONCATENATED MODULE: ./node_modules/vuetify/lib/components/VList/VList.css
// extracted by mini-css-extract-plugin

;// CONCATENATED MODULE: ./node_modules/vuetify/lib/components/VDivider/VDivider.css
// extracted by mini-css-extract-plugin

;// CONCATENATED MODULE: ./node_modules/vuetify/lib/components/VDivider/VDivider.mjs

// Styles
 // Utilities


 // Composables


 // Types

const VDivider = (0,defineComponent/* defineComponent */.a)({
  name: 'VDivider',
  props: {
    color: String,
    inset: Boolean,
    length: [Number, String],
    thickness: [Number, String],
    vertical: Boolean,
    ...(0,composables_theme/* makeThemeProps */.x$)()
  },

  setup(props, _ref) {
    let {
      attrs
    } = _ref;
    const {
      themeClasses
    } = (0,composables_theme/* provideTheme */.ER)(props);
    const {
      backgroundColorClasses,
      backgroundColorStyles
    } = useBackgroundColor((0,reactivity_esm_bundler/* toRef */.Vh)(props, 'color'));
    const dividerStyles = (0,runtime_core_esm_bundler/* computed */.Fl)(() => {
      const styles = {};

      if (props.length) {
        styles[props.vertical ? 'maxHeight' : 'maxWidth'] = (0,helpers/* convertToUnit */.kb)(props.length);
      }

      if (props.thickness) {
        styles[props.vertical ? 'borderRightWidth' : 'borderTopWidth'] = (0,helpers/* convertToUnit */.kb)(props.thickness);
      }

      return styles;
    });
    return () => {
      return (0,runtime_core_esm_bundler/* createVNode */.Wm)("hr", {
        "class": [{
          'v-divider': true,
          'v-divider--inset': props.inset,
          'v-divider--vertical': props.vertical
        }, themeClasses.value, backgroundColorClasses.value],
        "style": [dividerStyles.value, backgroundColorStyles.value],
        "aria-orientation": !attrs.role || attrs.role === 'separator' ? props.vertical ? 'vertical' : 'horizontal' : undefined,
        "role": `${attrs.role || 'separator'}`
      }, null);
    };
  }

});
//# sourceMappingURL=VDivider.mjs.map
;// CONCATENATED MODULE: ./node_modules/vuetify/lib/components/VList/list.mjs
// Utilities
 // Types

// Depth
const DepthKey = Symbol.for('vuetify:depth');
function useDepth(hasPrepend) {
  const parent = inject(DepthKey, ref(-1));
  const depth = computed(() => parent.value + 1 + (hasPrepend != null && hasPrepend.value ? 1 : 0));
  provide(DepthKey, depth);
  return depth;
} // List

const ListKey = Symbol.for('vuetify:list');
function createList() {
  const parent = (0,runtime_core_esm_bundler/* inject */.f3)(ListKey, {
    hasPrepend: (0,reactivity_esm_bundler/* ref */.iH)(false),
    updateHasPrepend: () => null
  });
  const data = {
    hasPrepend: (0,reactivity_esm_bundler/* ref */.iH)(false),
    updateHasPrepend: value => {
      if (value) data.hasPrepend.value = value;
    }
  };
  (0,runtime_core_esm_bundler/* provide */.JJ)(ListKey, data);
  return parent;
}
function useList() {
  return (0,runtime_core_esm_bundler/* inject */.f3)(ListKey, null);
}
//# sourceMappingURL=list.mjs.map
;// CONCATENATED MODULE: ./node_modules/vuetify/lib/composables/nested/openStrategies.mjs
const singleOpenStrategy = {
  open: _ref => {
    let {
      id,
      value,
      opened,
      parents
    } = _ref;

    if (value) {
      const newOpened = new Set();
      newOpened.add(id);
      let parent = parents.get(id);

      while (parent != null) {
        newOpened.add(parent);
        parent = parents.get(parent);
      }

      return newOpened;
    } else {
      opened.delete(id);
      return opened;
    }
  },
  select: () => null
};
const multipleOpenStrategy = {
  open: _ref2 => {
    let {
      id,
      value,
      opened,
      parents
    } = _ref2;

    if (value) {
      let parent = parents.get(id);
      opened.add(id);

      while (parent != null && parent !== id) {
        opened.add(parent);
        parent = parents.get(parent);
      }

      return opened;
    } else {
      opened.delete(id);
    }

    return opened;
  },
  select: () => null
};
const listOpenStrategy = {
  open: multipleOpenStrategy.open,
  select: _ref3 => {
    let {
      id,
      value,
      opened,
      parents
    } = _ref3;
    if (!value) return opened;
    const path = [];
    let parent = parents.get(id);

    while (parent != null) {
      path.push(parent);
      parent = parents.get(parent);
    }

    return new Set(path);
  }
};
//# sourceMappingURL=openStrategies.mjs.map
;// CONCATENATED MODULE: ./node_modules/vuetify/lib/composables/nested/selectStrategies.mjs
/* eslint-disable sonarjs/no-identical-functions */
const independentSelectStrategy = mandatory => {
  const strategy = {
    select: _ref => {
      let {
        id,
        value,
        selected
      } = _ref;

      // When mandatory and we're trying to deselect when id
      // is the only currently selected item then do nothing
      if (mandatory && !value) {
        const on = Array.from(selected.entries()).reduce((arr, _ref2) => {
          let [key, value] = _ref2;
          return value === 'on' ? [...arr, key] : arr;
        }, []);
        if (on.length === 1 && on[0] === id) return selected;
      }

      selected.set(id, value ? 'on' : 'off');
      return selected;
    },
    in: (v, children, parents) => {
      let map = new Map();

      for (const id of v || []) {
        map = strategy.select({
          id,
          value: true,
          selected: new Map(map),
          children,
          parents
        });
      }

      return map;
    },
    out: v => {
      const arr = [];

      for (const [key, value] of v.entries()) {
        if (value === 'on') arr.push(key);
      }

      return arr;
    }
  };
  return strategy;
};
const independentSingleSelectStrategy = mandatory => {
  const parentStrategy = independentSelectStrategy(mandatory);
  const strategy = {
    select: _ref3 => {
      let {
        selected,
        id,
        ...rest
      } = _ref3;
      const singleSelected = selected.has(id) ? new Map([[id, selected.get(id)]]) : new Map();
      return parentStrategy.select({ ...rest,
        id,
        selected: singleSelected
      });
    },
    in: (v, children, parents) => {
      let map = new Map();

      if (v != null && v.length) {
        map = parentStrategy.in(v.slice(0, 1), children, parents);
      }

      return map;
    },
    out: (v, children, parents) => {
      return parentStrategy.out(v, children, parents);
    }
  };
  return strategy;
};
const leafSelectStrategy = mandatory => {
  const parentStrategy = independentSelectStrategy(mandatory);
  const strategy = {
    select: _ref4 => {
      let {
        id,
        selected,
        children,
        ...rest
      } = _ref4;
      if (children.has(id)) return selected;
      return parentStrategy.select({
        id,
        selected,
        children,
        ...rest
      });
    },
    in: parentStrategy.in,
    out: parentStrategy.out
  };
  return strategy;
};
const leafSingleSelectStrategy = mandatory => {
  const parentStrategy = independentSingleSelectStrategy(mandatory);
  const strategy = {
    select: _ref5 => {
      let {
        id,
        selected,
        children,
        ...rest
      } = _ref5;
      if (children.has(id)) return selected;
      return parentStrategy.select({
        id,
        selected,
        children,
        ...rest
      });
    },
    in: parentStrategy.in,
    out: parentStrategy.out
  };
  return strategy;
};
const classicSelectStrategy = mandatory => {
  const strategy = {
    select: _ref6 => {
      let {
        id,
        value,
        selected,
        children,
        parents
      } = _ref6;
      const original = new Map(selected);
      const items = [id];

      while (items.length) {
        const item = items.shift();
        selected.set(item, value ? 'on' : 'off');

        if (children.has(item)) {
          items.push(...children.get(item));
        }
      }

      let parent = parents.get(id);

      while (parent) {
        const childrenIds = children.get(parent);
        const everySelected = childrenIds.every(cid => selected.get(cid) === 'on');
        const noneSelected = childrenIds.every(cid => !selected.has(cid) || selected.get(cid) === 'off');
        selected.set(parent, everySelected ? 'on' : noneSelected ? 'off' : 'indeterminate');
        parent = parents.get(parent);
      } // If mandatory and planned deselect results in no selected
      // items then we can't do it, so return original state


      if (mandatory && !value) {
        const on = Array.from(selected.entries()).reduce((arr, _ref7) => {
          let [key, value] = _ref7;
          return value === 'on' ? [...arr, key] : arr;
        }, []);
        if (on.length === 0) return original;
      }

      return selected;
    },
    in: (v, children, parents) => {
      let map = new Map();

      for (const id of v || []) {
        map = strategy.select({
          id,
          value: true,
          selected: new Map(map),
          children,
          parents
        });
      }

      return map;
    },
    out: (v, children) => {
      const arr = [];

      for (const [key, value] of v.entries()) {
        if (value === 'on' && !children.has(key)) arr.push(key);
      }

      return arr;
    }
  };
  return strategy;
};
//# sourceMappingURL=selectStrategies.mjs.map
;// CONCATENATED MODULE: ./node_modules/vuetify/lib/composables/nested/nested.mjs




 // Types

const VNestedSymbol = Symbol.for('vuetify:nested');
const emptyNested = {
  id: (0,reactivity_esm_bundler/* ref */.iH)(),
  root: {
    register: () => null,
    unregister: () => null,
    parents: (0,reactivity_esm_bundler/* ref */.iH)(new Map()),
    children: (0,reactivity_esm_bundler/* ref */.iH)(new Map()),
    open: () => null,
    select: () => null,
    opened: (0,reactivity_esm_bundler/* ref */.iH)(new Set()),
    selected: (0,reactivity_esm_bundler/* ref */.iH)(new Map()),
    selectedValues: (0,reactivity_esm_bundler/* ref */.iH)([])
  }
};
const makeNestedProps = (0,propsFactory/* propsFactory */.U)({
  selectStrategy: [String, Function],
  openStrategy: [String, Function],
  opened: Array,
  selected: Array,
  mandatory: Boolean
}, 'nested');
const useNested = props => {
  let isUnmounted = false;
  const children = (0,reactivity_esm_bundler/* ref */.iH)(new Map());
  const parents = (0,reactivity_esm_bundler/* ref */.iH)(new Map());
  const opened = useProxiedModel(props, 'opened', props.opened, v => new Set(v), v => [...v.values()]);
  const selectStrategy = (0,runtime_core_esm_bundler/* computed */.Fl)(() => {
    if (typeof props.selectStrategy === 'object') return props.selectStrategy;

    switch (props.selectStrategy) {
      case 'single-leaf':
        return leafSingleSelectStrategy(props.mandatory);

      case 'leaf':
        return leafSelectStrategy(props.mandatory);

      case 'independent':
        return independentSelectStrategy(props.mandatory);

      case 'single-independent':
        return independentSingleSelectStrategy(props.mandatory);

      case 'classic':
      default:
        return classicSelectStrategy(props.mandatory);
    }
  });
  const openStrategy = (0,runtime_core_esm_bundler/* computed */.Fl)(() => {
    if (typeof props.openStrategy === 'function') return props.openStrategy;

    switch (props.openStrategy) {
      case 'list':
        return listOpenStrategy;

      case 'single':
        return singleOpenStrategy;

      case 'multiple':
      default:
        return multipleOpenStrategy;
    }
  });
  const selected = useProxiedModel(props, 'selected', props.selected, v => selectStrategy.value.in(v, children.value, parents.value), v => selectStrategy.value.out(v, children.value, parents.value));
  (0,runtime_core_esm_bundler/* onBeforeUnmount */.Jd)(() => {
    isUnmounted = true;
  });

  function getPath(id) {
    const path = [];
    let parent = id;

    while (parent != null) {
      path.unshift(parent);
      parent = parents.value.get(parent);
    }

    return path;
  }

  const vm = (0,util_getCurrentInstance/* getCurrentInstance */.F)('nested');
  const nested = {
    id: (0,reactivity_esm_bundler/* ref */.iH)(),
    root: {
      opened,
      selected,
      selectedValues: (0,runtime_core_esm_bundler/* computed */.Fl)(() => {
        const arr = [];

        for (const [key, value] of selected.value.entries()) {
          if (value === 'on') arr.push(key);
        }

        return arr;
      }),
      register: (id, parentId, isGroup) => {
        parentId && id !== parentId && parents.value.set(id, parentId);
        isGroup && children.value.set(id, []);

        if (parentId != null) {
          children.value.set(parentId, [...(children.value.get(parentId) || []), id]);
        }
      },
      unregister: id => {
        if (isUnmounted) return;
        children.value.delete(id);
        const parent = parents.value.get(id);

        if (parent) {
          var _children$value$get;

          const list = (_children$value$get = children.value.get(parent)) != null ? _children$value$get : [];
          children.value.set(parent, list.filter(child => child !== id));
        }

        parents.value.delete(id);
        opened.value.delete(id);
      },
      open: (id, value, event) => {
        vm.emit('click:open', {
          id,
          value,
          path: getPath(id),
          event
        });
        const newOpened = openStrategy.value.open({
          id,
          value,
          opened: new Set(opened.value),
          children: children.value,
          parents: parents.value,
          event
        });
        newOpened && (opened.value = newOpened);
      },
      select: (id, value, event) => {
        vm.emit('click:select', {
          id,
          value,
          path: getPath(id),
          event
        });
        const newSelected = selectStrategy.value.select({
          id,
          value,
          selected: new Map(selected.value),
          children: children.value,
          parents: parents.value,
          event
        });
        newSelected && (selected.value = newSelected);
        const newOpened = openStrategy.value.select({
          id,
          value,
          selected: new Map(selected.value),
          opened: new Set(opened.value),
          children: children.value,
          parents: parents.value,
          event
        });
        newOpened && (opened.value = newOpened);
      },
      children,
      parents
    }
  };
  (0,runtime_core_esm_bundler/* provide */.JJ)(VNestedSymbol, nested);
  return nested.root;
};
const useNestedItem = (id, isGroup) => {
  const parent = (0,runtime_core_esm_bundler/* inject */.f3)(VNestedSymbol, emptyNested);
  const computedId = (0,runtime_core_esm_bundler/* computed */.Fl)(() => {
    var _id$value;

    return (_id$value = id.value) != null ? _id$value : (0,helpers/* getUid */.sq)().toString();
  });
  const item = { ...parent,
    id: computedId,
    open: (open, e) => parent.root.open(computedId.value, open, e),
    isOpen: (0,runtime_core_esm_bundler/* computed */.Fl)(() => parent.root.opened.value.has(computedId.value)),
    parent: (0,runtime_core_esm_bundler/* computed */.Fl)(() => parent.root.parents.value.get(computedId.value)),
    select: (selected, e) => parent.root.select(computedId.value, selected, e),
    isSelected: (0,runtime_core_esm_bundler/* computed */.Fl)(() => parent.root.selected.value.get(computedId.value) === 'on'),
    isIndeterminate: (0,runtime_core_esm_bundler/* computed */.Fl)(() => parent.root.selected.value.get(computedId.value) === 'indeterminate'),
    isLeaf: (0,runtime_core_esm_bundler/* computed */.Fl)(() => !parent.root.children.value.get(computedId.value)),
    isGroupActivator: parent.isGroupActivator
  };
  !parent.isGroupActivator && parent.root.register(computedId.value, parent.id.value, isGroup);
  (0,runtime_core_esm_bundler/* onBeforeUnmount */.Jd)(() => {
    !parent.isGroupActivator && parent.root.unregister(computedId.value);
  });
  isGroup && (0,runtime_core_esm_bundler/* provide */.JJ)(VNestedSymbol, item);
  return item;
};
const useNestedGroupActivator = () => {
  const parent = (0,runtime_core_esm_bundler/* inject */.f3)(VNestedSymbol, emptyNested);
  (0,runtime_core_esm_bundler/* provide */.JJ)(VNestedSymbol, { ...parent,
    isGroupActivator: true
  });
};
//# sourceMappingURL=nested.mjs.map
;// CONCATENATED MODULE: ./node_modules/vuetify/lib/components/VList/VListGroup.mjs

// Components

 // Composables



 // Utilities


 // Types

const VListGroupActivator = (0,defineComponent/* defineComponent */.a)({
  name: 'VListGroupActivator',

  setup(_, _ref) {
    let {
      slots
    } = _ref;
    useNestedGroupActivator();
    return () => {
      var _slots$default;

      return (_slots$default = slots.default) == null ? void 0 : _slots$default.call(slots);
    };
  }

});
const VListGroup = (0,defineComponent/* genericComponent */.e)()({
  name: 'VListGroup',
  props: {
    activeColor: String,
    color: String,
    collapseIcon: {
      type: String,
      default: '$collapse'
    },
    expandIcon: {
      type: String,
      default: '$expand'
    },
    value: null,
    ...makeTagProps()
  },

  setup(props, _ref2) {
    let {
      slots
    } = _ref2;
    const {
      isOpen,
      open
    } = useNestedItem((0,reactivity_esm_bundler/* toRef */.Vh)(props, 'value'), true);
    const list = useList();

    const onClick = e => {
      open(!isOpen.value, e);
    };

    const activatorProps = (0,runtime_core_esm_bundler/* computed */.Fl)(() => {
      var _props$activeColor;

      return {
        onClick,
        active: isOpen.value,
        appendIcon: isOpen.value ? props.collapseIcon : props.expandIcon,
        class: 'v-list-group__header',
        color: isOpen.value ? (_props$activeColor = props.activeColor) != null ? _props$activeColor : props.color : undefined
      };
    });
    return () => {
      var _slots$default2;

      return (0,runtime_core_esm_bundler/* createVNode */.Wm)(props.tag, {
        "class": ['v-list-group', {
          'v-list-group--prepend': list == null ? void 0 : list.hasPrepend.value
        }]
      }, {
        default: () => [slots.activator && (0,runtime_core_esm_bundler/* createVNode */.Wm)(VDefaultsProvider, {
          "defaults": {
            VListItemIcon: {
              color: activatorProps.value.color
            }
          }
        }, {
          default: () => [(0,runtime_core_esm_bundler/* createVNode */.Wm)(VListGroupActivator, null, {
            default: () => [slots.activator({
              props: activatorProps.value,
              isOpen
            })]
          })]
        }), (0,runtime_core_esm_bundler/* createVNode */.Wm)(VExpandTransition, null, {
          default: () => [(0,runtime_core_esm_bundler/* withDirectives */.wy)((0,runtime_core_esm_bundler/* createVNode */.Wm)("div", {
            "class": "v-list-group__items"
          }, [(_slots$default2 = slots.default) == null ? void 0 : _slots$default2.call(slots)]), [[runtime_dom_esm_bundler/* vShow */.F8, isOpen.value]])]
        })]
      });
    };
  }

});
//# sourceMappingURL=VListGroup.mjs.map
;// CONCATENATED MODULE: ./node_modules/vuetify/lib/components/VList/VListItem.css
// extracted by mini-css-extract-plugin

;// CONCATENATED MODULE: ./node_modules/vuetify/lib/components/VList/VListItemAvatar.mjs

// Components
 // Utilities


const VListItemAvatar = (0,defineComponent/* defineComponent */.a)({
  name: 'VListItemAvatar',
  props: makeVAvatarProps(),

  setup(props, _ref) {
    let {
      slots
    } = _ref;
    return () => (0,runtime_core_esm_bundler/* createVNode */.Wm)(VAvatar, (0,runtime_core_esm_bundler/* mergeProps */.dG)({
      "class": ['v-list-item-avatar', {
        'v-list-item-avatar--start': props.start,
        'v-list-item-avatar--end': props.end
      }]
    }, props), slots);
  }

});
//# sourceMappingURL=VListItemAvatar.mjs.map
;// CONCATENATED MODULE: ./node_modules/vuetify/lib/components/VList/VListItemHeader.mjs

const VListItemHeader = createSimpleFunctional('v-list-item-header');
//# sourceMappingURL=VListItemHeader.mjs.map
;// CONCATENATED MODULE: ./node_modules/vuetify/lib/components/VList/VListItemIcon.mjs

// Components
 // Utilities


const VListItemIcon = (0,defineComponent/* defineComponent */.a)({
  name: 'VListItemIcon',
  props: makeVIconProps(),

  setup(props, _ref) {
    let {
      slots
    } = _ref;
    return () => (0,runtime_core_esm_bundler/* createVNode */.Wm)(VIcon, (0,runtime_core_esm_bundler/* mergeProps */.dG)({
      "class": ['v-list-item-icon', {
        'v-list-item-icon--start': props.start,
        'v-list-item-icon--end': props.end
      }]
    }, props), slots);
  }

});
//# sourceMappingURL=VListItemIcon.mjs.map
;// CONCATENATED MODULE: ./node_modules/vuetify/lib/components/VList/VListItemSubtitle.mjs

const VListItemSubtitle = createSimpleFunctional('v-list-item-subtitle');
//# sourceMappingURL=VListItemSubtitle.mjs.map
;// CONCATENATED MODULE: ./node_modules/vuetify/lib/components/VList/VListItemTitle.mjs

const VListItemTitle = createSimpleFunctional('v-list-item-title');
//# sourceMappingURL=VListItemTitle.mjs.map
;// CONCATENATED MODULE: ./node_modules/vuetify/lib/components/VList/VListItem.mjs

// Styles
 // Components





 // Composables










 // Directives

 // Utilities



 // Types

const VListItem = (0,defineComponent/* genericComponent */.e)()({
  name: 'VListItem',
  directives: {
    Ripple: ripple/* Ripple */.H
  },
  props: {
    active: Boolean,
    activeColor: String,
    activeClass: String,
    appendAvatar: String,
    appendIcon: String,
    disabled: Boolean,
    lines: String,
    nav: Boolean,
    prependAvatar: String,
    prependIcon: String,
    subtitle: String,
    title: String,
    value: null,
    link: Boolean,
    ...makeBorderProps(),
    ...makeDensityProps(),
    ...makeDimensionProps(),
    ...makeElevationProps(),
    ...makeRoundedProps(),
    ...makeRouterProps(),
    ...makeTagProps(),
    ...(0,composables_theme/* makeThemeProps */.x$)(),
    ...makeVariantProps({
      variant: 'text'
    })
  },

  setup(props, _ref) {
    let {
      attrs,
      slots
    } = _ref;
    const link = useLink(props, attrs);
    const id = (0,runtime_core_esm_bundler/* computed */.Fl)(() => {
      var _props$value;

      return (_props$value = props.value) != null ? _props$value : link.href.value;
    });
    const {
      select,
      isSelected,
      isIndeterminate,
      isGroupActivator,
      root,
      parent
    } = useNestedItem(id, false);
    const list = useList();
    const isActive = (0,runtime_core_esm_bundler/* computed */.Fl)(() => {
      var _link$isExactActive;

      return props.active || ((_link$isExactActive = link.isExactActive) == null ? void 0 : _link$isExactActive.value) || isSelected.value;
    });
    const roundedProps = (0,runtime_core_esm_bundler/* computed */.Fl)(() => props.rounded || props.nav);
    const variantProps = (0,runtime_core_esm_bundler/* computed */.Fl)(() => {
      var _props$activeColor;

      return {
        color: isActive.value ? (_props$activeColor = props.activeColor) != null ? _props$activeColor : props.color : props.color,
        variant: props.variant
      };
    });
    (0,runtime_core_esm_bundler/* onMounted */.bv)(() => {
      var _link$isExactActive2;

      if ((_link$isExactActive2 = link.isExactActive) != null && _link$isExactActive2.value && parent.value != null) {
        root.open(parent.value, true);
      }
    });
    (0,runtime_core_esm_bundler/* watch */.YP)(() => {
      var _link$isExactActive3;

      return (_link$isExactActive3 = link.isExactActive) == null ? void 0 : _link$isExactActive3.value;
    }, val => {
      if (val && parent.value != null) {
        root.open(parent.value, true);
      }
    });
    const {
      themeClasses
    } = (0,composables_theme/* provideTheme */.ER)(props);
    const {
      borderClasses
    } = useBorder(props);
    const {
      colorClasses,
      colorStyles,
      variantClasses
    } = useVariant(variantProps);
    const {
      densityClasses
    } = useDensity(props);
    const {
      dimensionStyles
    } = useDimension(props);
    const {
      elevationClasses
    } = useElevation(props);
    const {
      roundedClasses
    } = useRounded(roundedProps);
    const lineClasses = (0,runtime_core_esm_bundler/* computed */.Fl)(() => props.lines ? `v-list-item--${props.lines}-line` : undefined);
    const slotProps = (0,runtime_core_esm_bundler/* computed */.Fl)(() => ({
      isActive: isActive.value,
      select,
      isSelected: isSelected.value,
      isIndeterminate: isIndeterminate.value
    }));
    useRender(() => {
      var _slots$prepend, _slots$default, _slots$append;

      const Tag = link.isLink.value ? 'a' : props.tag;
      const hasColor = !list || isSelected.value || isActive.value;
      const hasTitle = slots.title || props.title;
      const hasSubtitle = slots.subtitle || props.subtitle;
      const hasHeader = !!(hasTitle || hasSubtitle);
      const hasAppend = !!(slots.append || props.appendAvatar || props.appendIcon);
      const hasPrepend = !!(slots.prepend || props.prependAvatar || props.prependIcon);
      const isClickable = !props.disabled && (props.link || link.isClickable.value || props.value != null && !!list);
      list == null ? void 0 : list.updateHasPrepend(hasPrepend);
      return (0,runtime_core_esm_bundler/* withDirectives */.wy)((0,runtime_core_esm_bundler/* createVNode */.Wm)(Tag, {
        "class": ['v-list-item', {
          'v-list-item--active': isActive.value,
          'v-list-item--disabled': props.disabled,
          'v-list-item--link': isClickable,
          'v-list-item--nav': props.nav,
          'v-list-item--prepend': !hasPrepend && (list == null ? void 0 : list.hasPrepend.value),
          [`${props.activeClass}`]: isActive.value
        }, themeClasses.value, borderClasses.value, hasColor ? colorClasses.value : undefined, densityClasses.value, elevationClasses.value, lineClasses.value, roundedClasses.value, variantClasses.value],
        "style": [hasColor ? colorStyles.value : undefined, dimensionStyles.value],
        "href": link.href.value,
        "tabindex": isClickable ? 0 : undefined,
        "onClick": isClickable && (e => {
          var _link$navigate;

          if (isGroupActivator) return;
          (_link$navigate = link.navigate) == null ? void 0 : _link$navigate.call(link, e);
          props.value != null && select(!isSelected.value, e);
        })
      }, {
        default: () => [genOverlays(isClickable || isActive.value, 'v-list-item'), hasPrepend && (0,runtime_core_esm_bundler/* createVNode */.Wm)(runtime_core_esm_bundler/* Fragment */.HY, null, [props.prependAvatar && (0,runtime_core_esm_bundler/* createVNode */.Wm)(VListItemAvatar, {
          "image": props.prependAvatar,
          "start": true
        }, null), props.prependIcon && (0,runtime_core_esm_bundler/* createVNode */.Wm)(VListItemIcon, {
          "icon": props.prependIcon,
          "start": true
        }, null), (_slots$prepend = slots.prepend) == null ? void 0 : _slots$prepend.call(slots, slotProps.value)]), hasHeader && (0,runtime_core_esm_bundler/* createVNode */.Wm)(VListItemHeader, null, {
          default: () => [hasTitle && (0,runtime_core_esm_bundler/* createVNode */.Wm)(VListItemTitle, null, {
            default: () => [slots.title ? slots.title({
              title: props.title
            }) : props.title]
          }), hasSubtitle && (0,runtime_core_esm_bundler/* createVNode */.Wm)(VListItemSubtitle, null, {
            default: () => [slots.subtitle ? slots.subtitle({
              subtitle: props.subtitle
            }) : props.subtitle]
          })]
        }), (_slots$default = slots.default) == null ? void 0 : _slots$default.call(slots, slotProps.value), hasAppend && (0,runtime_core_esm_bundler/* createVNode */.Wm)(runtime_core_esm_bundler/* Fragment */.HY, null, [(_slots$append = slots.append) == null ? void 0 : _slots$append.call(slots, slotProps.value), props.appendAvatar && (0,runtime_core_esm_bundler/* createVNode */.Wm)(VListItemAvatar, {
          "image": props.appendAvatar,
          "end": true
        }, null), props.appendIcon && (0,runtime_core_esm_bundler/* createVNode */.Wm)(VListItemIcon, {
          "icon": props.appendIcon,
          "end": true
        }, null)])]
      }), [[(0,runtime_core_esm_bundler/* resolveDirective */.Q2)("ripple"), isClickable]]);
    });
  }

});
//# sourceMappingURL=VListItem.mjs.map
;// CONCATENATED MODULE: ./node_modules/vuetify/lib/components/VList/VListSubheader.mjs

// Composables

 // Utilities



const VListSubheader = (0,defineComponent/* defineComponent */.a)({
  name: 'VListSubheader',
  props: {
    color: String,
    inset: Boolean,
    sticky: Boolean,
    text: String,
    ...makeTagProps()
  },

  setup(props, _ref) {
    let {
      slots
    } = _ref;
    const {
      textColorClasses,
      textColorStyles
    } = useTextColor((0,reactivity_esm_bundler/* toRef */.Vh)(props, 'color'));
    return () => {
      var _slots$default, _slots$default2;

      const hasText = !!(slots.default || props.text);
      return (0,runtime_core_esm_bundler/* createVNode */.Wm)(props.tag, {
        "class": ['v-list-subheader', {
          'v-list-subheader--inset': props.inset,
          'v-list-subheader--sticky': props.sticky
        }, textColorClasses.value],
        "style": {
          textColorStyles
        }
      }, {
        default: () => [hasText && (0,runtime_core_esm_bundler/* createVNode */.Wm)("div", {
          "class": "v-list-subheader__text"
        }, [(_slots$default = (_slots$default2 = slots.default) == null ? void 0 : _slots$default2.call(slots)) != null ? _slots$default : props.text])]
      });
    };
  }

});
//# sourceMappingURL=VListSubheader.mjs.map
;// CONCATENATED MODULE: ./node_modules/vuetify/lib/components/VList/VListChildren.mjs

// Components



 // Utilities


 // Types

const VListChildren = (0,defineComponent/* genericComponent */.e)()({
  name: 'VListChildren',
  props: {
    items: Array
  },

  setup(props, _ref) {
    let {
      slots
    } = _ref;
    createList();
    return () => {
      var _slots$default, _slots$default2, _props$items;

      return (_slots$default = (_slots$default2 = slots.default) == null ? void 0 : _slots$default2.call(slots)) != null ? _slots$default : (_props$items = props.items) == null ? void 0 : _props$items.map(_ref2 => {
        let {
          children,
          props: itemProps,
          type
        } = _ref2;
        if (type === 'divider') return (0,runtime_core_esm_bundler/* createVNode */.Wm)(VDivider, itemProps, null);
        if (type === 'subheader') return (0,runtime_core_esm_bundler/* createVNode */.Wm)(VListSubheader, itemProps, slots);
        return children ? (0,runtime_core_esm_bundler/* createVNode */.Wm)(VListGroup, {
          "value": itemProps == null ? void 0 : itemProps.value
        }, {
          activator: _ref3 => {
            let {
              props: activatorProps
            } = _ref3;
            return slots.header ? slots.header({ ...itemProps,
              ...activatorProps
            }) : (0,runtime_core_esm_bundler/* createVNode */.Wm)(VListItem, (0,runtime_core_esm_bundler/* mergeProps */.dG)(itemProps, activatorProps), slots);
          },
          default: () => (0,runtime_core_esm_bundler/* createVNode */.Wm)(VListChildren, {
            "items": children
          }, slots)
        }) : slots.item ? slots.item(itemProps) : (0,runtime_core_esm_bundler/* createVNode */.Wm)(VListItem, itemProps, slots);
      });
    };
  }

});
//# sourceMappingURL=VListChildren.mjs.map
;// CONCATENATED MODULE: ./node_modules/vuetify/lib/components/VList/VList.mjs

// Styles
 // Components

 // Composables












 // Utilities


 // Types

const parseItems = items => {
  if (!items) return undefined;
  return items.map(item => {
    if (typeof item === 'string') return {
      type: 'item',
      value: item,
      title: item
    };
    const {
      $type,
      $children,
      ...props
    } = item;
    if ($type === 'subheader') return {
      type: 'subheader',
      props
    };
    if ($type === 'divider') return {
      type: 'divider',
      props
    };
    return {
      type: 'item',
      props,
      children: parseItems($children)
    };
  });
};

const VList = (0,defineComponent/* genericComponent */.e)()({
  name: 'VList',
  props: {
    activeColor: String,
    activeClass: String,
    bgColor: String,
    disabled: Boolean,
    lines: {
      type: [Boolean, String],
      default: 'one'
    },
    nav: Boolean,
    items: Array,
    ...makeNestedProps({
      selectStrategy: 'single-leaf',
      openStrategy: 'list'
    }),
    ...makeBorderProps(),
    ...makeDensityProps(),
    ...makeDimensionProps(),
    ...makeElevationProps(),
    ...makeRoundedProps(),
    ...makeTagProps(),
    ...(0,composables_theme/* makeThemeProps */.x$)(),
    ...makeVariantProps({
      variant: 'text'
    })
  },
  emits: {
    'update:selected': val => true,
    'update:opened': val => true,
    'click:open': value => true,
    'click:select': value => true
  },

  setup(props, _ref) {
    let {
      slots
    } = _ref;
    const items = (0,runtime_core_esm_bundler/* computed */.Fl)(() => parseItems(props.items));
    const {
      themeClasses
    } = (0,composables_theme/* provideTheme */.ER)(props);
    const {
      backgroundColorClasses,
      backgroundColorStyles
    } = useBackgroundColor((0,reactivity_esm_bundler/* toRef */.Vh)(props, 'bgColor'));
    const {
      borderClasses
    } = useBorder(props);
    const {
      densityClasses
    } = useDensity(props);
    const {
      dimensionStyles
    } = useDimension(props);
    const {
      elevationClasses
    } = useElevation(props);
    const {
      roundedClasses
    } = useRounded(props);
    const {
      open,
      select
    } = useNested(props);
    const lineClasses = (0,runtime_core_esm_bundler/* computed */.Fl)(() => props.lines ? `v-list--${props.lines}-line` : undefined);
    const activeColor = (0,reactivity_esm_bundler/* toRef */.Vh)(props, 'activeColor');
    const color = (0,reactivity_esm_bundler/* toRef */.Vh)(props, 'color');
    createList();
    (0,composables_defaults/* provideDefaults */.AF)({
      VListGroup: {
        activeColor,
        color
      },
      VListItem: {
        activeClass: (0,reactivity_esm_bundler/* toRef */.Vh)(props, 'activeClass'),
        activeColor,
        color,
        density: (0,reactivity_esm_bundler/* toRef */.Vh)(props, 'density'),
        disabled: (0,reactivity_esm_bundler/* toRef */.Vh)(props, 'disabled'),
        lines: (0,reactivity_esm_bundler/* toRef */.Vh)(props, 'lines'),
        nav: (0,reactivity_esm_bundler/* toRef */.Vh)(props, 'nav'),
        variant: (0,reactivity_esm_bundler/* toRef */.Vh)(props, 'variant')
      }
    });
    useRender(() => {
      return (0,runtime_core_esm_bundler/* createVNode */.Wm)(props.tag, {
        "class": ['v-list', {
          'v-list--disabled': props.disabled,
          'v-list--nav': props.nav
        }, themeClasses.value, backgroundColorClasses.value, borderClasses.value, densityClasses.value, elevationClasses.value, lineClasses.value, roundedClasses.value],
        "style": [backgroundColorStyles.value, dimensionStyles.value]
      }, {
        default: () => [(0,runtime_core_esm_bundler/* createVNode */.Wm)(VListChildren, {
          "items": items.value
        }, slots)]
      });
    });
    return {
      open,
      select
    };
  }

});
//# sourceMappingURL=VList.mjs.map
;// CONCATENATED MODULE: ./node_modules/vuetify/lib/components/VMenu/VMenu.css
// extracted by mini-css-extract-plugin

;// CONCATENATED MODULE: ./node_modules/vuetify/lib/components/VOverlay/VOverlay.css
// extracted by mini-css-extract-plugin

;// CONCATENATED MODULE: ./node_modules/vuetify/lib/composables/delay.mjs
// Utilities
 // Types

// Composables
const makeDelayProps = (0,propsFactory/* propsFactory */.U)({
  closeDelay: [Number, String],
  openDelay: [Number, String]
}, 'delay');
function useDelay(props, cb) {
  const delays = {};

  const runDelayFactory = prop => () => {
    // istanbul ignore next
    if (!globals/* IN_BROWSER */.BR) return Promise.resolve(true);
    const active = prop === 'openDelay';
    delays.closeDelay && window.clearTimeout(delays.closeDelay);
    delete delays.closeDelay;
    delays.openDelay && window.clearTimeout(delays.openDelay);
    delete delays.openDelay;
    return new Promise(resolve => {
      var _props$prop;

      const delay = parseInt((_props$prop = props[prop]) != null ? _props$prop : 0, 10);
      delays[prop] = window.setTimeout(() => {
        cb == null ? void 0 : cb(active);
        resolve(active);
      }, delay);
    });
  };

  return {
    runCloseDelay: runDelayFactory('closeDelay'),
    runOpenDelay: runDelayFactory('openDelay')
  };
}
//# sourceMappingURL=delay.mjs.map
;// CONCATENATED MODULE: ./node_modules/vuetify/lib/components/VMenu/shared.mjs
const VMenuSymbol = Symbol.for('vuetify:v-menu');
//# sourceMappingURL=shared.mjs.map
;// CONCATENATED MODULE: ./node_modules/vuetify/lib/components/VOverlay/useActivator.mjs
// Utilities



 // Types

const makeActivatorProps = (0,propsFactory/* propsFactory */.U)({
  activator: [String, Object],
  activatorProps: {
    type: Object,
    default: () => ({})
  },
  openOnClick: {
    type: Boolean,
    default: undefined
  },
  openOnHover: Boolean,
  openOnFocus: {
    type: Boolean,
    default: undefined
  },
  closeOnContentClick: Boolean,
  ...makeDelayProps()
});
function useActivator(props, _ref) {
  let {
    isActive,
    isTop
  } = _ref;
  const activatorEl = (0,reactivity_esm_bundler/* ref */.iH)();
  let isHovered = false;
  let isFocused = false;
  const openOnFocus = (0,runtime_core_esm_bundler/* computed */.Fl)(() => props.openOnFocus || props.openOnFocus == null && props.openOnHover);
  const openOnClick = (0,runtime_core_esm_bundler/* computed */.Fl)(() => props.openOnClick || props.openOnClick == null && !props.openOnHover && !openOnFocus.value);
  const {
    runOpenDelay,
    runCloseDelay
  } = useDelay(props, value => {
    if (value === (props.openOnHover && isHovered || openOnFocus.value && isFocused) && !(props.openOnHover && isActive.value && !isTop.value)) {
      isActive.value = value;
    }
  });
  const availableEvents = {
    click: e => {
      e.stopPropagation();
      activatorEl.value = e.currentTarget || e.target;
      isActive.value = !isActive.value;
    },
    mouseenter: e => {
      isHovered = true;
      activatorEl.value = e.currentTarget || e.target;
      runOpenDelay();
    },
    mouseleave: e => {
      isHovered = false;
      runCloseDelay();
    },
    focus: e => {
      if (globals/* SUPPORTS_FOCUS_VISIBLE */.Z1 && !e.target.matches(':focus-visible')) return;
      isFocused = true;
      e.stopPropagation();
      activatorEl.value = e.currentTarget || e.target;
      runOpenDelay();
    },
    blur: e => {
      isFocused = false;
      e.stopPropagation();
      runCloseDelay();
    }
  };
  const activatorEvents = (0,runtime_core_esm_bundler/* computed */.Fl)(() => {
    const events = {};

    if (openOnClick.value) {
      events.click = availableEvents.click;
    }

    if (props.openOnHover) {
      events.mouseenter = availableEvents.mouseenter;
      events.mouseleave = availableEvents.mouseleave;
    }

    if (openOnFocus.value) {
      events.focus = availableEvents.focus;
      events.blur = availableEvents.blur;
    }

    return events;
  });
  const contentEvents = (0,runtime_core_esm_bundler/* computed */.Fl)(() => {
    const events = {};

    if (props.openOnHover) {
      events.mouseenter = () => {
        isHovered = true;
        runOpenDelay();
      };

      events.mouseleave = () => {
        isHovered = false;
        runCloseDelay();
      };
    }

    if (props.closeOnContentClick) {
      const menu = (0,runtime_core_esm_bundler/* inject */.f3)(VMenuSymbol, null);

      events.click = () => {
        isActive.value = false;
        menu == null ? void 0 : menu.closeParents();
      };
    }

    return events;
  });
  (0,runtime_core_esm_bundler/* watch */.YP)(isTop, val => {
    if (val && props.openOnHover && !isHovered) {
      isActive.value = false;
    }
  });
  const activatorRef = (0,reactivity_esm_bundler/* ref */.iH)();
  (0,runtime_core_esm_bundler/* watchEffect */.m0)(() => {
    if (!activatorRef.value) return;
    (0,runtime_core_esm_bundler/* nextTick */.Y3)(() => {
      const activator = activatorRef.value;
      activatorEl.value = (0,helpers/* isComponentInstance */.rU)(activator) ? activator.$el : activator;
    });
  });
  const vm = (0,util_getCurrentInstance/* getCurrentInstance */.F)('useActivator');
  let scope;
  (0,runtime_core_esm_bundler/* watch */.YP)(() => !!props.activator, val => {
    if (val && globals/* IN_BROWSER */.BR) {
      scope = (0,reactivity_esm_bundler/* effectScope */.B)();
      scope.run(() => {
        _useActivator(props, vm, {
          activatorEl,
          activatorEvents
        });
      });
    } else if (scope) {
      scope.stop();
    }
  }, {
    flush: 'post',
    immediate: true
  });
  return {
    activatorEl,
    activatorRef,
    activatorEvents,
    contentEvents
  };
}

function _useActivator(props, vm, _ref2) {
  let {
    activatorEl,
    activatorEvents
  } = _ref2;
  (0,runtime_core_esm_bundler/* watch */.YP)(() => props.activator, (val, oldVal) => {
    if (oldVal && val !== oldVal) {
      const activator = getActivator(oldVal);
      activator && unbindActivatorProps(activator);
    }

    if (val) {
      (0,runtime_core_esm_bundler/* nextTick */.Y3)(() => bindActivatorProps());
    }
  }, {
    immediate: true
  });
  (0,runtime_core_esm_bundler/* watch */.YP)(() => props.activatorProps, () => {
    bindActivatorProps();
  });
  (0,reactivity_esm_bundler/* onScopeDispose */.EB)(() => {
    unbindActivatorProps();
  });

  function bindActivatorProps() {
    let el = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : getActivator();

    let _props = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : props.activatorProps;

    if (!el) return;
    Object.entries(activatorEvents.value).forEach(_ref3 => {
      let [name, cb] = _ref3;
      el.addEventListener(name, cb);
    });
    Object.keys(_props).forEach(k => {
      if (_props[k] == null) {
        el.removeAttribute(k);
      } else {
        el.setAttribute(k, _props[k]);
      }
    });
  }

  function unbindActivatorProps() {
    let el = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : getActivator();

    let _props = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : props.activatorProps;

    if (!el) return;
    Object.entries(activatorEvents.value).forEach(_ref4 => {
      let [name, cb] = _ref4;
      el.removeEventListener(name, cb);
    });
    Object.keys(_props).forEach(k => {
      el.removeAttribute(k);
    });
  }

  function getActivator() {
    var _activator;

    let selector = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : props.activator;
    let activator;

    if (selector) {
      if (selector === 'parent') {
        var _vm$proxy, _vm$proxy$$el;

        activator = vm == null ? void 0 : (_vm$proxy = vm.proxy) == null ? void 0 : (_vm$proxy$$el = _vm$proxy.$el) == null ? void 0 : _vm$proxy$$el.parentNode;
      } else if (typeof selector === 'string') {
        // Selector
        activator = document.querySelector(selector);
      } else if ('$el' in selector) {
        // Component (ref)
        activator = selector.$el;
      } else {
        // HTMLElement | Element
        activator = selector;
      }
    } // The activator should only be a valid element (Ignore comments and text nodes)


    activatorEl.value = ((_activator = activator) == null ? void 0 : _activator.nodeType) === Node.ELEMENT_NODE ? activator : null;
    return activatorEl.value;
  }
}
//# sourceMappingURL=useActivator.mjs.map
;// CONCATENATED MODULE: ./node_modules/vuetify/lib/util/isFixedPosition.mjs
function isFixedPosition(el) {
  while (el) {
    if (window.getComputedStyle(el).position === 'fixed') {
      return true;
    }

    el = el.offsetParent;
  }

  return false;
}
//# sourceMappingURL=isFixedPosition.mjs.map
;// CONCATENATED MODULE: ./node_modules/vuetify/lib/util/getScrollParent.mjs
function getScrollParent(el) {
  while (el) {
    if (hasScrollbar(el)) return el;
    el = el.parentElement;
  }

  return document.scrollingElement;
}
function getScrollParents(el) {
  const elements = [];

  while (el) {
    if (hasScrollbar(el)) elements.push(el);
    el = el.parentElement;
  }

  return elements;
}
function hasScrollbar(el) {
  if (!el || el.nodeType !== Node.ELEMENT_NODE) return false;
  const style = window.getComputedStyle(el);
  return style.overflowY === 'scroll' || style.overflowY === 'auto' && el.scrollHeight > el.clientHeight;
}
//# sourceMappingURL=getScrollParent.mjs.map
;// CONCATENATED MODULE: ./node_modules/vuetify/lib/components/VOverlay/util/anchor.mjs
const block = (/* unused pure expression or super */ null && (['top', 'bottom']));
const inline = (/* unused pure expression or super */ null && (['start', 'end']));

/** Parse a raw anchor string into an object */
function parseAnchor(anchor) {
  let [side, align] = anchor.split(' ');

  if (!align) {
    align = side === 'top' || side === 'bottom' ? 'start' : side === 'start' || side === 'end' ? 'top' : 'center';
  }

  return {
    side,
    align
  };
}
/** Get an anchor directly opposite, with the same alignment */

function oppositeAnchor(anchor) {
  return {
    side: {
      center: 'center',
      top: 'bottom',
      bottom: 'top',
      start: 'end',
      end: 'start'
    }[anchor.side],
    align: anchor.align
  };
}
/** Convert start/end into left/right */

function physicalAnchor(anchor, el) {
  var _map$side, _map$align;

  const {
    side,
    align
  } = anchor;
  const {
    direction
  } = window.getComputedStyle(el);
  const map = direction === 'ltr' ? {
    start: 'left',
    end: 'right'
  } : {
    start: 'right',
    end: 'left'
  };
  return ((_map$side = map[side]) != null ? _map$side : side) + ' ' + ((_map$align = map[align]) != null ? _map$align : align);
}
//# sourceMappingURL=anchor.mjs.map
;// CONCATENATED MODULE: ./node_modules/vuetify/lib/components/VOverlay/util/point.mjs
/** Convert a point in local space to viewport space */
function elementToViewport(point, offset) {
  return {
    x: point.x + offset.x,
    y: point.y + offset.y
  };
}
/** Convert a point in viewport space to local space */

function viewportToElement(point, offset) {
  return {
    x: point.x - offset.x,
    y: point.y - offset.y
  };
}
/** Get the difference between two points */

function getOffset(a, b) {
  return {
    x: a.x - b.x,
    y: a.y - b.y
  };
}
/** Convert an anchor object to a point in local space */

function anchorToPoint(anchor, box) {
  if (anchor.side === 'top' || anchor.side === 'bottom') {
    const {
      side,
      align
    } = anchor;
    const x = align === 'start' ? 0 : align === 'center' ? box.width / 2 : align === 'end' ? box.width : align;
    const y = side === 'top' ? 0 : side === 'bottom' ? box.height : side;
    return elementToViewport({
      x,
      y
    }, box);
  } else if (anchor.side === 'start' || anchor.side === 'end') {
    const {
      side,
      align
    } = anchor;
    const x = side === 'start' ? 0 : side === 'end' ? box.width : side;
    const y = align === 'top' ? 0 : align === 'center' ? box.height / 2 : align === 'bottom' ? box.height : align;
    return elementToViewport({
      x,
      y
    }, box);
  }

  return elementToViewport({
    x: box.width / 2,
    y: box.height / 2
  }, box);
}
//# sourceMappingURL=point.mjs.map
;// CONCATENATED MODULE: ./node_modules/vuetify/lib/components/VOverlay/positionStrategies.mjs
// Utilities



 // Types


const positionStrategies = {
  static: staticPositionStrategy,
  // specific viewport position, usually centered
  connected: connectedPositionStrategy // connected to a certain element

};
const makePositionStrategyProps = (0,propsFactory/* propsFactory */.U)({
  positionStrategy: {
    type: [String, Function],
    default: 'static',
    validator: val => typeof val === 'function' || val in positionStrategies
  },
  anchor: {
    type: String,
    default: 'bottom'
  },
  origin: {
    type: String,
    default: 'auto'
  },
  offset: [Number, String]
});
function usePositionStrategies(props, data) {
  const contentStyles = (0,reactivity_esm_bundler/* ref */.iH)({});
  const updatePosition = (0,reactivity_esm_bundler/* ref */.iH)();
  let scope;
  (0,runtime_core_esm_bundler/* watchEffect */.m0)(async () => {
    var _scope;

    (_scope = scope) == null ? void 0 : _scope.stop();
    updatePosition.value = undefined;
    if (!(globals/* IN_BROWSER */.BR && data.isActive.value && props.positionStrategy)) return;
    scope = (0,reactivity_esm_bundler/* effectScope */.B)();
    await (0,runtime_core_esm_bundler/* nextTick */.Y3)();
    scope.run(() => {
      if (typeof props.positionStrategy === 'function') {
        var _props$positionStrate;

        updatePosition.value = (_props$positionStrate = props.positionStrategy(data, props, contentStyles)) == null ? void 0 : _props$positionStrate.updatePosition;
      } else {
        var _positionStrategies$p;

        updatePosition.value = (_positionStrategies$p = positionStrategies[props.positionStrategy](data, props, contentStyles)) == null ? void 0 : _positionStrategies$p.updatePosition;
      }
    });
  });
  globals/* IN_BROWSER */.BR && window.addEventListener('resize', onResize, {
    passive: true
  });
  (0,reactivity_esm_bundler/* onScopeDispose */.EB)(() => {
    var _scope2;

    globals/* IN_BROWSER */.BR && window.removeEventListener('resize', onResize);
    updatePosition.value = undefined;
    (_scope2 = scope) == null ? void 0 : _scope2.stop();
  });

  function onResize(e) {
    var _updatePosition$value;

    (_updatePosition$value = updatePosition.value) == null ? void 0 : _updatePosition$value.call(updatePosition, e);
  }

  return {
    contentStyles,
    updatePosition
  };
}

function staticPositionStrategy() {// TODO
}

function connectedPositionStrategy(data, props, contentStyles) {
  const activatorFixed = isFixedPosition(data.activatorEl.value);

  if (activatorFixed) {
    Object.assign(contentStyles.value, {
      position: 'fixed'
    });
  }

  const preferredAnchor = (0,runtime_core_esm_bundler/* computed */.Fl)(() => parseAnchor(props.anchor));
  const preferredOrigin = (0,runtime_core_esm_bundler/* computed */.Fl)(() => props.origin === 'overlap' ? preferredAnchor.value : props.origin === 'auto' ? oppositeAnchor(preferredAnchor.value) : parseAnchor(props.origin));
  const doesOverlap = (0,runtime_core_esm_bundler/* computed */.Fl)(() => {
    return preferredAnchor.value.side === preferredOrigin.value.side;
  });
  const configuredMaxHeight = (0,runtime_core_esm_bundler/* computed */.Fl)(() => {
    const val = parseFloat(props.maxHeight);
    return isNaN(val) ? Infinity : val;
  });
  const configuredMinWidth = (0,runtime_core_esm_bundler/* computed */.Fl)(() => {
    const val = parseFloat(props.minWidth);
    return isNaN(val) ? Infinity : val;
  });
  let observe = false;

  if (globals/* IN_BROWSER */.BR) {
    const observer = new ResizeObserver(() => {
      if (observe) updatePosition();
    });
    observer.observe(data.activatorEl.value);
    observer.observe(data.contentEl.value);
    (0,reactivity_esm_bundler/* onScopeDispose */.EB)(() => {
      observer.disconnect();
    });
  } // eslint-disable-next-line max-statements


  function updatePosition() {
    var _props$maxWidth;

    observe = false;
    requestAnimationFrame(() => {
      requestAnimationFrame(() => observe = true);
    });
    const targetBox = data.activatorEl.value.getBoundingClientRect(); // TODO: offset shouldn't affect width

    if (props.offset) {
      targetBox.x -= +props.offset;
      targetBox.y -= +props.offset;
      targetBox.width += +props.offset * 2;
      targetBox.height += +props.offset * 2;
    }

    const scrollParent = getScrollParent(data.contentEl.value);
    const viewportWidth = scrollParent.clientWidth;
    const viewportHeight = Math.min(scrollParent.clientHeight, window.innerHeight);
    let contentBox;
    {
      const scrollables = new Map();
      data.contentEl.value.querySelectorAll('*').forEach(el => {
        const x = el.scrollLeft;
        const y = el.scrollTop;

        if (x || y) {
          scrollables.set(el, [x, y]);
        }
      });
      const initialMaxWidth = data.contentEl.value.style.maxWidth;
      const initialMaxHeight = data.contentEl.value.style.maxHeight;
      data.contentEl.value.style.removeProperty('max-width');
      data.contentEl.value.style.removeProperty('max-height');
      contentBox = nullifyTransforms(data.contentEl.value);
      contentBox.x -= parseFloat(data.contentEl.value.style.left) || 0;
      contentBox.y -= parseFloat(data.contentEl.value.style.top) || 0;
      data.contentEl.value.style.maxWidth = initialMaxWidth;
      data.contentEl.value.style.maxHeight = initialMaxHeight;
      scrollables.forEach((position, el) => {
        el.scrollTo(...position);
      });
    }
    const contentHeight = Math.min(configuredMaxHeight.value, contentBox.height); // Regard undefined maxWidth as maximally occupying whole remaining space by default

    const maxFreeSpaceWidth = props.maxWidth === undefined ? Number.MAX_VALUE : parseInt((_props$maxWidth = props.maxWidth) != null ? _props$maxWidth : 0, 10);
    const viewportMargin = 12;
    const freeSpace = {
      top: targetBox.top - viewportMargin,
      bottom: viewportHeight - targetBox.bottom - viewportMargin,
      left: Math.min(targetBox.left - viewportMargin, maxFreeSpaceWidth),
      right: Math.min(viewportWidth - targetBox.right - viewportMargin, maxFreeSpaceWidth)
    };
    const fitsY = preferredAnchor.value.side === 'bottom' && contentHeight <= freeSpace.bottom || preferredAnchor.value.side === 'top' && contentHeight <= freeSpace.top;
    const anchor = fitsY ? preferredAnchor.value : preferredAnchor.value.side === 'bottom' && freeSpace.top > freeSpace.bottom || preferredAnchor.value.side === 'top' && freeSpace.bottom > freeSpace.top ? oppositeAnchor(preferredAnchor.value) : preferredAnchor.value;
    const origin = fitsY ? preferredOrigin.value : oppositeAnchor(anchor);
    const canFill = doesOverlap.value || ['center', 'top', 'bottom'].includes(anchor.side);
    const maxWidth = canFill ? Math.min(viewportWidth, Math.max(targetBox.width, viewportWidth - viewportMargin * 2)) : anchor.side === 'end' ? freeSpace.right : anchor.side === 'start' ? freeSpace.left : null;
    const minWidth = Math.min(configuredMinWidth.value, maxWidth, targetBox.width);
    const maxHeight = fitsY ? configuredMaxHeight.value : Math.min(configuredMaxHeight.value, Math.floor(anchor.side === 'top' ? freeSpace.top : freeSpace.bottom));
    const targetPoint = anchorToPoint(anchor, targetBox);
    const contentPoint = anchorToPoint(origin, new Box({ ...contentBox,
      height: Math.min(contentHeight, maxHeight)
    }));
    const {
      x,
      y
    } = getOffset(targetPoint, contentPoint);
    Object.assign(contentStyles.value, {
      '--v-overlay-anchor-origin': physicalAnchor(anchor, data.activatorEl.value),
      top: (0,helpers/* convertToUnit */.kb)(Math.round(y)),
      left: (0,helpers/* convertToUnit */.kb)(Math.round(x)),
      // TODO: right for origin="end", rtl
      transformOrigin: physicalAnchor(origin, data.activatorEl.value),
      minWidth: (0,helpers/* convertToUnit */.kb)(minWidth),
      maxWidth: (0,helpers/* convertToUnit */.kb)(maxWidth),
      maxHeight: (0,helpers/* convertToUnit */.kb)(maxHeight)
    });
  }

  (0,runtime_core_esm_bundler/* watch */.YP)(() => [preferredAnchor.value, preferredOrigin.value, props.offset], () => updatePosition(), {
    immediate: !activatorFixed
  });
  if (activatorFixed) (0,runtime_core_esm_bundler/* nextTick */.Y3)(() => updatePosition());
  requestAnimationFrame(() => {
    if (contentStyles.value.maxHeight) updatePosition();
  });
  return {
    updatePosition
  };
}
//# sourceMappingURL=positionStrategies.mjs.map
;// CONCATENATED MODULE: ./node_modules/vuetify/lib/components/VOverlay/requestNewFrame.mjs
let clean = true;
const requestNewFrame_frames = [];
/**
 * Schedule a task to run in an animation frame on its own
 * This is useful for heavy tasks that may cause jank if all ran together
 */

function requestNewFrame(cb) {
  if (!clean || requestNewFrame_frames.length) {
    requestNewFrame_frames.push(cb);
    run();
  } else {
    clean = false;
    cb();
    run();
  }
}
let raf = -1;

function run() {
  cancelAnimationFrame(raf);
  raf = requestAnimationFrame(() => {
    const frame = requestNewFrame_frames.shift();
    if (frame) frame();
    if (requestNewFrame_frames.length) run();else clean = true;
  });
}
//# sourceMappingURL=requestNewFrame.mjs.map
;// CONCATENATED MODULE: ./node_modules/vuetify/lib/components/VOverlay/scrollStrategies.mjs
// Utilities


 // Types

const scrollStrategies = {
  none: null,
  close: closeScrollStrategy,
  block: blockScrollStrategy,
  reposition: repositionScrollStrategy
};
const makeScrollStrategyProps = (0,propsFactory/* propsFactory */.U)({
  scrollStrategy: {
    type: [String, Function],
    default: 'block',
    validator: val => typeof val === 'function' || val in scrollStrategies
  }
});
function useScrollStrategies(props, data) {
  if (!globals/* IN_BROWSER */.BR) return;
  let scope;
  (0,runtime_core_esm_bundler/* watchEffect */.m0)(async () => {
    var _scope;

    (_scope = scope) == null ? void 0 : _scope.stop();
    if (!(data.isActive.value && props.scrollStrategy)) return;
    scope = (0,reactivity_esm_bundler/* effectScope */.B)();
    await (0,runtime_core_esm_bundler/* nextTick */.Y3)();
    scope.run(() => {
      if (typeof props.scrollStrategy === 'function') {
        props.scrollStrategy(data);
      } else {
        var _scrollStrategies$pro;

        (_scrollStrategies$pro = scrollStrategies[props.scrollStrategy]) == null ? void 0 : _scrollStrategies$pro.call(scrollStrategies, data);
      }
    });
  });
}

function closeScrollStrategy(data) {
  var _data$activatorEl$val;

  function onScroll(e) {
    data.isActive.value = false;
  }

  bindScroll((_data$activatorEl$val = data.activatorEl.value) != null ? _data$activatorEl$val : data.contentEl.value, onScroll);
}

function blockScrollStrategy(data) {
  var _data$root$value;

  const scrollElements = [...new Set([...getScrollParents(data.activatorEl.value), ...getScrollParents(data.contentEl.value)])].filter(el => !el.classList.contains('v-overlay-scroll-blocked'));
  const scrollbarWidth = window.innerWidth - document.documentElement.offsetWidth;

  const scrollableParent = (el => hasScrollbar(el) && el)(((_data$root$value = data.root.value) == null ? void 0 : _data$root$value.offsetParent) || document.documentElement);

  if (scrollableParent) {
    data.root.value.classList.add('v-overlay--scroll-blocked');
  }

  scrollElements.forEach((el, i) => {
    el.style.setProperty('--v-body-scroll-x', (0,helpers/* convertToUnit */.kb)(-el.scrollLeft));
    el.style.setProperty('--v-body-scroll-y', (0,helpers/* convertToUnit */.kb)(-el.scrollTop));
    el.style.setProperty('--v-scrollbar-offset', (0,helpers/* convertToUnit */.kb)(scrollbarWidth));
    el.classList.add('v-overlay-scroll-blocked');
  });
  (0,reactivity_esm_bundler/* onScopeDispose */.EB)(() => {
    scrollElements.forEach((el, i) => {
      const x = parseFloat(el.style.getPropertyValue('--v-body-scroll-x'));
      const y = parseFloat(el.style.getPropertyValue('--v-body-scroll-y'));
      el.style.removeProperty('--v-body-scroll-x');
      el.style.removeProperty('--v-body-scroll-y');
      el.style.removeProperty('--v-scrollbar-offset');
      el.classList.remove('v-overlay-scroll-blocked');
      el.scrollLeft = -x;
      el.scrollTop = -y;
    });

    if (scrollableParent) {
      data.root.value.classList.remove('v-overlay--scroll-blocked');
    }
  });
}

function repositionScrollStrategy(data) {
  var _data$activatorEl$val2;

  let slow = false;
  let raf = -1;

  function update(e) {
    requestNewFrame(() => {
      var _data$updatePosition$, _data$updatePosition;

      const start = performance.now();
      (_data$updatePosition$ = (_data$updatePosition = data.updatePosition).value) == null ? void 0 : _data$updatePosition$.call(_data$updatePosition, e);
      const time = performance.now() - start;
      slow = time / (1000 / 60) > 2;
    });
  }

  bindScroll((_data$activatorEl$val2 = data.activatorEl.value) != null ? _data$activatorEl$val2 : data.contentEl.value, e => {
    if (slow) {
      // If the position calculation is slow,
      // defer updates until scrolling is finished.
      // Browsers usually fire one scroll event per frame so
      // we just wait until we've got two frames without an event
      cancelAnimationFrame(raf);
      raf = requestAnimationFrame(() => {
        raf = requestAnimationFrame(() => {
          update(e);
        });
      });
    } else {
      update(e);
    }
  });
}
/** @private */


function bindScroll(el, onScroll) {
  const scrollElements = [document, ...getScrollParents(el)];
  scrollElements.forEach(el => {
    el.addEventListener('scroll', onScroll, {
      passive: true
    });
  });
  (0,reactivity_esm_bundler/* onScopeDispose */.EB)(() => {
    scrollElements.forEach(el => {
      el.removeEventListener('scroll', onScroll);
    });
  });
}
//# sourceMappingURL=scrollStrategies.mjs.map
;// CONCATENATED MODULE: ./node_modules/vuetify/lib/composables/teleport.mjs
// Utilities

 // Types

function useTeleport(target) {
  const teleportTarget = (0,runtime_core_esm_bundler/* computed */.Fl)(() => {
    const _target = target.value;
    if (_target === true || !globals/* IN_BROWSER */.BR) return undefined;
    const targetElement = _target === false ? document.body : typeof _target === 'string' ? document.querySelector(_target) : _target;

    if (targetElement == null) {
      (0,runtime_core_esm_bundler/* warn */.ZK)(`Unable to locate target ${_target}`);
      return undefined;
    }

    if (!useTeleport.cache.has(targetElement)) {
      const el = document.createElement('div');
      el.className = 'v-overlay-container';
      targetElement.appendChild(el);
      useTeleport.cache.set(targetElement, el);
    }

    return useTeleport.cache.get(targetElement);
  });
  return {
    teleportTarget
  };
}
useTeleport.cache = new WeakMap();
//# sourceMappingURL=teleport.mjs.map
;// CONCATENATED MODULE: ./node_modules/vuetify/lib/composables/lazy.mjs
// Utilities
 // Types


const makeLazyProps = (0,propsFactory/* propsFactory */.U)({
  eager: Boolean
}, 'lazy');
function useLazy(props, active) {
  const isBooted = (0,reactivity_esm_bundler/* ref */.iH)(false);
  const hasContent = (0,runtime_core_esm_bundler/* computed */.Fl)(() => isBooted.value || props.eager || active.value);
  (0,runtime_core_esm_bundler/* watch */.YP)(active, () => isBooted.value = true);

  function onAfterLeave() {
    if (!props.eager) isBooted.value = false;
  }

  return {
    isBooted,
    hasContent,
    onAfterLeave
  };
}
//# sourceMappingURL=lazy.mjs.map
;// CONCATENATED MODULE: ./node_modules/vuetify/lib/composables/stack.mjs

 // Types

const stack = (0,reactivity_esm_bundler/* ref */.iH)([]);
function useStack(isActive) {
  const vm = (0,util_getCurrentInstance/* getCurrentInstance */.F)('useStack');
  let scope;
  (0,runtime_core_esm_bundler/* watch */.YP)(isActive, val => {
    if (val) {
      scope = (0,reactivity_esm_bundler/* effectScope */.B)();
      scope.run(() => {
        stack.value.push(vm);
        (0,reactivity_esm_bundler/* onScopeDispose */.EB)(() => {
          const idx = stack.value.indexOf(vm);
          stack.value.splice(idx, 1);
        });
      });
    } else {
      var _scope;

      (_scope = scope) == null ? void 0 : _scope.stop();
    }
  }, {
    immediate: true
  });
  const isTop = (0,reactivity_esm_bundler/* ref */.iH)(true);
  (0,runtime_core_esm_bundler/* watchEffect */.m0)(() => {
    const _isTop = (0,reactivity_esm_bundler/* toRaw */.IU)(stack.value[stack.value.length - 1]) === vm;

    setTimeout(() => isTop.value = _isTop);
  });
  return {
    isTop: (0,reactivity_esm_bundler/* readonly */.OT)(isTop)
  };
}
//# sourceMappingURL=stack.mjs.map
// EXTERNAL MODULE: ./node_modules/vuetify/lib/directives/click-outside/index.mjs + 1 modules
var click_outside = __webpack_require__(258);
;// CONCATENATED MODULE: ./node_modules/vuetify/lib/components/VOverlay/VOverlay.mjs

// Styles
 // Composables













 // Directives

 // Utilities


 // Types

function Scrim(props) {
  const {
    modelValue,
    color,
    ...rest
  } = props;
  return (0,runtime_core_esm_bundler/* createVNode */.Wm)(runtime_dom_esm_bundler/* Transition */.uT, {
    "name": "fade-transition",
    "appear": true
  }, {
    default: () => [props.modelValue && (0,runtime_core_esm_bundler/* createVNode */.Wm)("div", (0,runtime_core_esm_bundler/* mergeProps */.dG)({
      "class": ['v-overlay__scrim', props.color.backgroundColorClasses.value],
      "style": props.color.backgroundColorStyles.value
    }, rest), null)]
  });
}

const VOverlay = (0,defineComponent/* genericComponent */.e)()({
  name: 'VOverlay',
  directives: {
    ClickOutside: click_outside/* ClickOutside */.L
  },
  inheritAttrs: false,
  props: {
    absolute: Boolean,
    attach: [Boolean, String, Object],
    contained: Boolean,
    contentClass: null,
    noClickAnimation: Boolean,
    modelValue: Boolean,
    persistent: Boolean,
    scrim: {
      type: [String, Boolean],
      default: true
    },
    ...makeActivatorProps(),
    ...makeDimensionProps(),
    ...makePositionStrategyProps(),
    ...makeScrollStrategyProps(),
    ...(0,composables_theme/* makeThemeProps */.x$)(),
    ...makeTransitionProps(),
    ...makeLazyProps()
  },
  emits: {
    'click:outside': e => true,
    'update:modelValue': value => true,
    afterLeave: () => true
  },

  setup(props, _ref) {
    let {
      slots,
      attrs,
      emit
    } = _ref;
    const isActive = useProxiedModel(props, 'modelValue');
    const {
      teleportTarget
    } = useTeleport((0,runtime_core_esm_bundler/* computed */.Fl)(() => props.attach || props.contained));
    const {
      themeClasses
    } = (0,composables_theme/* provideTheme */.ER)(props);
    const {
      rtlClasses
    } = (0,rtl/* useRtl */.Vw)();
    const {
      hasContent,
      onAfterLeave
    } = useLazy(props, isActive);
    const scrimColor = useBackgroundColor((0,runtime_core_esm_bundler/* computed */.Fl)(() => {
      return typeof props.scrim === 'string' ? props.scrim : null;
    }));
    const {
      isTop
    } = useStack(isActive);
    const {
      activatorEl,
      activatorRef,
      activatorEvents,
      contentEvents
    } = useActivator(props, {
      isActive,
      isTop
    });
    const {
      dimensionStyles
    } = useDimension(props);
    const root = (0,reactivity_esm_bundler/* ref */.iH)();
    const contentEl = (0,reactivity_esm_bundler/* ref */.iH)();
    const {
      contentStyles,
      updatePosition
    } = usePositionStrategies(props, {
      contentEl,
      activatorEl,
      isActive
    });
    useScrollStrategies(props, {
      root,
      contentEl,
      activatorEl,
      isActive,
      updatePosition
    });

    function onClickOutside(e) {
      emit('click:outside', e);
      if (!props.persistent) isActive.value = false;else animateClick();
    }

    function closeConditional() {
      return isActive.value && isTop.value;
    }

    globals/* IN_BROWSER */.BR && (0,runtime_core_esm_bundler/* watch */.YP)(isActive, val => {
      if (val) {
        window.addEventListener('keydown', onKeydown);
      } else {
        window.removeEventListener('keydown', onKeydown);
      }
    }, {
      immediate: true
    });

    function onKeydown(e) {
      if (e.key === 'Escape' && isTop.value) {
        if (!props.persistent) {
          isActive.value = false;
        } else animateClick();
      }
    }

    useBackButton(next => {
      if (isTop.value && isActive.value) {
        next(false);
        if (!props.persistent) isActive.value = false;else animateClick();
      } else {
        next();
      }
    });
    const top = (0,reactivity_esm_bundler/* ref */.iH)();
    (0,runtime_core_esm_bundler/* watch */.YP)(() => isActive.value && (props.absolute || props.contained) && teleportTarget.value == null, val => {
      if (val) {
        const scrollParent = getScrollParent(root.value);

        if (scrollParent && scrollParent !== document.scrollingElement) {
          top.value = scrollParent.scrollTop;
        }
      }
    }); // Add a quick "bounce" animation to the content

    function animateClick() {
      var _contentEl$value;

      if (props.noClickAnimation) return;
      (_contentEl$value = contentEl.value) == null ? void 0 : _contentEl$value.animate([{
        transformOrigin: 'center'
      }, {
        transform: 'scale(1.03)'
      }, {
        transformOrigin: 'center'
      }], {
        duration: 150,
        easing: standardEasing
      });
    }

    useRender(() => {
      var _slots$activator, _slots$default;

      return (0,runtime_core_esm_bundler/* createVNode */.Wm)(runtime_core_esm_bundler/* Fragment */.HY, null, [(_slots$activator = slots.activator) == null ? void 0 : _slots$activator.call(slots, {
        isActive: isActive.value,
        props: (0,runtime_core_esm_bundler/* mergeProps */.dG)({
          ref: activatorRef
        }, (0,runtime_core_esm_bundler/* toHandlers */.mx)(activatorEvents.value), props.activatorProps)
      }), globals/* IN_BROWSER */.BR && (0,runtime_core_esm_bundler/* createVNode */.Wm)(runtime_core_esm_bundler/* Teleport */.lR, {
        "disabled": !teleportTarget.value,
        "to": teleportTarget.value
      }, {
        default: () => [hasContent.value && (0,runtime_core_esm_bundler/* createVNode */.Wm)("div", (0,runtime_core_esm_bundler/* mergeProps */.dG)({
          "class": ['v-overlay', {
            'v-overlay--absolute': props.absolute || props.contained,
            'v-overlay--active': isActive.value,
            'v-overlay--contained': props.contained
          }, themeClasses.value, rtlClasses.value],
          "style": {
            top: (0,helpers/* convertToUnit */.kb)(top.value)
          },
          "ref": root
        }, attrs), [(0,runtime_core_esm_bundler/* createVNode */.Wm)(Scrim, {
          "color": scrimColor,
          "modelValue": isActive.value && !!props.scrim
        }, null), (0,runtime_core_esm_bundler/* createVNode */.Wm)(MaybeTransition, {
          "appear": true,
          "persisted": true,
          "transition": props.transition,
          "target": activatorEl.value,
          "onAfterLeave": () => {
            onAfterLeave();
            emit('afterLeave');
          }
        }, {
          default: () => [(0,runtime_core_esm_bundler/* withDirectives */.wy)((0,runtime_core_esm_bundler/* createVNode */.Wm)("div", (0,runtime_core_esm_bundler/* mergeProps */.dG)({
            "ref": contentEl,
            "class": ['v-overlay__content', props.contentClass],
            "style": [dimensionStyles.value, contentStyles.value]
          }, (0,runtime_core_esm_bundler/* toHandlers */.mx)(contentEvents.value)), [(_slots$default = slots.default) == null ? void 0 : _slots$default.call(slots, {
            isActive
          })]), [[runtime_dom_esm_bundler/* vShow */.F8, isActive.value], [(0,runtime_core_esm_bundler/* resolveDirective */.Q2)("click-outside"), {
            handler: onClickOutside,
            closeConditional,
            include: () => [activatorEl.value]
          }]])]
        })])]
      })]);
    });
    return {
      animateClick,
      contentEl,
      activatorEl,
      isTop,
      updatePosition
    };
  }

});
//# sourceMappingURL=VOverlay.mjs.map
;// CONCATENATED MODULE: ./node_modules/vuetify/lib/components/VMenu/VMenu.mjs

// Styles
 // Components


 // Composables


 // Utilities



 // Types


const VMenu = (0,defineComponent/* genericComponent */.e)()({
  name: 'VMenu',
  inheritAttrs: false,
  props: {
    // TODO
    // disableKeys: Boolean,
    modelValue: Boolean,
    id: String,
    ...makeTransitionProps({
      transition: {
        component: VDialogTransition
      }
    })
  },
  emits: {
    'update:modelValue': value => true
  },

  setup(props, _ref) {
    let {
      attrs,
      slots
    } = _ref;
    const isActive = useProxiedModel(props, 'modelValue');
    const uid = (0,helpers/* getUid */.sq)();
    const id = (0,runtime_core_esm_bundler/* computed */.Fl)(() => props.id || `v-menu-${uid}`);
    const overlay = (0,reactivity_esm_bundler/* ref */.iH)();
    const parent = (0,runtime_core_esm_bundler/* inject */.f3)(VMenuSymbol, null);
    let openChildren = 0;
    (0,runtime_core_esm_bundler/* provide */.JJ)(VMenuSymbol, {
      register() {
        ++openChildren;
      },

      unregister() {
        --openChildren;
      },

      closeParents() {
        setTimeout(() => {
          if (!openChildren) {
            isActive.value = false;
            parent == null ? void 0 : parent.closeParents();
          }
        }, 40);
      }

    });
    (0,runtime_core_esm_bundler/* watch */.YP)(isActive, val => {
      val ? parent == null ? void 0 : parent.register() : parent == null ? void 0 : parent.unregister();
    });

    function onClickOutside() {
      parent == null ? void 0 : parent.closeParents();
    }

    useRender(() => (0,runtime_core_esm_bundler/* createVNode */.Wm)(VOverlay, (0,runtime_core_esm_bundler/* mergeProps */.dG)({
      "ref": overlay,
      "modelValue": isActive.value,
      "onUpdate:modelValue": $event => isActive.value = $event,
      "class": ['v-menu'],
      "transition": props.transition,
      "absolute": true,
      "closeOnContentClick": true,
      "positionStrategy": "connected",
      "scrollStrategy": "reposition",
      "scrim": false,
      "openDelay": "300",
      "closeDelay": "250",
      "activatorProps": {
        'aria-haspopup': 'menu',
        'aria-expanded': String(isActive.value),
        'aria-owns': id.value
      },
      "onClick:outside": onClickOutside
    }, attrs), {
      default: slots.default,
      activator: slots.activator
    }));
    return useForwardRef({
      id
    }, overlay);
  }

});
//# sourceMappingURL=VMenu.mjs.map
;// CONCATENATED MODULE: ./node_modules/vuetify/lib/components/VTextField/VTextField.css
// extracted by mini-css-extract-plugin

;// CONCATENATED MODULE: ./node_modules/vuetify/lib/components/VInput/VInput.css
// extracted by mini-css-extract-plugin

;// CONCATENATED MODULE: ./node_modules/vuetify/lib/components/VMessages/VMessages.css
// extracted by mini-css-extract-plugin

;// CONCATENATED MODULE: ./node_modules/vuetify/lib/components/VMessages/VMessages.mjs

// Styles
 // Components

 // Composables


 // Utilities



const VMessages = (0,defineComponent/* defineComponent */.a)({
  name: 'VMessages',
  props: {
    active: Boolean,
    color: String,
    messages: {
      type: [Array, String],
      default: () => []
    },
    ...makeTransitionProps({
      transition: {
        component: VSlideYTransition,
        leaveAbsolute: true,
        group: true
      }
    })
  },

  setup(props, _ref) {
    let {
      slots
    } = _ref;
    const messages = (0,runtime_core_esm_bundler/* computed */.Fl)(() => (0,helpers/* wrapInArray */.FT)(props.messages));
    const {
      textColorClasses,
      textColorStyles
    } = useTextColor((0,runtime_core_esm_bundler/* computed */.Fl)(() => props.color));
    return () => (0,runtime_core_esm_bundler/* createVNode */.Wm)(MaybeTransition, {
      "transition": props.transition,
      "tag": "div",
      "class": ['v-messages', textColorClasses.value],
      "style": textColorStyles.value
    }, {
      default: () => [props.active && messages.value.map((message, i) => (0,runtime_core_esm_bundler/* createVNode */.Wm)("div", {
        "class": "v-messages__message",
        "key": `${i}-${messages.value}`
      }, [slots.message ? slots.message({
        message
      }) : message]))]
    });
  }

});
//# sourceMappingURL=VMessages.mjs.map
;// CONCATENATED MODULE: ./node_modules/vuetify/lib/composables/form.mjs
// Utilities


 // Types

const FormKey = Symbol.for('vuetify:form');
const makeFormProps = (0,propsFactory/* propsFactory */.U)({
  disabled: Boolean,
  fastFail: Boolean,
  lazyValidation: Boolean,
  readonly: Boolean,
  modelValue: {
    type: Boolean,
    default: null
  }
});
function createForm(props) {
  const model = useProxiedModel(props, 'modelValue');
  const isDisabled = (0,runtime_core_esm_bundler/* computed */.Fl)(() => props.disabled);
  const isReadonly = (0,runtime_core_esm_bundler/* computed */.Fl)(() => props.readonly);
  const isValidating = (0,reactivity_esm_bundler/* ref */.iH)(false);
  const items = (0,reactivity_esm_bundler/* ref */.iH)([]);
  const errorMessages = (0,reactivity_esm_bundler/* ref */.iH)([]);

  async function validate() {
    const results = [];
    let valid = true;
    errorMessages.value = [];
    isValidating.value = true;

    for (const item of items.value) {
      const itemErrorMessages = await item.validate();

      if (itemErrorMessages.length > 0) {
        valid = false;
        results.push({
          id: item.id,
          errorMessages: itemErrorMessages
        });
      }

      if (!valid && props.fastFail) break;
    }

    errorMessages.value = results;
    isValidating.value = false;
    return {
      valid,
      errorMessages: errorMessages.value
    };
  }

  function reset() {
    items.value.forEach(item => item.reset());
    model.value = null;
  }

  function resetValidation() {
    items.value.forEach(item => item.resetValidation());
    errorMessages.value = [];
    model.value = null;
  }

  (0,runtime_core_esm_bundler/* watch */.YP)(items, () => {
    let valid = null;

    if (items.value.some(item => item.isValid === false)) {
      valid = false;
    } else if (items.value.every(item => item.isValid === true)) {
      valid = true;
    }

    model.value = valid;
  }, {
    deep: true
  });
  (0,runtime_core_esm_bundler/* provide */.JJ)(FormKey, {
    register: (id, validate, reset, resetValidation, isValid) => {
      if (items.value.some(item => item.id === id)) {
        (0,util_console/* consoleWarn */.Kd)(`Duplicate input name "${id}"`);
      }

      items.value.push({
        id,
        validate,
        reset,
        resetValidation,
        isValid: isValid // TODO: Better way to type this unwrapping?

      });
    },
    unregister: id => {
      items.value = items.value.filter(item => {
        return item.id !== id;
      });
    },
    isDisabled,
    isReadonly,
    isValidating,
    items
  });
  return {
    errorMessages,
    isDisabled,
    isReadonly,
    isValidating,
    items,
    validate,
    reset,
    resetValidation
  };
}
function useForm() {
  return (0,runtime_core_esm_bundler/* inject */.f3)(FormKey, null);
}
//# sourceMappingURL=form.mjs.map
;// CONCATENATED MODULE: ./node_modules/vuetify/lib/composables/validation.mjs
// Composables

 // Utilities


 // Types

const makeValidationProps = (0,propsFactory/* propsFactory */.U)({
  disabled: Boolean,
  error: Boolean,
  errorMessages: {
    type: [Array, String],
    default: () => []
  },
  maxErrors: {
    type: [Number, String],
    default: 1
  },
  name: String,
  readonly: Boolean,
  rules: {
    type: Array,
    default: () => []
  },
  modelValue: null
});
function useValidation(props) {
  let name = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : (0,util_getCurrentInstance/* getCurrentInstanceName */.B)();
  const model = useProxiedModel(props, 'modelValue');
  const form = useForm();
  const internalErrorMessages = (0,reactivity_esm_bundler/* ref */.iH)([]);
  const isPristine = (0,reactivity_esm_bundler/* ref */.iH)(true);
  const isDirty = (0,runtime_core_esm_bundler/* computed */.Fl)(() => (0,helpers/* wrapInArray */.FT)(model.value === '' ? null : model.value).length > 0);
  const isDisabled = (0,runtime_core_esm_bundler/* computed */.Fl)(() => !!(props.disabled || form != null && form.isDisabled.value));
  const isReadonly = (0,runtime_core_esm_bundler/* computed */.Fl)(() => !!(props.readonly || form != null && form.isReadonly.value));
  const errorMessages = (0,runtime_core_esm_bundler/* computed */.Fl)(() => {
    return props.errorMessages.length ? (0,helpers/* wrapInArray */.FT)(props.errorMessages) : internalErrorMessages.value;
  });
  const isValid = (0,runtime_core_esm_bundler/* computed */.Fl)(() => {
    if (props.error || errorMessages.value.length) return false;
    return isPristine.value ? null : true;
  });
  const isValidating = (0,reactivity_esm_bundler/* ref */.iH)(false);
  const validationClasses = (0,runtime_core_esm_bundler/* computed */.Fl)(() => {
    return {
      [`${name}--error`]: isValid.value === false,
      [`${name}--dirty`]: isDirty.value,
      [`${name}--disabled`]: isDisabled.value,
      [`${name}--readonly`]: isReadonly.value
    };
  });
  const uid = (0,runtime_core_esm_bundler/* computed */.Fl)(() => {
    var _props$name;

    return (_props$name = props.name) != null ? _props$name : (0,helpers/* getUid */.sq)();
  });
  (0,runtime_core_esm_bundler/* onBeforeMount */.wF)(() => {
    form == null ? void 0 : form.register(uid.value, validate, reset, resetValidation, isValid);
  });
  (0,runtime_core_esm_bundler/* onBeforeUnmount */.Jd)(() => {
    form == null ? void 0 : form.unregister(uid.value);
  });
  (0,runtime_core_esm_bundler/* watch */.YP)(model, () => {
    if (model.value != null) validate();
  });

  function reset() {
    resetValidation();
    model.value = null;
  }

  function resetValidation() {
    isPristine.value = true;
    internalErrorMessages.value = [];
  }

  async function validate() {
    const results = [];
    isValidating.value = true;

    for (const rule of props.rules) {
      if (results.length >= (props.maxErrors || 1)) {
        break;
      }

      const handler = typeof rule === 'function' ? rule : () => rule;
      const result = await handler(model.value);
      if (result === true) continue;

      if (typeof result !== 'string') {
        // eslint-disable-next-line no-console
        console.warn(`${result} is not a valid value. Rule functions must return boolean true or a string.`);
        continue;
      }

      results.push(result);
    }

    internalErrorMessages.value = results;
    isValidating.value = false;
    isPristine.value = false;
    return internalErrorMessages.value;
  }

  return {
    errorMessages,
    isDirty,
    isDisabled,
    isReadonly,
    isPristine,
    isValid,
    isValidating,
    reset,
    resetValidation,
    validate,
    validationClasses
  };
}
//# sourceMappingURL=validation.mjs.map
;// CONCATENATED MODULE: ./node_modules/vuetify/lib/components/VInput/VInput.mjs

// Styles
 // Components


 // Composables


 // Utilities


 // Types

const makeVInputProps = (0,propsFactory/* propsFactory */.U)({
  id: String,
  appendIcon: String,
  prependIcon: String,
  hideDetails: [Boolean, String],
  messages: {
    type: [Array, String],
    default: () => []
  },
  direction: {
    type: String,
    default: 'horizontal',
    validator: v => ['horizontal', 'vertical'].includes(v)
  },
  ...makeDensityProps(),
  ...makeValidationProps()
});
const VInput = (0,defineComponent/* genericComponent */.e)()({
  name: 'VInput',
  props: { ...makeVInputProps()
  },
  emits: {
    'update:modelValue': val => true
  },

  setup(props, _ref) {
    let {
      attrs,
      slots,
      emit
    } = _ref;
    const {
      densityClasses
    } = useDensity(props);
    const {
      errorMessages,
      isDirty,
      isDisabled,
      isReadonly,
      isPristine,
      isValid,
      isValidating,
      reset,
      resetValidation,
      validate,
      validationClasses
    } = useValidation(props);
    const uid = (0,helpers/* getUid */.sq)();
    const id = (0,runtime_core_esm_bundler/* computed */.Fl)(() => props.id || `input-${uid}`);
    const slotProps = (0,runtime_core_esm_bundler/* computed */.Fl)(() => ({
      id,
      isDirty,
      isDisabled,
      isReadonly,
      isPristine,
      isValid,
      isValidating,
      reset,
      resetValidation,
      validate
    }));
    useRender(() => {
      var _props$messages, _slots$prepend, _slots$default, _slots$append, _slots$details;

      const hasPrepend = !!(slots.prepend || props.prependIcon);
      const hasAppend = !!(slots.append || props.appendIcon);
      const hasMessages = !!((_props$messages = props.messages) != null && _props$messages.length || errorMessages.value.length);
      const hasDetails = !props.hideDetails || props.hideDetails === 'auto' && hasMessages;
      return (0,runtime_core_esm_bundler/* createVNode */.Wm)("div", {
        "class": ['v-input', `v-input--${props.direction}`, densityClasses.value, validationClasses.value]
      }, [hasPrepend && (0,runtime_core_esm_bundler/* createVNode */.Wm)("div", {
        "class": "v-input__prepend"
      }, [slots == null ? void 0 : (_slots$prepend = slots.prepend) == null ? void 0 : _slots$prepend.call(slots, slotProps.value), props.prependIcon && (0,runtime_core_esm_bundler/* createVNode */.Wm)(VIcon, {
        "onClick": attrs['onClick:prepend'],
        "icon": props.prependIcon
      }, null)]), slots.default && (0,runtime_core_esm_bundler/* createVNode */.Wm)("div", {
        "class": "v-input__control"
      }, [(_slots$default = slots.default) == null ? void 0 : _slots$default.call(slots, slotProps.value)]), hasAppend && (0,runtime_core_esm_bundler/* createVNode */.Wm)("div", {
        "class": "v-input__append"
      }, [slots == null ? void 0 : (_slots$append = slots.append) == null ? void 0 : _slots$append.call(slots, slotProps.value), props.appendIcon && (0,runtime_core_esm_bundler/* createVNode */.Wm)(VIcon, {
        "onClick": attrs['onClick:append'],
        "icon": props.appendIcon
      }, null)]), hasDetails && (0,runtime_core_esm_bundler/* createVNode */.Wm)("div", {
        "class": "v-input__details"
      }, [(0,runtime_core_esm_bundler/* createVNode */.Wm)(VMessages, {
        "active": hasMessages,
        "messages": errorMessages.value.length > 0 ? errorMessages.value : props.messages
      }, {
        message: slots.message
      }), (_slots$details = slots.details) == null ? void 0 : _slots$details.call(slots, slotProps.value)])]);
    });
    return {
      reset,
      resetValidation,
      validate
    };
  }

});
function filterInputProps(props) {
  return (0,helpers/* pick */.ei)(props, Object.keys(VInput.props));
}
//# sourceMappingURL=VInput.mjs.map
;// CONCATENATED MODULE: ./node_modules/vuetify/lib/components/VField/VField.css
// extracted by mini-css-extract-plugin

;// CONCATENATED MODULE: ./node_modules/vuetify/lib/components/VLabel/VLabel.css
// extracted by mini-css-extract-plugin

;// CONCATENATED MODULE: ./node_modules/vuetify/lib/components/VLabel/VLabel.mjs

// Styles
 // Composables

 // Utilities


const VLabel = (0,defineComponent/* defineComponent */.a)({
  name: 'VLabel',
  props: {
    text: String,
    ...(0,composables_theme/* makeThemeProps */.x$)()
  },

  setup(props, _ref) {
    let {
      slots
    } = _ref;
    return () => {
      var _slots$default;

      return (0,runtime_core_esm_bundler/* createVNode */.Wm)("label", {
        "class": "v-label"
      }, [props.text, (_slots$default = slots.default) == null ? void 0 : _slots$default.call(slots)]);
    };
  }

});
//# sourceMappingURL=VLabel.mjs.map
;// CONCATENATED MODULE: ./node_modules/vuetify/lib/components/VField/VFieldLabel.mjs

// Components
 // Utilities


const VFieldLabel = (0,defineComponent/* defineComponent */.a)({
  name: 'VFieldLabel',
  props: {
    floating: Boolean
  },

  setup(props, _ref) {
    let {
      slots
    } = _ref;
    return () => {
      return (0,runtime_core_esm_bundler/* createVNode */.Wm)(VLabel, {
        "class": ['v-field-label', {
          'v-field-label--floating': props.floating
        }],
        "aria-hidden": props.floating || undefined
      }, slots);
    };
  }

});
//# sourceMappingURL=VFieldLabel.mjs.map
;// CONCATENATED MODULE: ./node_modules/vuetify/lib/components/VProgressLinear/VProgressLinear.css
// extracted by mini-css-extract-plugin

;// CONCATENATED MODULE: ./node_modules/vuetify/lib/composables/intersectionObserver.mjs
// Utilities


function useIntersectionObserver(callback) {
  const intersectionRef = (0,reactivity_esm_bundler/* ref */.iH)();
  const isIntersecting = (0,reactivity_esm_bundler/* ref */.iH)(false);

  if (globals/* SUPPORTS_INTERSECTION */.cu) {
    const observer = new IntersectionObserver(entries => {
      callback == null ? void 0 : callback(entries, observer);
      isIntersecting.value = !!entries.find(entry => entry.isIntersecting);
    });
    (0,runtime_core_esm_bundler/* onBeforeUnmount */.Jd)(() => {
      observer.disconnect();
    });
    (0,runtime_core_esm_bundler/* watch */.YP)(intersectionRef, (newValue, oldValue) => {
      if (oldValue) {
        observer.unobserve(oldValue);
        isIntersecting.value = false;
      }

      if (newValue) observer.observe(newValue);
    }, {
      flush: 'post'
    });
  }

  return {
    intersectionRef,
    isIntersecting
  };
}
//# sourceMappingURL=intersectionObserver.mjs.map
;// CONCATENATED MODULE: ./node_modules/vuetify/lib/components/VProgressLinear/VProgressLinear.mjs

// Styles
 // Composables







 // Utilities



const VProgressLinear = (0,defineComponent/* defineComponent */.a)({
  name: 'VProgressLinear',
  props: {
    active: {
      type: Boolean,
      default: true
    },
    bgColor: String,
    bgOpacity: [Number, String],
    bufferValue: {
      type: [Number, String],
      default: 0
    },
    clickable: Boolean,
    color: String,
    height: {
      type: [Number, String],
      default: 4
    },
    indeterminate: Boolean,
    max: {
      type: [Number, String],
      default: 100
    },
    modelValue: {
      type: [Number, String],
      default: 0
    },
    reverse: Boolean,
    stream: Boolean,
    striped: Boolean,
    roundedBar: Boolean,
    ...makeRoundedProps(),
    ...makeTagProps(),
    ...(0,composables_theme/* makeThemeProps */.x$)()
  },
  emits: {
    'update:modelValue': value => true
  },

  setup(props, _ref) {
    let {
      slots
    } = _ref;
    const progress = useProxiedModel(props, 'modelValue');
    const {
      isRtl
    } = (0,rtl/* useRtl */.Vw)();
    const {
      themeClasses
    } = (0,composables_theme/* provideTheme */.ER)(props);
    const {
      textColorClasses,
      textColorStyles
    } = useTextColor(props, 'color');
    const {
      backgroundColorClasses,
      backgroundColorStyles
    } = useBackgroundColor((0,runtime_core_esm_bundler/* computed */.Fl)(() => props.bgColor || props.color));
    const {
      backgroundColorClasses: barColorClasses,
      backgroundColorStyles: barColorStyles
    } = useBackgroundColor(props, 'color');
    const {
      roundedClasses
    } = useRounded(props);
    const {
      intersectionRef,
      isIntersecting
    } = useIntersectionObserver();
    const max = (0,runtime_core_esm_bundler/* computed */.Fl)(() => parseInt(props.max, 10));
    const height = (0,runtime_core_esm_bundler/* computed */.Fl)(() => parseInt(props.height, 10));
    const normalizedBuffer = (0,runtime_core_esm_bundler/* computed */.Fl)(() => parseFloat(props.bufferValue) / max.value * 100);
    const normalizedValue = (0,runtime_core_esm_bundler/* computed */.Fl)(() => parseFloat(progress.value) / max.value * 100);
    const isReversed = (0,runtime_core_esm_bundler/* computed */.Fl)(() => isRtl.value !== props.reverse);
    const transition = (0,runtime_core_esm_bundler/* computed */.Fl)(() => props.indeterminate ? 'fade-transition' : 'slide-x-transition');
    const opacity = (0,runtime_core_esm_bundler/* computed */.Fl)(() => {
      return props.bgOpacity == null ? props.bgOpacity : parseFloat(props.bgOpacity);
    });

    function handleClick(e) {
      if (!intersectionRef.value) return;
      const {
        left,
        right,
        width
      } = intersectionRef.value.getBoundingClientRect();
      const value = isReversed.value ? width - e.clientX + (right - width) : e.clientX - left;
      progress.value = Math.round(value / width * max.value);
    }

    return () => (0,runtime_core_esm_bundler/* createVNode */.Wm)(props.tag, {
      "ref": intersectionRef,
      "class": ['v-progress-linear', {
        'v-progress-linear--active': props.active && isIntersecting.value,
        'v-progress-linear--reverse': isReversed.value,
        'v-progress-linear--rounded': props.rounded,
        'v-progress-linear--rounded-bar': props.roundedBar,
        'v-progress-linear--striped': props.striped
      }, roundedClasses.value, themeClasses.value],
      "style": {
        height: props.active ? (0,helpers/* convertToUnit */.kb)(height.value) : 0,
        '--v-progress-linear-height': (0,helpers/* convertToUnit */.kb)(height.value)
      },
      "role": "progressbar",
      "aria-valuemin": "0",
      "aria-valuemax": props.max,
      "aria-valuenow": props.indeterminate ? undefined : normalizedValue.value,
      "onClick": props.clickable && handleClick
    }, {
      default: () => [props.stream && (0,runtime_core_esm_bundler/* createVNode */.Wm)("div", {
        "class": ['v-progress-linear__stream', textColorClasses.value],
        "style": { ...textColorStyles.value,
          [isReversed.value ? 'left' : 'right']: (0,helpers/* convertToUnit */.kb)(-height.value),
          borderTop: `${(0,helpers/* convertToUnit */.kb)(height.value / 2)} dotted`,
          opacity: opacity.value,
          top: `calc(50% - ${(0,helpers/* convertToUnit */.kb)(height.value / 4)})`,
          width: (0,helpers/* convertToUnit */.kb)(100 - normalizedBuffer.value, '%'),
          '--v-progress-linear-stream-to': (0,helpers/* convertToUnit */.kb)(height.value * (isReversed.value ? 1 : -1))
        }
      }, null), (0,runtime_core_esm_bundler/* createVNode */.Wm)("div", {
        "class": ['v-progress-linear__background', backgroundColorClasses.value],
        "style": [backgroundColorStyles.value, {
          opacity: opacity.value,
          width: (0,helpers/* convertToUnit */.kb)(!props.stream ? 100 : normalizedBuffer.value, '%')
        }]
      }, null), (0,runtime_core_esm_bundler/* createVNode */.Wm)(runtime_dom_esm_bundler/* Transition */.uT, {
        "name": transition.value
      }, {
        default: () => [!props.indeterminate ? (0,runtime_core_esm_bundler/* createVNode */.Wm)("div", {
          "class": ['v-progress-linear__determinate', barColorClasses.value],
          "style": [barColorStyles.value, {
            width: (0,helpers/* convertToUnit */.kb)(normalizedValue.value, '%')
          }]
        }, null) : (0,runtime_core_esm_bundler/* createVNode */.Wm)("div", {
          "class": "v-progress-linear__indeterminate"
        }, [['long', 'short'].map(bar => (0,runtime_core_esm_bundler/* createVNode */.Wm)("div", {
          "key": bar,
          "class": ['v-progress-linear__indeterminate', bar, barColorClasses.value],
          "style": barColorStyles.value
        }, null))])]
      }), slots.default && (0,runtime_core_esm_bundler/* createVNode */.Wm)("div", {
        "class": "v-progress-linear__content"
      }, [slots.default({
        value: normalizedValue.value,
        buffer: normalizedBuffer.value
      })])]
    });
  }

});
//# sourceMappingURL=VProgressLinear.mjs.map
;// CONCATENATED MODULE: ./node_modules/vuetify/lib/composables/loader.mjs

// Components
 // Utilities


 // Types

// Composables
const makeLoaderProps = (0,propsFactory/* propsFactory */.U)({
  loading: Boolean
}, 'loader');
function useLoader(props) {
  let name = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : (0,util_getCurrentInstance/* getCurrentInstanceName */.B)();
  const loaderClasses = (0,runtime_core_esm_bundler/* computed */.Fl)(() => ({
    [`${name}--loading`]: props.loading
  }));
  return {
    loaderClasses
  };
}
function LoaderSlot(props, _ref) {
  var _slots$default;

  let {
    slots
  } = _ref;
  return (0,runtime_core_esm_bundler/* createVNode */.Wm)("div", {
    "class": `${props.name}__loader`
  }, [((_slots$default = slots.default) == null ? void 0 : _slots$default.call(slots, {
    color: props.color,
    isActive: props.active
  })) || (0,runtime_core_esm_bundler/* createVNode */.Wm)(VProgressLinear, {
    "active": props.active,
    "color": props.color,
    "height": "2",
    "indeterminate": true
  }, null)]);
}
//# sourceMappingURL=loader.mjs.map
;// CONCATENATED MODULE: ./node_modules/vuetify/lib/composables/focus.mjs
// Components
 // Utilities


 // Types

// Composables
const makeFocusProps = (0,propsFactory/* propsFactory */.U)({
  focused: Boolean
}, 'focus');
function useFocus(props) {
  let name = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : (0,util_getCurrentInstance/* getCurrentInstanceName */.B)();
  const isFocused = useProxiedModel(props, 'focused');
  const focusClasses = (0,runtime_core_esm_bundler/* computed */.Fl)(() => {
    return {
      [`${name}--focused`]: isFocused.value
    };
  });

  function focus() {
    isFocused.value = true;
  }

  function blur() {
    isFocused.value = false;
  }

  return {
    focusClasses,
    isFocused,
    focus,
    blur
  };
}
//# sourceMappingURL=focus.mjs.map
;// CONCATENATED MODULE: ./node_modules/vuetify/lib/components/VField/VField.mjs

// Styles
 // Components



 // Composables




 // Utilities


 // Types

const VField_allowedVariants = ['underlined', 'outlined', 'filled', 'contained', 'plain'];
const makeVFieldProps = (0,propsFactory/* propsFactory */.U)({
  appendInnerIcon: String,
  bgColor: String,
  clearable: Boolean,
  clearIcon: {
    type: String,
    default: '$clear'
  },
  active: Boolean,
  color: String,
  dirty: Boolean,
  disabled: Boolean,
  error: Boolean,
  label: String,
  persistentClear: Boolean,
  prependInnerIcon: String,
  reverse: Boolean,
  singleLine: Boolean,
  variant: {
    type: String,
    default: 'filled',
    validator: v => VField_allowedVariants.includes(v)
  },
  ...(0,composables_theme/* makeThemeProps */.x$)(),
  ...makeLoaderProps()
}, 'v-field');
const VField = (0,defineComponent/* genericComponent */.e)()({
  name: 'VField',
  inheritAttrs: false,
  props: {
    id: String,
    ...makeFocusProps(),
    ...makeVFieldProps()
  },
  emits: {
    'click:clear': e => true,
    'click:control': e => true,
    'update:focused': focused => true,
    'update:modelValue': val => true
  },

  setup(props, _ref) {
    let {
      attrs,
      emit,
      slots
    } = _ref;
    const {
      themeClasses
    } = (0,composables_theme/* provideTheme */.ER)(props);
    const {
      loaderClasses
    } = useLoader(props);
    const {
      focusClasses,
      isFocused,
      focus,
      blur
    } = useFocus(props);
    const isActive = (0,runtime_core_esm_bundler/* computed */.Fl)(() => props.dirty || props.active);
    const hasLabel = (0,runtime_core_esm_bundler/* computed */.Fl)(() => !props.singleLine && !!(props.label || slots.label));
    const uid = (0,helpers/* getUid */.sq)();
    const id = (0,runtime_core_esm_bundler/* computed */.Fl)(() => props.id || `input-${uid}`);
    const labelRef = (0,reactivity_esm_bundler/* ref */.iH)();
    const floatingLabelRef = (0,reactivity_esm_bundler/* ref */.iH)();
    const controlRef = (0,reactivity_esm_bundler/* ref */.iH)();
    const {
      backgroundColorClasses,
      backgroundColorStyles
    } = useBackgroundColor((0,reactivity_esm_bundler/* toRef */.Vh)(props, 'bgColor'));
    const {
      textColorClasses,
      textColorStyles
    } = useTextColor((0,runtime_core_esm_bundler/* computed */.Fl)(() => {
      return isActive.value && isFocused.value && !props.error && !props.disabled ? props.color : undefined;
    }));
    (0,runtime_core_esm_bundler/* watch */.YP)(isActive, val => {
      if (hasLabel.value) {
        const el = labelRef.value.$el;
        const targetEl = floatingLabelRef.value.$el;
        const rect = nullifyTransforms(el);
        const targetRect = targetEl.getBoundingClientRect();
        const x = targetRect.x - rect.x;
        const y = targetRect.y - rect.y - (rect.height / 2 - targetRect.height / 2);
        const targetWidth = targetRect.width / 0.75;
        const width = Math.abs(targetWidth - rect.width) > 1 ? {
          maxWidth: (0,helpers/* convertToUnit */.kb)(targetWidth)
        } : undefined;
        const duration = parseFloat(getComputedStyle(el).transitionDuration) * 1000;
        const scale = parseFloat(getComputedStyle(targetEl).getPropertyValue('--v-field-label-scale'));
        el.style.visibility = 'visible';
        targetEl.style.visibility = 'hidden';
        el.animate([{
          transform: 'translate(0)'
        }, {
          transform: `translate(${x}px, ${y}px) scale(${scale})`,
          ...width
        }], {
          duration,
          easing: standardEasing,
          direction: val ? 'normal' : 'reverse'
        }).finished.then(() => {
          el.style.removeProperty('visibility');
          targetEl.style.removeProperty('visibility');
        });
      }
    }, {
      flush: 'post'
    });
    const slotProps = (0,runtime_core_esm_bundler/* computed */.Fl)(() => ({
      isActive,
      isFocused,
      controlRef,
      blur,
      focus
    }));

    function onClick(e) {
      if (e.target !== document.activeElement) {
        e.preventDefault();
      }

      emit('click:control', e);
    }

    useRender(() => {
      var _slots$prependInner, _slots$default, _slots$appendInner;

      const isOutlined = props.variant === 'outlined';
      const hasPrepend = slots.prependInner || props.prependInnerIcon;
      const hasClear = !!(props.clearable || slots.clear);
      const hasAppend = !!(slots.appendInner || props.appendInnerIcon || hasClear);
      const label = slots.label ? slots.label({
        label: props.label,
        props: {
          for: id.value
        }
      }) : props.label;
      return (0,runtime_core_esm_bundler/* createVNode */.Wm)("div", (0,runtime_core_esm_bundler/* mergeProps */.dG)({
        "class": ['v-field', {
          'v-field--active': isActive.value,
          'v-field--appended': hasAppend,
          'v-field--disabled': props.disabled,
          'v-field--dirty': props.dirty,
          'v-field--error': props.error,
          'v-field--has-background': !!props.bgColor,
          'v-field--persistent-clear': props.persistentClear,
          'v-field--prepended': hasPrepend,
          'v-field--reverse': props.reverse,
          'v-field--single-line': props.singleLine,
          'v-field--has-label': !!label,
          [`v-field--variant-${props.variant}`]: true
        }, themeClasses.value, backgroundColorClasses.value, focusClasses.value, loaderClasses.value],
        "style": [backgroundColorStyles.value, textColorStyles.value],
        "onClick": onClick
      }, attrs), [(0,runtime_core_esm_bundler/* createVNode */.Wm)("div", {
        "class": "v-field__overlay"
      }, null), (0,runtime_core_esm_bundler/* createVNode */.Wm)(LoaderSlot, {
        "name": "v-field",
        "active": props.loading,
        "color": props.error ? 'error' : props.color
      }, {
        default: slots.loader
      }), hasPrepend && (0,runtime_core_esm_bundler/* createVNode */.Wm)("div", {
        "class": "v-field__prepend-inner"
      }, [props.prependInnerIcon && (0,runtime_core_esm_bundler/* createVNode */.Wm)(VIcon, {
        "onClick": attrs['onClick:prependInner'],
        "icon": props.prependInnerIcon
      }, null), slots == null ? void 0 : (_slots$prependInner = slots.prependInner) == null ? void 0 : _slots$prependInner.call(slots, slotProps.value)]), (0,runtime_core_esm_bundler/* createVNode */.Wm)("div", {
        "class": "v-field__field"
      }, [['contained', 'filled'].includes(props.variant) && hasLabel.value && (0,runtime_core_esm_bundler/* createVNode */.Wm)(VFieldLabel, {
        "ref": floatingLabelRef,
        "class": [textColorClasses.value],
        "floating": true
      }, {
        default: () => [label]
      }), (0,runtime_core_esm_bundler/* createVNode */.Wm)(VFieldLabel, {
        "ref": labelRef,
        "for": id.value
      }, {
        default: () => [label]
      }), (_slots$default = slots.default) == null ? void 0 : _slots$default.call(slots, { ...slotProps.value,
        props: {
          id: id.value,
          class: 'v-field__input'
        },
        focus,
        blur
      })]), hasClear && (0,runtime_core_esm_bundler/* createVNode */.Wm)(VExpandXTransition, null, {
        default: () => [(0,runtime_core_esm_bundler/* withDirectives */.wy)((0,runtime_core_esm_bundler/* createVNode */.Wm)("div", {
          "class": "v-field__clearable"
        }, [slots.clear ? slots.clear() : (0,runtime_core_esm_bundler/* createVNode */.Wm)(VIcon, {
          "onClick": e => emit('click:clear', e),
          "icon": props.clearIcon
        }, null)]), [[runtime_dom_esm_bundler/* vShow */.F8, props.dirty]])]
      }), hasAppend && (0,runtime_core_esm_bundler/* createVNode */.Wm)("div", {
        "class": "v-field__append-inner"
      }, [slots == null ? void 0 : (_slots$appendInner = slots.appendInner) == null ? void 0 : _slots$appendInner.call(slots, slotProps.value), props.appendInnerIcon && (0,runtime_core_esm_bundler/* createVNode */.Wm)(VIcon, {
        "onClick": attrs['onClick:appendInner'],
        "icon": props.appendInnerIcon
      }, null)]), (0,runtime_core_esm_bundler/* createVNode */.Wm)("div", {
        "class": ['v-field__outline', textColorClasses.value]
      }, [isOutlined && (0,runtime_core_esm_bundler/* createVNode */.Wm)(runtime_core_esm_bundler/* Fragment */.HY, null, [(0,runtime_core_esm_bundler/* createVNode */.Wm)("div", {
        "class": "v-field__outline__start"
      }, null), hasLabel.value && (0,runtime_core_esm_bundler/* createVNode */.Wm)("div", {
        "class": "v-field__outline__notch"
      }, [(0,runtime_core_esm_bundler/* createVNode */.Wm)(VFieldLabel, {
        "ref": floatingLabelRef,
        "floating": true
      }, {
        default: () => [label]
      })]), (0,runtime_core_esm_bundler/* createVNode */.Wm)("div", {
        "class": "v-field__outline__end"
      }, null)]), ['plain', 'underlined'].includes(props.variant) && hasLabel.value && (0,runtime_core_esm_bundler/* createVNode */.Wm)(VFieldLabel, {
        "ref": floatingLabelRef,
        "floating": true
      }, {
        default: () => [label]
      })])]);
    });
    return {
      controlRef
    };
  }

});
// TODO: this is kinda slow, might be better to implicitly inherit props instead
function filterFieldProps(attrs) {
  return (0,helpers/* pick */.ei)(attrs, Object.keys(VField.props));
}
//# sourceMappingURL=VField.mjs.map
;// CONCATENATED MODULE: ./node_modules/vuetify/lib/components/VCounter/VCounter.css
// extracted by mini-css-extract-plugin

;// CONCATENATED MODULE: ./node_modules/vuetify/lib/components/VCounter/VCounter.mjs

// Styles
 // Components

 // Utilities




const VCounter = (0,defineComponent/* defineComponent */.a)({
  name: 'VCounter',
  functional: true,
  props: {
    active: Boolean,
    max: [Number, String],
    value: {
      type: [Number, String],
      default: 0
    },
    ...makeTransitionProps({
      transition: {
        component: VSlideYTransition
      }
    })
  },

  setup(props, _ref) {
    let {
      slots
    } = _ref;
    const counter = (0,runtime_core_esm_bundler/* computed */.Fl)(() => {
      return props.max ? `${props.value} / ${props.max}` : String(props.value);
    });
    return () => {
      return (0,runtime_core_esm_bundler/* createVNode */.Wm)(MaybeTransition, {
        "transition": props.transition
      }, {
        default: () => [(0,runtime_core_esm_bundler/* withDirectives */.wy)((0,runtime_core_esm_bundler/* createVNode */.Wm)("div", {
          "class": "v-counter"
        }, [slots.default ? slots.default({
          counter: counter.value,
          max: props.max,
          value: props.value
        }) : counter.value]), [[runtime_dom_esm_bundler/* vShow */.F8, props.active]])]
      });
    };
  }

});
//# sourceMappingURL=VCounter.mjs.map
;// CONCATENATED MODULE: ./node_modules/vuetify/lib/components/VTextField/VTextField.mjs

// Styles
 // Components



 // Composables


 // Directives

 // Utilities


 // Types

const activeTypes = ['color', 'file', 'time', 'date', 'datetime-local', 'week', 'month'];
const VTextField = (0,defineComponent/* genericComponent */.e)()({
  name: 'VTextField',
  directives: {
    Intersect: intersect/* default */.Z
  },
  inheritAttrs: false,
  props: {
    autofocus: Boolean,
    counter: [Boolean, Number, String],
    counterValue: Function,
    hint: String,
    persistentHint: Boolean,
    prefix: String,
    placeholder: String,
    persistentPlaceholder: Boolean,
    persistentCounter: Boolean,
    suffix: String,
    type: {
      type: String,
      default: 'text'
    },
    ...makeVInputProps(),
    ...makeVFieldProps()
  },
  emits: {
    'click:clear': e => true,
    'click:control': e => true,
    'click:input': e => true,
    'update:modelValue': val => true
  },

  setup(props, _ref) {
    let {
      attrs,
      emit,
      slots
    } = _ref;
    const model = useProxiedModel(props, 'modelValue');
    const counterValue = (0,runtime_core_esm_bundler/* computed */.Fl)(() => {
      var _model$value;

      return typeof props.counterValue === 'function' ? props.counterValue(model.value) : ((_model$value = model.value) != null ? _model$value : '').toString().length;
    });
    const max = (0,runtime_core_esm_bundler/* computed */.Fl)(() => {
      if (attrs.maxlength) return attrs.maxlength;
      if (!props.counter || typeof props.counter !== 'number' && typeof props.counter !== 'string') return undefined;
      return props.counter;
    });

    function onIntersect(isIntersecting, entries) {
      var _entries$0$target, _entries$0$target$foc;

      if (!props.autofocus || !isIntersecting) return;
      (_entries$0$target = entries[0].target) == null ? void 0 : (_entries$0$target$foc = _entries$0$target.focus) == null ? void 0 : _entries$0$target$foc.call(_entries$0$target);
    }

    const vInputRef = (0,reactivity_esm_bundler/* ref */.iH)();
    const vFieldRef = (0,reactivity_esm_bundler/* ref */.iH)();
    const isFocused = (0,reactivity_esm_bundler/* ref */.iH)(false);
    const inputRef = (0,reactivity_esm_bundler/* ref */.iH)();
    const isActive = (0,runtime_core_esm_bundler/* computed */.Fl)(() => activeTypes.includes(props.type) || props.persistentPlaceholder || isFocused.value);
    const messages = (0,runtime_core_esm_bundler/* computed */.Fl)(() => {
      return props.messages.length ? props.messages : isFocused.value || props.persistentHint ? props.hint : '';
    });

    function onFocus() {
      if (inputRef.value !== document.activeElement) {
        var _inputRef$value;

        (_inputRef$value = inputRef.value) == null ? void 0 : _inputRef$value.focus();
      }

      if (!isFocused.value) isFocused.value = true;
    }

    function onControlClick(e) {
      onFocus();
      emit('click:control', e);
    }

    function onClear(e) {
      e.stopPropagation();
      onFocus();
      (0,runtime_core_esm_bundler/* nextTick */.Y3)(() => {
        model.value = '';
        emit('click:clear', e);
      });
    }

    useRender(() => {
      const hasCounter = !!(slots.counter || props.counter || props.counterValue);
      const [rootAttrs, inputAttrs] = (0,helpers/* filterInputAttrs */.An)(attrs);
      const [{
        modelValue: _,
        ...inputProps
      }] = filterInputProps(props);
      const [fieldProps] = filterFieldProps(props);
      return (0,runtime_core_esm_bundler/* createVNode */.Wm)(VInput, (0,runtime_core_esm_bundler/* mergeProps */.dG)({
        "ref": vInputRef,
        "modelValue": model.value,
        "onUpdate:modelValue": $event => model.value = $event,
        "class": ['v-text-field', {
          'v-text-field--prefixed': props.prefix,
          'v-text-field--suffixed': props.suffix,
          'v-text-field--flush-details': ['plain', 'underlined'].includes(props.variant)
        }],
        "onClick:prepend": attrs['onClick:prepend'],
        "onClick:append": attrs['onClick:append']
      }, rootAttrs, inputProps, {
        "messages": messages.value
      }), { ...slots,
        default: _ref2 => {
          let {
            isDisabled,
            isDirty,
            isReadonly,
            isValid
          } = _ref2;
          return (0,runtime_core_esm_bundler/* createVNode */.Wm)(VField, (0,runtime_core_esm_bundler/* mergeProps */.dG)({
            "ref": vFieldRef,
            "onMousedown": e => {
              if (e.target === inputRef.value) return;
              e.preventDefault();
            },
            "onClick:control": onControlClick,
            "onClick:clear": onClear,
            "onClick:prependInner": attrs['onClick:prependInner'],
            "onClick:appendInner": attrs['onClick:prependInner'],
            "role": "textbox"
          }, fieldProps, {
            "active": isActive.value || isDirty.value,
            "dirty": isDirty.value || props.dirty,
            "focused": isFocused.value,
            "error": isValid.value === false
          }), { ...slots,
            default: _ref3 => {
              var _slots$default;

              let {
                props: {
                  class: fieldClass,
                  ...slotProps
                }
              } = _ref3;
              return (0,runtime_core_esm_bundler/* createVNode */.Wm)(runtime_core_esm_bundler/* Fragment */.HY, null, [props.prefix && (0,runtime_core_esm_bundler/* createVNode */.Wm)("span", {
                "class": "v-text-field__prefix"
              }, [props.prefix]), (0,runtime_core_esm_bundler/* createVNode */.Wm)("div", {
                "class": fieldClass,
                "onClick": e => emit('click:input', e)
              }, [(_slots$default = slots.default) == null ? void 0 : _slots$default.call(slots), (0,runtime_core_esm_bundler/* withDirectives */.wy)((0,runtime_core_esm_bundler/* createVNode */.Wm)("input", (0,runtime_core_esm_bundler/* mergeProps */.dG)({
                "ref": inputRef,
                "onUpdate:modelValue": $event => model.value = $event,
                "autofocus": props.autofocus,
                "readonly": isReadonly.value,
                "disabled": isDisabled.value,
                "name": props.name,
                "placeholder": props.placeholder,
                "size": 1,
                "type": props.type,
                "onFocus": onFocus,
                "onBlur": () => isFocused.value = false
              }, slotProps, inputAttrs), null), [[runtime_dom_esm_bundler/* vModelDynamic */.YZ, model.value], [(0,runtime_core_esm_bundler/* resolveDirective */.Q2)("intersect"), {
                handler: onIntersect
              }, null, {
                once: true
              }]])]), props.suffix && (0,runtime_core_esm_bundler/* createVNode */.Wm)("span", {
                "class": "v-text-field__suffix"
              }, [props.suffix])]);
            }
          });
        },
        details: hasCounter ? () => (0,runtime_core_esm_bundler/* createVNode */.Wm)(runtime_core_esm_bundler/* Fragment */.HY, null, [(0,runtime_core_esm_bundler/* createVNode */.Wm)("span", null, null), (0,runtime_core_esm_bundler/* createVNode */.Wm)(VCounter, {
          "active": props.persistentCounter || isFocused.value,
          "value": counterValue.value,
          "max": max.value
        }, slots.counter)]) : undefined
      });
    });
    return useForwardRef({}, vInputRef, vFieldRef, inputRef);
  }

});
//# sourceMappingURL=VTextField.mjs.map
;// CONCATENATED MODULE: ./node_modules/vuetify/lib/composables/items.mjs
// Utilities

 // Types

// Composables
const makeItemsProps = (0,propsFactory/* propsFactory */.U)({
  items: {
    type: Array,
    default: () => []
  },
  itemTitle: {
    type: [String, Array, Function],
    default: 'title'
  },
  itemValue: {
    type: [String, Array, Function],
    default: 'value'
  },
  itemChildren: {
    type: String,
    default: 'children'
  },
  itemProps: {
    type: Function,
    default: item => ({})
  }
}, 'item');
function transformItem(props, item) {
  var _props$itemProps;

  const title = (0,helpers/* getPropertyFromItem */.qF)(item, props.itemTitle, item);
  const value = (0,helpers/* getPropertyFromItem */.qF)(item, props.itemValue, title);
  const children = (0,helpers/* getObjectValueByPath */.vO)(item, props.itemChildren);
  return {
    title,
    value,
    children: Array.isArray(children) ? transformItems(props, children) : undefined,
    ...((_props$itemProps = props.itemProps) == null ? void 0 : _props$itemProps.call(props, item))
  };
}
function transformItems(props, items) {
  const array = [];

  for (const item of items) {
    array.push(transformItem(props, item));
  }

  return array;
}
function useItems(props) {
  const items = (0,runtime_core_esm_bundler/* computed */.Fl)(() => transformItems(props, props.items));
  return {
    items
  };
}
//# sourceMappingURL=items.mjs.map
// EXTERNAL MODULE: ./node_modules/vuetify/lib/composables/locale.mjs + 1 modules
var locale = __webpack_require__(458);
;// CONCATENATED MODULE: ./node_modules/vuetify/lib/components/VSelect/VSelect.mjs

// Styles
 // Components





 // Composables





 // Utility


 // Types

const makeSelectProps = (0,propsFactory/* propsFactory */.U)({
  chips: Boolean,
  closableChips: Boolean,
  eager: Boolean,
  hideNoData: Boolean,
  hideSelected: Boolean,
  menuIcon: {
    type: String,
    default: '$dropdown'
  },
  modelValue: {
    type: [Number, String, Array],
    default: () => []
  },
  multiple: Boolean,
  noDataText: {
    type: String,
    default: '$vuetify.noDataText'
  },
  openOnClear: Boolean,
  ...makeItemsProps()
}, 'select');
const VSelect = (0,defineComponent/* genericComponent */.e)()({
  name: 'VSelect',
  props: { ...makeSelectProps(),
    ...makeTransitionProps({
      transition: 'scale-transition'
    })
  },
  emits: {
    'update:modelValue': val => true
  },

  setup(props, _ref) {
    let {
      slots
    } = _ref;
    const {
      t
    } = (0,locale/* useLocale */.bU)();
    const vTextFieldRef = (0,reactivity_esm_bundler/* ref */.iH)();
    const activator = (0,reactivity_esm_bundler/* ref */.iH)();
    const menu = (0,reactivity_esm_bundler/* ref */.iH)(false);
    const {
      items
    } = useItems(props);
    const model = useProxiedModel(props, 'modelValue', [], v => (0,helpers/* wrapInArray */.FT)(v), v => props.multiple ? v : v[0]);
    const selections = (0,runtime_core_esm_bundler/* computed */.Fl)(() => items.value.filter(item => model.value.includes(item.value)));
    const selected = (0,runtime_core_esm_bundler/* computed */.Fl)(() => selections.value.map(selection => selection.value));

    function onClear(e) {
      model.value = [];

      if (props.openOnClear) {
        menu.value = true;
      }
    }

    function onClickControl() {
      if (props.hideNoData && !items.value.length) return;
      menu.value = true;
    }

    function onKeydown(e) {
      if (['Enter', 'ArrowDown', ' '].includes(e.key)) {
        menu.value = true;
      }

      if (['Escape', 'Tab'].includes(e.key)) {
        menu.value = false;
      }
    }

    function select(item) {
      if (props.multiple) {
        const index = selected.value.findIndex(selection => selection === item.value);

        if (index === -1) {
          model.value = [...model.value, item.value];
        } else {
          const value = [...model.value];
          value.splice(index, 1);
          model.value = value;
        }
      } else {
        model.value = [item.value];
        menu.value = false;
      }
    }

    (0,runtime_core_esm_bundler/* watch */.YP)(() => vTextFieldRef.value, val => {
      activator.value = val.$el.querySelector('.v-input__control');
    });
    useRender(() => {
      const hasChips = !!(props.chips || slots.chip);
      return (0,runtime_core_esm_bundler/* createVNode */.Wm)(VTextField, {
        "ref": vTextFieldRef,
        "class": ['v-select', {
          'v-select--active-menu': menu.value,
          'v-select--chips': !!props.chips,
          [`v-select--${props.multiple ? 'multiple' : 'single'}`]: true
        }],
        "appendInnerIcon": props.menuIcon,
        "readonly": true,
        "onClick:clear": onClear,
        "onClick:input": onClickControl,
        "onClick:control": onClickControl,
        "onBlur": () => menu.value = false,
        "modelValue": model.value.join(', '),
        "onKeydown": onKeydown
      }, { ...slots,
        default: () => {
          var _slots$noData, _slots$noData2;

          return (0,runtime_core_esm_bundler/* createVNode */.Wm)(runtime_core_esm_bundler/* Fragment */.HY, null, [activator.value && (0,runtime_core_esm_bundler/* createVNode */.Wm)(VMenu, {
            "modelValue": menu.value,
            "onUpdate:modelValue": $event => menu.value = $event,
            "activator": activator.value,
            "contentClass": "v-select__content",
            "eager": props.eager,
            "openOnClick": false,
            "transition": props.transition
          }, {
            default: () => [(0,runtime_core_esm_bundler/* createVNode */.Wm)(VList, {
              "selected": selected.value,
              "selectStrategy": props.multiple ? 'independent' : 'single-independent'
            }, {
              default: () => [!items.value.length && !props.hideNoData && ((_slots$noData = (_slots$noData2 = slots['no-data']) == null ? void 0 : _slots$noData2.call(slots)) != null ? _slots$noData : (0,runtime_core_esm_bundler/* createVNode */.Wm)(VListItem, {
                "title": t(props.noDataText)
              }, null)), items.value.map(item => (0,runtime_core_esm_bundler/* createVNode */.Wm)(VListItem, (0,runtime_core_esm_bundler/* mergeProps */.dG)(item, {
                "onMousedown": e => e.preventDefault(),
                "onClick": () => select(item)
              }), null))]
            })]
          }), selections.value.map((selection, index) => {
            function onChipClose(e) {
              e.stopPropagation();
              e.preventDefault();
              select(selection);
            }

            const slotProps = {
              'onClick:close': onChipClose,
              modelValue: true
            };
            return (0,runtime_core_esm_bundler/* createVNode */.Wm)("div", {
              "class": "v-select__selection"
            }, [hasChips && (0,runtime_core_esm_bundler/* createVNode */.Wm)(VDefaultsProvider, {
              "defaults": {
                VChip: {
                  closable: props.closableChips,
                  size: 'small',
                  text: selection.title
                }
              }
            }, {
              default: () => [slots.chip ? slots.chip({
                props: slotProps,
                selection
              }) : (0,runtime_core_esm_bundler/* createVNode */.Wm)(VChip, slotProps, null)]
            }), !hasChips && (slots.selection ? slots.selection({
              selection
            }) : (0,runtime_core_esm_bundler/* createVNode */.Wm)("span", {
              "class": "v-select__selection-text"
            }, [selection.title, props.multiple && index < selections.value.length - 1 && (0,runtime_core_esm_bundler/* createVNode */.Wm)("span", {
              "class": "v-select__selection-comma"
            }, [(0,runtime_core_esm_bundler/* createTextVNode */.Uk)(",")])]))]);
          })]);
        }
      });
    });
    return useForwardRef({}, vTextFieldRef);
  }

});
//# sourceMappingURL=VSelect.mjs.map
;// CONCATENATED MODULE: ./node_modules/vuetify/lib/composables/filter.mjs
/* eslint-disable max-statements */

/* eslint-disable no-labels */
// Utilities

 // Types

// Composables
const defaultFilter = (value, query, item) => {
  if (value == null || query == null) return -1;
  return value.toString().toLocaleLowerCase().indexOf(query.toString().toLocaleLowerCase());
};
const makeFilterProps = (0,propsFactory/* propsFactory */.U)({
  customFilter: Function,
  customKeyFilter: Object,
  filterKeys: [Array, String],
  filterMode: {
    type: String,
    default: 'intersection'
  },
  noFilter: Boolean
}, 'filter');
function filterItems(items, query, options) {
  var _options$default, _options$customKeyFil;

  const array = []; // always ensure we fall back to a functioning filter

  const filter = (_options$default = options == null ? void 0 : options.default) != null ? _options$default : defaultFilter;
  const keys = options != null && options.filterKeys ? (0,helpers/* wrapInArray */.FT)(options.filterKeys) : false;
  const customFiltersLength = Object.keys((_options$customKeyFil = options == null ? void 0 : options.customKeyFilter) != null ? _options$customKeyFil : {}).length;
  if (!(items != null && items.length)) return array;

  loop: for (const item of items) {
    const customMatches = {};
    const defaultMatches = {};
    let match = -1;

    if (query && typeof item === 'object' && !(options != null && options.noFilter)) {
      const filterKeys = keys || Object.keys(item);

      for (const key of filterKeys) {
        var _options$customKeyFil2;

        const value = (0,helpers/* getPropertyFromItem */.qF)(item, key, item);
        const keyFilter = options == null ? void 0 : (_options$customKeyFil2 = options.customKeyFilter) == null ? void 0 : _options$customKeyFil2[key];
        match = keyFilter ? keyFilter(value, query, item) : filter(value, query, item);

        if (match !== -1 && match !== false) {
          if (keyFilter) customMatches[key] = match;else defaultMatches[key] = match;
        } else if ((options == null ? void 0 : options.filterMode) === 'every') {
          continue loop;
        }
      }

      const defaultMatchesLength = Object.keys(defaultMatches).length;
      const customMatchesLength = Object.keys(customMatches).length;
      if (!defaultMatchesLength && !customMatchesLength) continue;
      if ((options == null ? void 0 : options.filterMode) === 'union' && customMatchesLength !== customFiltersLength && !defaultMatchesLength) continue;
      if ((options == null ? void 0 : options.filterMode) === 'intersection' && (customMatchesLength !== customFiltersLength || !defaultMatchesLength)) continue;
    }

    array.push({
      item,
      matches: { ...defaultMatches,
        ...customMatches
      }
    });
  }

  return array;
}
function useFilter(props, items, query) {
  const strQuery = (0,runtime_core_esm_bundler/* computed */.Fl)(() => typeof (query == null ? void 0 : query.value) !== 'string' && typeof (query == null ? void 0 : query.value) !== 'number' ? '' : String(query.value));
  const filteredItems = (0,runtime_core_esm_bundler/* computed */.Fl)(() => {
    return filterItems((0,reactivity_esm_bundler/* unref */.SU)(items), strQuery.value, {
      customKeyFilter: props.customKeyFilter,
      default: props.customFilter,
      filterKeys: props.filterKeys,
      filterMode: props.filterMode,
      noFilter: props.noFilter
    });
  });
  return {
    filteredItems
  };
}
//# sourceMappingURL=filter.mjs.map
;// CONCATENATED MODULE: ./node_modules/vuetify/lib/components/VAutocomplete/VAutocomplete.mjs

// Styles
 // Components






 // Composables






 // Utility


 // Types

function highlightResult(text, matches, length) {
  if (Array.isArray(matches)) throw new Error('Multiple matches is not implemented');
  return typeof matches === 'number' && ~matches ? (0,runtime_core_esm_bundler/* createVNode */.Wm)(runtime_core_esm_bundler/* Fragment */.HY, null, [(0,runtime_core_esm_bundler/* createVNode */.Wm)("span", {
    "class": "v-autocomplete__unmask"
  }, [text.substr(0, matches)]), (0,runtime_core_esm_bundler/* createVNode */.Wm)("span", {
    "class": "v-autocomplete__mask"
  }, [text.substr(matches, length)]), (0,runtime_core_esm_bundler/* createVNode */.Wm)("span", {
    "class": "v-autocomplete__unmask"
  }, [text.substr(matches + length)])]) : text;
}

const VAutocomplete = (0,defineComponent/* genericComponent */.e)()({
  name: 'VAutocomplete',
  props: {
    // TODO: implement post keyboard support
    // autoSelectFirst: Boolean,
    search: String,
    ...makeFilterProps({
      filterKeys: ['title']
    }),
    ...makeSelectProps(),
    ...makeTransitionProps({
      transition: false
    })
  },
  emits: {
    'click:clear': e => true,
    'update:search': val => true,
    'update:modelValue': val => true
  },

  setup(props, _ref) {
    let {
      slots
    } = _ref;
    const {
      t
    } = (0,locale/* useLocale */.bU)();
    const vTextFieldRef = (0,reactivity_esm_bundler/* ref */.iH)();
    const activator = (0,reactivity_esm_bundler/* ref */.iH)();
    const isFocused = (0,reactivity_esm_bundler/* ref */.iH)(false);
    const isPristine = (0,reactivity_esm_bundler/* ref */.iH)(true);
    const menu = (0,reactivity_esm_bundler/* ref */.iH)(false);
    const {
      items
    } = useItems(props);
    const search = useProxiedModel(props, 'search', '');
    const model = useProxiedModel(props, 'modelValue', [], v => (0,helpers/* wrapInArray */.FT)(v || []), v => props.multiple ? v : v[0]);
    const {
      filteredItems
    } = useFilter(props, items, (0,runtime_core_esm_bundler/* computed */.Fl)(() => isPristine.value ? undefined : search.value));
    const selections = (0,runtime_core_esm_bundler/* computed */.Fl)(() => {
      const array = [];
      let index = 0;

      for (const unwrapped of model.value) {
        const item = transformItem(props, unwrapped);
        const found = array.find(selection => selection.value === item.value);

        if (found == null) {
          array.push({ ...item,
            index
          });
          index++;
        }
      }

      return array;
    });
    const selected = (0,runtime_core_esm_bundler/* computed */.Fl)(() => selections.value.map(selection => selection.value));

    function onClear(e) {
      model.value = [];

      if (props.openOnClear) {
        menu.value = true;
      }

      search.value = '';
    }

    function onClickControl() {
      if (props.hideNoData && !filteredItems.value.length) return;
      menu.value = true;
    }

    function onKeydown(e) {
      if (['Enter', 'ArrowDown'].includes(e.key)) {
        menu.value = true;
      }

      if (['Escape'].includes(e.key)) {
        menu.value = false;
      }

      if (['Enter', 'Escape', 'Tab'].includes(e.key)) {
        isPristine.value = true;
      }
    }

    function onInput(e) {
      search.value = e.target.value;
    }

    function onAfterLeave() {
      if (isFocused.value) isPristine.value = true;
    }

    const isSelecting = (0,reactivity_esm_bundler/* ref */.iH)(false);

    function select(item) {
      if (props.multiple) {
        const index = selected.value.findIndex(selection => selection === item.value);

        if (index === -1) {
          model.value = [...model.value, item.value];
        } else {
          const value = [...model.value];
          value.splice(index, 1);
          model.value = value;
        }
      } else {
        model.value = [item.value];
        isSelecting.value = true;
        search.value = item.title;
        menu.value = false;
        isPristine.value = true;
        (0,runtime_core_esm_bundler/* nextTick */.Y3)(() => isSelecting.value = false);
      }
    }

    (0,runtime_core_esm_bundler/* watch */.YP)(() => vTextFieldRef.value, val => {
      activator.value = val.$el.querySelector('.v-input__control');
    });
    (0,runtime_core_esm_bundler/* watch */.YP)(isFocused, val => {
      if (val) {
        var _model$value;

        isSelecting.value = true;
        search.value = props.multiple ? '' : String((_model$value = model.value) != null ? _model$value : '');
        isPristine.value = true;
        (0,runtime_core_esm_bundler/* nextTick */.Y3)(() => isSelecting.value = false);
      } else {
        menu.value = false;
        search.value = '';
      }
    });
    (0,runtime_core_esm_bundler/* watch */.YP)(search, val => {
      if (!isFocused.value || isSelecting.value) return;
      if (val) menu.value = true;
      isPristine.value = !val;
    });
    useRender(() => {
      const hasChips = !!(props.chips || slots.chip);
      return (0,runtime_core_esm_bundler/* createVNode */.Wm)(VTextField, {
        "ref": vTextFieldRef,
        "modelValue": search.value,
        "onInput": onInput,
        "class": ['v-autocomplete', {
          'v-autocomplete--active-menu': menu.value,
          'v-autocomplete--chips': !!props.chips,
          [`v-autocomplete--${props.multiple ? 'multiple' : 'single'}`]: true
        }],
        "appendInnerIcon": props.menuIcon,
        "dirty": selected.value.length > 0,
        "onClick:clear": onClear,
        "onClick:control": onClickControl,
        "onClick:input": onClickControl,
        "onFocus": () => isFocused.value = true,
        "onBlur": () => isFocused.value = false,
        "onKeydown": onKeydown
      }, { ...slots,
        default: () => {
          var _slots$noData, _slots$noData2;

          return (0,runtime_core_esm_bundler/* createVNode */.Wm)(runtime_core_esm_bundler/* Fragment */.HY, null, [activator.value && (0,runtime_core_esm_bundler/* createVNode */.Wm)(VMenu, {
            "modelValue": menu.value,
            "onUpdate:modelValue": $event => menu.value = $event,
            "activator": activator.value,
            "contentClass": "v-autocomplete__content",
            "eager": props.eager,
            "openOnClick": false,
            "transition": props.transition,
            "onAfterLeave": onAfterLeave
          }, {
            default: () => [(0,runtime_core_esm_bundler/* createVNode */.Wm)(VList, {
              "selected": selected.value,
              "selectStrategy": props.multiple ? 'independent' : 'single-independent'
            }, {
              default: () => [!filteredItems.value.length && !props.hideNoData && ((_slots$noData = (_slots$noData2 = slots['no-data']) == null ? void 0 : _slots$noData2.call(slots)) != null ? _slots$noData : (0,runtime_core_esm_bundler/* createVNode */.Wm)(VListItem, {
                "title": t(props.noDataText)
              }, null)), filteredItems.value.map(_ref2 => {
                let {
                  item,
                  matches
                } = _ref2;
                return (0,runtime_core_esm_bundler/* createVNode */.Wm)(VListItem, {
                  "value": item.value,
                  "onMousedown": e => e.preventDefault(),
                  "onClick": () => select(item)
                }, {
                  title: () => {
                    var _search$value$length, _search$value;

                    return isPristine.value ? item.title : highlightResult(item.title, matches.title, (_search$value$length = (_search$value = search.value) == null ? void 0 : _search$value.length) != null ? _search$value$length : 0);
                  }
                });
              })]
            })]
          }), selections.value.map((selection, index) => {
            function onChipClose(e) {
              e.stopPropagation();
              e.preventDefault();
              select(selection);
            }

            const slotProps = {
              'onClick:close': onChipClose,
              modelValue: true
            };
            return (0,runtime_core_esm_bundler/* createVNode */.Wm)("div", {
              "class": "v-autocomplete__selection"
            }, [hasChips && (0,runtime_core_esm_bundler/* createVNode */.Wm)(VDefaultsProvider, {
              "defaults": {
                VChip: {
                  closable: props.closableChips,
                  size: 'small',
                  text: selection.title
                }
              }
            }, {
              default: () => [slots.chip ? slots.chip({
                props: slotProps,
                selection
              }) : (0,runtime_core_esm_bundler/* createVNode */.Wm)(VChip, slotProps, null)]
            }), !hasChips && (slots.selection ? slots.selection({
              selection
            }) : (0,runtime_core_esm_bundler/* createVNode */.Wm)("span", {
              "class": "v-autocomplete__selection-text"
            }, [selection.title, props.multiple && index < selections.value.length - 1 && (0,runtime_core_esm_bundler/* createVNode */.Wm)("span", {
              "class": "v-autocomplete__selection-comma"
            }, [(0,runtime_core_esm_bundler/* createTextVNode */.Uk)(",")])]))]);
          })]);
        }
      });
    });
    return useForwardRef({
      filteredItems
    }, vTextFieldRef);
  }

});
//# sourceMappingURL=VAutocomplete.mjs.map
;// CONCATENATED MODULE: ./node_modules/vuetify/lib/components/VAutocomplete/index.mjs

//# sourceMappingURL=index.mjs.map
;// CONCATENATED MODULE: ./node_modules/vuetify/lib/components/VAvatar/index.mjs

//# sourceMappingURL=index.mjs.map
;// CONCATENATED MODULE: ./node_modules/vuetify/lib/components/VBadge/VBadge.css
// extracted by mini-css-extract-plugin

;// CONCATENATED MODULE: ./node_modules/vuetify/lib/components/VBadge/VBadge.mjs

// Styles
 // Components

 // Composables







 // Utilities



const VBadge = (0,defineComponent/* defineComponent */.a)({
  name: 'VBadge',
  inheritAttrs: false,
  props: {
    bordered: Boolean,
    color: String,
    content: [Number, String],
    dot: Boolean,
    floating: Boolean,
    icon: String,
    inline: Boolean,
    label: {
      type: String,
      default: '$vuetify.badge'
    },
    location: {
      type: String,
      default: 'top-end',
      validator: value => {
        const [vertical, horizontal] = (value != null ? value : '').split('-');
        return ['top', 'bottom'].includes(vertical) && ['start', 'end'].includes(horizontal);
      }
    },
    max: [Number, String],
    modelValue: {
      type: Boolean,
      default: true
    },
    offsetX: [Number, String],
    offsetY: [Number, String],
    textColor: String,
    ...makeRoundedProps(),
    ...makeTagProps(),
    ...(0,composables_theme/* makeThemeProps */.x$)(),
    ...makeTransitionProps({
      transition: 'scale-rotate-transition'
    })
  },

  setup(props, ctx) {
    const {
      backgroundColorClasses,
      backgroundColorStyles
    } = useBackgroundColor((0,reactivity_esm_bundler/* toRef */.Vh)(props, 'color'));
    const {
      isRtl
    } = (0,rtl/* useRtl */.Vw)();
    const {
      roundedClasses
    } = useRounded(props);
    const {
      t
    } = (0,locale/* useLocale */.bU)();
    const {
      textColorClasses,
      textColorStyles
    } = useTextColor((0,reactivity_esm_bundler/* toRef */.Vh)(props, 'textColor'));
    const {
      themeClasses
    } = (0,composables_theme/* useTheme */.Fg)();
    const position = (0,runtime_core_esm_bundler/* computed */.Fl)(() => {
      return props.floating ? props.dot ? 2 : 4 : props.dot ? 8 : 12;
    });

    function calculatePosition(offset) {
      return `calc(100% - ${(0,helpers/* convertToUnit */.kb)(position.value + parseInt(offset != null ? offset : 0, 10))})`;
    }

    const locationStyles = (0,runtime_core_esm_bundler/* computed */.Fl)(() => {
      var _props$location;

      const [vertical, horizontal] = ((_props$location = props.location) != null ? _props$location : '').split('-');
      const styles = {
        bottom: 'auto',
        left: 'auto',
        right: 'auto',
        top: 'auto'
      };

      if (!props.inline) {
        const isRight = isRtl.value && horizontal === 'end' || !isRtl.value && horizontal === 'start';
        styles[isRight ? 'right' : 'left'] = calculatePosition(props.offsetX);
        styles[vertical === 'top' ? 'bottom' : 'top'] = calculatePosition(props.offsetY);
      }

      return styles;
    });
    return () => {
      var _ctx$slots$default, _ctx$slots, _ctx$slots$badge, _ctx$slots2;

      const value = Number(props.content);
      const content = !props.max || isNaN(value) ? props.content : value <= props.max ? value : `${props.max}+`;
      const [badgeAttrs, attrs] = (0,helpers/* pick */.ei)(ctx.attrs, ['aria-atomic', 'aria-label', 'aria-live', 'role', 'title']);
      return (0,runtime_core_esm_bundler/* createVNode */.Wm)(props.tag, (0,runtime_core_esm_bundler/* mergeProps */.dG)({
        "class": ['v-badge', {
          'v-badge--bordered': props.bordered,
          'v-badge--dot': props.dot,
          'v-badge--floating': props.floating,
          'v-badge--inline': props.inline
        }]
      }, attrs), {
        default: () => [(0,runtime_core_esm_bundler/* createVNode */.Wm)("div", {
          "class": "v-badge__wrapper"
        }, [(_ctx$slots$default = (_ctx$slots = ctx.slots).default) == null ? void 0 : _ctx$slots$default.call(_ctx$slots), (0,runtime_core_esm_bundler/* createVNode */.Wm)(MaybeTransition, {
          "transition": props.transition
        }, {
          default: () => [(0,runtime_core_esm_bundler/* withDirectives */.wy)((0,runtime_core_esm_bundler/* createVNode */.Wm)("span", (0,runtime_core_esm_bundler/* mergeProps */.dG)({
            "class": ['v-badge__badge', backgroundColorClasses.value, roundedClasses.value, textColorClasses.value, themeClasses.value],
            "style": [backgroundColorStyles.value, locationStyles.value, textColorStyles.value],
            "aria-atomic": "true",
            "aria-label": t(props.label, value),
            "aria-live": "polite",
            "role": "status"
          }, badgeAttrs), [props.dot ? undefined : ctx.slots.badge ? (_ctx$slots$badge = (_ctx$slots2 = ctx.slots).badge) == null ? void 0 : _ctx$slots$badge.call(_ctx$slots2) : props.icon ? (0,runtime_core_esm_bundler/* createVNode */.Wm)(VIcon, {
            "icon": props.icon
          }, null) : (0,runtime_core_esm_bundler/* createVNode */.Wm)("span", {
            "class": "v-badge__content"
          }, [content])]), [[runtime_dom_esm_bundler/* vShow */.F8, props.modelValue]])]
        })])]
      });
    };
  }

});
//# sourceMappingURL=VBadge.mjs.map
;// CONCATENATED MODULE: ./node_modules/vuetify/lib/components/VBadge/index.mjs

//# sourceMappingURL=index.mjs.map
;// CONCATENATED MODULE: ./node_modules/vuetify/lib/components/VBanner/VBanner.css
// extracted by mini-css-extract-plugin

;// CONCATENATED MODULE: ./node_modules/vuetify/lib/components/VBanner/VBannerActions.mjs

// Composables
 // Utility


const VBannerActions = (0,defineComponent/* defineComponent */.a)({
  name: 'VBannerActions',
  props: {
    color: String,
    density: String
  },

  setup(props, _ref) {
    let {
      slots
    } = _ref;
    (0,composables_defaults/* provideDefaults */.AF)({
      VBtn: {
        color: props.color,
        density: props.density,
        variant: 'text'
      }
    });
    useRender(() => {
      var _slots$default;

      return (0,runtime_core_esm_bundler/* createVNode */.Wm)("div", {
        "class": "v-banner-actions"
      }, [slots == null ? void 0 : (_slots$default = slots.default) == null ? void 0 : _slots$default.call(slots)]);
    });
    return {};
  }

});
//# sourceMappingURL=VBannerActions.mjs.map
;// CONCATENATED MODULE: ./node_modules/vuetify/lib/components/VBanner/VBannerAvatar.mjs

// Components
 // Utilities


const VBannerAvatar = (0,defineComponent/* defineComponent */.a)({
  name: 'VBannerAvatar',
  props: makeVAvatarProps(),

  setup(props, _ref) {
    let {
      slots
    } = _ref;
    return () => (0,runtime_core_esm_bundler/* createVNode */.Wm)(VAvatar, (0,runtime_core_esm_bundler/* mergeProps */.dG)({
      "class": "v-banner-avatar"
    }, props), slots);
  }

});
//# sourceMappingURL=VBannerAvatar.mjs.map
;// CONCATENATED MODULE: ./node_modules/vuetify/lib/components/VBanner/VBannerIcon.mjs

// Components
 // Utilities


const VBannerIcon = (0,defineComponent/* defineComponent */.a)({
  name: 'VBannerIcon',
  props: makeVAvatarProps(),

  setup(props, _ref) {
    let {
      slots
    } = _ref;
    return () => (0,runtime_core_esm_bundler/* createVNode */.Wm)(VAvatar, (0,runtime_core_esm_bundler/* mergeProps */.dG)({
      "class": "v-banner-icon"
    }, props), slots);
  }

});
//# sourceMappingURL=VBannerIcon.mjs.map
;// CONCATENATED MODULE: ./node_modules/vuetify/lib/components/VBanner/VBannerText.mjs

const VBannerText = createSimpleFunctional('v-banner-text');
//# sourceMappingURL=VBannerText.mjs.map
// EXTERNAL MODULE: ./node_modules/vuetify/lib/composables/display.mjs
var display = __webpack_require__(455);
;// CONCATENATED MODULE: ./node_modules/vuetify/lib/components/VBanner/VBanner.mjs

// Styles
 // Components




 // Composables










 // Utilities


 // Types

const VBanner = (0,defineComponent/* defineComponent */.a)({
  name: 'VBanner',
  props: {
    avatar: String,
    color: String,
    icon: String,
    lines: String,
    stacked: Boolean,
    sticky: Boolean,
    text: String,
    ...makeBorderProps(),
    ...makeDensityProps(),
    ...makeDimensionProps(),
    ...makeElevationProps(),
    ...makePositionProps(),
    ...makeRoundedProps(),
    ...makeTagProps(),
    ...(0,composables_theme/* makeThemeProps */.x$)()
  },

  setup(props, _ref) {
    let {
      slots
    } = _ref;
    const {
      borderClasses
    } = useBorder(props);
    const {
      densityClasses
    } = useDensity(props);
    const {
      mobile
    } = (0,display/* useDisplay */.AW)();
    const {
      dimensionStyles
    } = useDimension(props);
    const {
      elevationClasses
    } = useElevation(props);
    const {
      positionClasses,
      positionStyles
    } = usePosition(props);
    const {
      roundedClasses
    } = useRounded(props);
    const {
      themeClasses
    } = (0,composables_theme/* provideTheme */.ER)(props);
    const color = (0,reactivity_esm_bundler/* toRef */.Vh)(props, 'color');
    const density = (0,reactivity_esm_bundler/* toRef */.Vh)(props, 'density');
    (0,composables_defaults/* provideDefaults */.AF)({
      VBannerActions: {
        color,
        density
      },
      VBannerAvatar: {
        density,
        image: (0,reactivity_esm_bundler/* toRef */.Vh)(props, 'avatar')
      },
      VBannerIcon: {
        color,
        density,
        icon: (0,reactivity_esm_bundler/* toRef */.Vh)(props, 'icon')
      }
    });
    useRender(() => {
      var _slots$default;

      const hasText = !!(props.text || slots.text);
      const hasPrepend = !!(slots.prepend || props.avatar || props.icon);
      return (0,runtime_core_esm_bundler/* createVNode */.Wm)(props.tag, {
        "class": ['v-banner', {
          'v-banner--stacked': props.stacked || mobile.value,
          'v-banner--sticky': props.sticky,
          [`v-banner--${props.lines}-line`]: !!props.lines
        }, borderClasses.value, densityClasses.value, elevationClasses.value, positionClasses.value, roundedClasses.value, themeClasses.value],
        "style": [dimensionStyles.value, positionStyles.value],
        "role": "banner"
      }, {
        default: () => [hasPrepend && (0,runtime_core_esm_bundler/* createVNode */.Wm)(runtime_core_esm_bundler/* Fragment */.HY, null, [slots.prepend ? (0,runtime_core_esm_bundler/* createVNode */.Wm)("div", {
          "class": "v-banner__prepend"
        }, [slots.prepend()]) : props.avatar ? (0,runtime_core_esm_bundler/* createVNode */.Wm)(VBannerAvatar, null, null) : props.icon ? (0,runtime_core_esm_bundler/* createVNode */.Wm)(VBannerIcon, null, null) : undefined]), hasText && (0,runtime_core_esm_bundler/* createVNode */.Wm)(VBannerText, null, {
          default: () => [slots.text ? slots.text() : props.text]
        }), (_slots$default = slots.default) == null ? void 0 : _slots$default.call(slots), slots.actions && (0,runtime_core_esm_bundler/* createVNode */.Wm)(VBannerActions, null, {
          default: () => [slots.actions()]
        })]
      });
    });
  }

});
//# sourceMappingURL=VBanner.mjs.map
;// CONCATENATED MODULE: ./node_modules/vuetify/lib/components/VBanner/index.mjs





//# sourceMappingURL=index.mjs.map
;// CONCATENATED MODULE: ./node_modules/vuetify/lib/components/VBottomNavigation/VBottomNavigation.css
// extracted by mini-css-extract-plugin

;// CONCATENATED MODULE: ./node_modules/vuetify/lib/components/VBottomNavigation/VBottomNavigation.mjs

// Styles
 // Composables











 // Utilities


 // Types


const VBottomNavigation = (0,defineComponent/* defineComponent */.a)({
  name: 'VBottomNavigation',
  props: {
    bgColor: String,
    color: String,
    grow: Boolean,
    mode: {
      type: String,
      validator: v => !v || ['horizontal', 'shift'].includes(v)
    },
    height: {
      type: [Number, String],
      default: 56
    },
    ...makeBorderProps(),
    ...makeDensityProps(),
    ...makeElevationProps(),
    ...makeRoundedProps(),
    ...makeLayoutItemProps({
      name: 'bottom-navigation'
    }),
    ...makeTagProps({
      tag: 'header'
    }),
    ...makeGroupProps({
      modelValue: true,
      selectedClass: 'v-btn--selected'
    }),
    ...(0,composables_theme/* makeThemeProps */.x$)()
  },
  emits: {
    'update:modelValue': value => true
  },

  setup(props, _ref) {
    let {
      slots
    } = _ref;
    const {
      themeClasses
    } = (0,composables_theme/* useTheme */.Fg)();
    const {
      borderClasses
    } = useBorder(props);
    const {
      backgroundColorClasses,
      backgroundColorStyles
    } = useBackgroundColor((0,reactivity_esm_bundler/* toRef */.Vh)(props, 'bgColor'));
    const {
      densityClasses
    } = useDensity(props);
    const {
      elevationClasses
    } = useElevation(props);
    const {
      roundedClasses
    } = useRounded(props);
    const height = (0,runtime_core_esm_bundler/* computed */.Fl)(() => Number(props.height) - (props.density === 'comfortable' ? 8 : 0) - (props.density === 'compact' ? 16 : 0));
    const isActive = useProxiedModel(props, 'modelValue', props.modelValue);
    const {
      layoutItemStyles
    } = useLayoutItem({
      id: props.name,
      priority: (0,runtime_core_esm_bundler/* computed */.Fl)(() => parseInt(props.priority, 10)),
      position: (0,runtime_core_esm_bundler/* computed */.Fl)(() => 'bottom'),
      layoutSize: (0,runtime_core_esm_bundler/* computed */.Fl)(() => isActive.value ? height.value : 0),
      elementSize: height,
      active: isActive,
      absolute: (0,reactivity_esm_bundler/* toRef */.Vh)(props, 'absolute')
    });
    useGroup(props, VBtnToggleSymbol);
    (0,composables_defaults/* provideDefaults */.AF)({
      VBtn: {
        color: (0,reactivity_esm_bundler/* toRef */.Vh)(props, 'color'),
        density: (0,reactivity_esm_bundler/* toRef */.Vh)(props, 'density'),
        stacked: (0,runtime_core_esm_bundler/* computed */.Fl)(() => props.mode !== 'horizontal'),
        variant: 'text'
      }
    }, {
      scoped: true
    });
    return () => {
      return (0,runtime_core_esm_bundler/* createVNode */.Wm)(props.tag, {
        "class": ['v-bottom-navigation', {
          'v-bottom-navigation--active': isActive.value,
          'v-bottom-navigation--grow': props.grow,
          'v-bottom-navigation--shift': props.mode === 'shift'
        }, themeClasses.value, backgroundColorClasses.value, borderClasses.value, densityClasses.value, elevationClasses.value, roundedClasses.value],
        "style": [backgroundColorStyles.value, layoutItemStyles.value, {
          height: (0,helpers/* convertToUnit */.kb)(height.value),
          transform: `translateY(${(0,helpers/* convertToUnit */.kb)(!isActive.value ? 100 : 0, '%')})`
        }]
      }, {
        default: () => [slots.default && (0,runtime_core_esm_bundler/* createVNode */.Wm)("div", {
          "class": "v-bottom-navigation__content"
        }, [slots.default()])]
      });
    };
  }

});
//# sourceMappingURL=VBottomNavigation.mjs.map
;// CONCATENATED MODULE: ./node_modules/vuetify/lib/components/VBottomNavigation/index.mjs

//# sourceMappingURL=index.mjs.map
;// CONCATENATED MODULE: ./node_modules/vuetify/lib/components/VBreadcrumbs/VBreadcrumbs.css
// extracted by mini-css-extract-plugin

;// CONCATENATED MODULE: ./node_modules/vuetify/lib/components/VBreadcrumbs/VBreadcrumbsItem.mjs

// Composables


 // Utilities



const VBreadcrumbsItem = (0,defineComponent/* defineComponent */.a)({
  name: 'VBreadcrumbsItem',
  props: {
    active: Boolean,
    activeClass: String,
    activeColor: String,
    color: String,
    disabled: Boolean,
    text: String,
    ...makeRouterProps(),
    ...makeTagProps({
      tag: 'li'
    })
  },

  setup(props, _ref) {
    let {
      slots,
      attrs
    } = _ref;
    const link = useLink(props, attrs);
    const isActive = (0,runtime_core_esm_bundler/* computed */.Fl)(() => {
      var _link$isExactActive;

      return props.active || ((_link$isExactActive = link.isExactActive) == null ? void 0 : _link$isExactActive.value);
    });
    const color = (0,runtime_core_esm_bundler/* computed */.Fl)(() => isActive.value ? props.activeColor : props.color);
    const {
      textColorClasses,
      textColorStyles
    } = useTextColor(color);
    useRender(() => {
      const Tag = link.isLink.value ? 'a' : props.tag;
      const hasText = !!(slots.default || props.text);
      return (0,runtime_core_esm_bundler/* createVNode */.Wm)(Tag, {
        "class": ['v-breadcrumbs-item', {
          'v-breadcrumbs-item--active': isActive.value,
          'v-breadcrumbs-item--disabled': props.disabled,
          'v-breadcrumbs-item--link': link.isLink.value,
          [`${props.activeClass}`]: isActive.value && props.activeClass
        }, textColorClasses.value],
        "style": [textColorStyles.value],
        "href": link.href.value,
        "aria-current": isActive.value ? 'page' : undefined,
        "onClick": link.navigate
      }, {
        default: hasText ? () => {
          var _slots$default, _slots$default2;

          return (_slots$default = (_slots$default2 = slots.default) == null ? void 0 : _slots$default2.call(slots)) != null ? _slots$default : props.text;
        } : undefined
      });
    });
    return {};
  }

});
//# sourceMappingURL=VBreadcrumbsItem.mjs.map
;// CONCATENATED MODULE: ./node_modules/vuetify/lib/components/VBreadcrumbs/VBreadcrumbsDivider.mjs

const VBreadcrumbsDivider = createSimpleFunctional('v-breadcrumbs-divider', 'li');
//# sourceMappingURL=VBreadcrumbsDivider.mjs.map
;// CONCATENATED MODULE: ./node_modules/vuetify/lib/components/VBreadcrumbs/VBreadcrumbs.mjs

// Styles
 // Components



 // Composables





 // Utilities


 // Types

const VBreadcrumbs = (0,defineComponent/* defineComponent */.a)({
  name: 'VBreadcrumbs',
  props: {
    activeClass: String,
    activeColor: String,
    bgColor: String,
    color: String,
    disabled: Boolean,
    divider: {
      type: String,
      default: '/'
    },
    icon: String,
    items: {
      type: Array,
      default: () => []
    },
    ...makeDensityProps(),
    ...makeRoundedProps(),
    ...makeTagProps({
      tag: 'ul'
    })
  },

  setup(props, _ref) {
    let {
      slots
    } = _ref;
    const {
      densityClasses
    } = useDensity(props);
    const {
      roundedClasses
    } = useRounded(props);
    const {
      backgroundColorClasses,
      backgroundColorStyles
    } = useBackgroundColor((0,reactivity_esm_bundler/* toRef */.Vh)(props, 'bgColor'));
    (0,composables_defaults/* provideDefaults */.AF)({
      VBreadcrumbsItem: {
        activeClass: (0,reactivity_esm_bundler/* toRef */.Vh)(props, 'activeClass'),
        activeColor: (0,reactivity_esm_bundler/* toRef */.Vh)(props, 'activeColor'),
        color: (0,reactivity_esm_bundler/* toRef */.Vh)(props, 'color'),
        disabled: (0,reactivity_esm_bundler/* toRef */.Vh)(props, 'disabled')
      }
    });
    useRender(() => {
      var _slots$default;

      return (0,runtime_core_esm_bundler/* createVNode */.Wm)(props.tag, {
        "class": ['v-breadcrumbs', backgroundColorClasses.value, densityClasses.value, roundedClasses.value],
        "style": backgroundColorStyles.value
      }, {
        default: () => [props.icon && (0,runtime_core_esm_bundler/* createVNode */.Wm)(VIcon, {
          "icon": props.icon,
          "left": true
        }, null), props.items.map((item, index, array) => {
          var _slots$divider, _slots$divider2;

          return (0,runtime_core_esm_bundler/* createVNode */.Wm)(runtime_core_esm_bundler/* Fragment */.HY, null, [(0,runtime_core_esm_bundler/* createVNode */.Wm)(VBreadcrumbsItem, (0,runtime_core_esm_bundler/* mergeProps */.dG)({
            "key": index,
            "disabled": index >= array.length - 1
          }, typeof item === 'string' ? {
            text: item
          } : item), {
            default: slots.text ? () => {
              var _slots$text;

              return (_slots$text = slots.text) == null ? void 0 : _slots$text.call(slots, {
                item,
                index
              });
            } : undefined
          }), index < array.length - 1 && (0,runtime_core_esm_bundler/* createVNode */.Wm)(VBreadcrumbsDivider, null, {
            default: () => [(_slots$divider = (_slots$divider2 = slots.divider) == null ? void 0 : _slots$divider2.call(slots, {
              item,
              index
            })) != null ? _slots$divider : props.divider]
          })]);
        }), (_slots$default = slots.default) == null ? void 0 : _slots$default.call(slots)]
      });
    });
    return {};
  }

});
//# sourceMappingURL=VBreadcrumbs.mjs.map
;// CONCATENATED MODULE: ./node_modules/vuetify/lib/components/VBreadcrumbs/index.mjs



//# sourceMappingURL=index.mjs.map
;// CONCATENATED MODULE: ./node_modules/vuetify/lib/components/VBtn/index.mjs

//# sourceMappingURL=index.mjs.map
;// CONCATENATED MODULE: ./node_modules/vuetify/lib/components/VBtnGroup/index.mjs

//# sourceMappingURL=index.mjs.map
;// CONCATENATED MODULE: ./node_modules/vuetify/lib/components/VBtnToggle/index.mjs

//# sourceMappingURL=index.mjs.map
;// CONCATENATED MODULE: ./node_modules/vuetify/lib/components/VCard/VCard.css
// extracted by mini-css-extract-plugin

;// CONCATENATED MODULE: ./node_modules/vuetify/lib/components/VCard/VCardActions.mjs

// Composables
 // Utility


const VCardActions = (0,defineComponent/* defineComponent */.a)({
  name: 'VCardActions',

  setup(_, _ref) {
    let {
      slots
    } = _ref;
    (0,composables_defaults/* provideDefaults */.AF)({
      VBtn: {
        variant: 'text'
      }
    });
    useRender(() => {
      var _slots$default;

      return (0,runtime_core_esm_bundler/* createVNode */.Wm)("div", {
        "class": "v-card-actions"
      }, [slots == null ? void 0 : (_slots$default = slots.default) == null ? void 0 : _slots$default.call(slots)]);
    });
    return {};
  }

});
//# sourceMappingURL=VCardActions.mjs.map
;// CONCATENATED MODULE: ./node_modules/vuetify/lib/components/VCard/VCardAvatar.mjs

const VCardAvatar = createSimpleFunctional('v-card-avatar');
//# sourceMappingURL=VCardAvatar.mjs.map
;// CONCATENATED MODULE: ./node_modules/vuetify/lib/components/VCard/VCardContent.mjs

const VCardContent = createSimpleFunctional('v-card-content');
//# sourceMappingURL=VCardContent.mjs.map
;// CONCATENATED MODULE: ./node_modules/vuetify/lib/components/VCard/VCardHeader.mjs

const VCardHeader = createSimpleFunctional('v-card-header');
//# sourceMappingURL=VCardHeader.mjs.map
;// CONCATENATED MODULE: ./node_modules/vuetify/lib/components/VCard/VCardHeaderText.mjs

const VCardHeaderText = createSimpleFunctional('v-card-header-text');
//# sourceMappingURL=VCardHeaderText.mjs.map
;// CONCATENATED MODULE: ./node_modules/vuetify/lib/components/VCard/VCardImg.mjs

const VCardImg = createSimpleFunctional('v-card-img');
//# sourceMappingURL=VCardImg.mjs.map
;// CONCATENATED MODULE: ./node_modules/vuetify/lib/components/VCard/VCardSubtitle.mjs

const VCardSubtitle = createSimpleFunctional('v-card-subtitle');
//# sourceMappingURL=VCardSubtitle.mjs.map
;// CONCATENATED MODULE: ./node_modules/vuetify/lib/components/VCard/VCardText.mjs

const VCardText = createSimpleFunctional('v-card-text');
//# sourceMappingURL=VCardText.mjs.map
;// CONCATENATED MODULE: ./node_modules/vuetify/lib/components/VCard/VCardTitle.mjs

const VCardTitle = createSimpleFunctional('v-card-title');
//# sourceMappingURL=VCardTitle.mjs.map
;// CONCATENATED MODULE: ./node_modules/vuetify/lib/components/VCard/VCard.mjs


/* eslint-disable complexity */
// Styles
 // Components











 // Composables










 // Directives

 // Utilities



const VCard = (0,defineComponent/* defineComponent */.a)({
  name: 'VCard',
  directives: {
    Ripple: ripple/* Ripple */.H
  },
  props: {
    appendAvatar: String,
    appendIcon: String,
    disabled: Boolean,
    flat: Boolean,
    hover: Boolean,
    image: String,
    link: Boolean,
    prependAvatar: String,
    prependIcon: String,
    ripple: Boolean,
    subtitle: String,
    text: String,
    title: String,
    ...(0,composables_theme/* makeThemeProps */.x$)(),
    ...makeBorderProps(),
    ...makeDensityProps(),
    ...makeDimensionProps(),
    ...makeElevationProps(),
    ...makePositionProps(),
    ...makeRoundedProps(),
    ...makeRouterProps(),
    ...makeTagProps(),
    ...makeVariantProps({
      variant: 'contained'
    })
  },

  setup(props, _ref) {
    let {
      attrs,
      slots
    } = _ref;
    const {
      themeClasses
    } = (0,composables_theme/* provideTheme */.ER)(props);
    const {
      borderClasses
    } = useBorder(props);
    const {
      colorClasses,
      colorStyles,
      variantClasses
    } = useVariant(props);
    const {
      densityClasses
    } = useDensity(props);
    const {
      dimensionStyles
    } = useDimension(props);
    const {
      elevationClasses
    } = useElevation(props);
    const {
      positionClasses,
      positionStyles
    } = usePosition(props);
    const {
      roundedClasses
    } = useRounded(props);
    const link = useLink(props, attrs);
    return () => {
      var _slots$image, _slots$media, _slots$headerText, _slots$default;

      const Tag = link.isLink.value ? 'a' : props.tag;
      const hasTitle = !!(slots.title || props.title);
      const hasSubtitle = !!(slots.subtitle || props.subtitle);
      const hasHeaderText = hasTitle || hasSubtitle;
      const hasAppend = !!(slots.append || props.appendAvatar || props.appendIcon);
      const hasPrepend = !!(slots.prepend || props.prependAvatar || props.prependIcon);
      const hasImage = !!(slots.image || props.image);
      const hasHeader = hasHeaderText || hasPrepend || hasAppend;
      const hasText = !!(slots.text || props.text);
      const isClickable = !props.disabled && (link.isClickable.value || props.link);
      return (0,runtime_core_esm_bundler/* withDirectives */.wy)((0,runtime_core_esm_bundler/* createVNode */.Wm)(Tag, {
        "class": ['v-card', {
          'v-card--disabled': props.disabled,
          'v-card--flat': props.flat,
          'v-card--hover': props.hover && !(props.disabled || props.flat),
          'v-card--link': isClickable
        }, themeClasses.value, borderClasses.value, colorClasses.value, densityClasses.value, elevationClasses.value, positionClasses.value, roundedClasses.value, variantClasses.value],
        "style": [colorStyles.value, dimensionStyles.value, positionStyles.value],
        "href": link.href.value,
        "onClick": isClickable && link.navigate
      }, {
        default: () => [genOverlays(isClickable, 'v-card'), hasImage && (0,runtime_core_esm_bundler/* createVNode */.Wm)(VDefaultsProvider, {
          "defaults": {
            VImg: {
              cover: true,
              src: props.image
            }
          }
        }, {
          default: () => [(0,runtime_core_esm_bundler/* createVNode */.Wm)(VCardImg, null, {
            default: () => [slots.image ? (_slots$image = slots.image) == null ? void 0 : _slots$image.call(slots) : (0,runtime_core_esm_bundler/* createVNode */.Wm)(VImg, {
              "alt": ""
            }, null)]
          })]
        }), (_slots$media = slots.media) == null ? void 0 : _slots$media.call(slots), hasHeader && (0,runtime_core_esm_bundler/* createVNode */.Wm)(VCardHeader, null, {
          default: () => [hasPrepend && (0,runtime_core_esm_bundler/* createVNode */.Wm)(VDefaultsProvider, {
            "defaults": {
              VAvatar: {
                density: props.density,
                icon: props.prependIcon,
                image: props.prependAvatar
              }
            }
          }, {
            default: () => [(0,runtime_core_esm_bundler/* createVNode */.Wm)(VCardAvatar, null, {
              default: () => [slots.prepend ? slots.prepend() : (0,runtime_core_esm_bundler/* createVNode */.Wm)(VAvatar, null, null)]
            })]
          }), hasHeaderText && (0,runtime_core_esm_bundler/* createVNode */.Wm)(VCardHeaderText, null, {
            default: () => [hasTitle && (0,runtime_core_esm_bundler/* createVNode */.Wm)(VCardTitle, null, {
              default: () => [slots.title ? slots.title() : props.title]
            }), hasSubtitle && (0,runtime_core_esm_bundler/* createVNode */.Wm)(VCardSubtitle, null, {
              default: () => [slots.subtitle ? slots.subtitle() : props.subtitle]
            }), (_slots$headerText = slots.headerText) == null ? void 0 : _slots$headerText.call(slots)]
          }), hasAppend && (0,runtime_core_esm_bundler/* createVNode */.Wm)(VDefaultsProvider, {
            "defaults": {
              VAvatar: {
                density: props.density,
                icon: props.appendIcon,
                image: props.appendAvatar
              }
            }
          }, {
            default: () => [(0,runtime_core_esm_bundler/* createVNode */.Wm)(VCardAvatar, null, {
              default: () => [slots.append ? slots.append() : (0,runtime_core_esm_bundler/* createVNode */.Wm)(VAvatar, null, null)]
            })]
          })]
        }), hasText && (0,runtime_core_esm_bundler/* createVNode */.Wm)(VCardText, null, {
          default: () => [slots.text ? slots.text() : props.text]
        }), slots.content && (0,runtime_core_esm_bundler/* createVNode */.Wm)(VCardContent, null, {
          default: slots.content
        }), (_slots$default = slots.default) == null ? void 0 : _slots$default.call(slots), slots.actions && (0,runtime_core_esm_bundler/* createVNode */.Wm)(VCardActions, null, {
          default: slots.actions
        })]
      }), [[(0,runtime_core_esm_bundler/* resolveDirective */.Q2)("ripple"), isClickable]]);
    };
  }

});
//# sourceMappingURL=VCard.mjs.map
;// CONCATENATED MODULE: ./node_modules/vuetify/lib/components/VCard/index.mjs










//# sourceMappingURL=index.mjs.map
;// CONCATENATED MODULE: ./node_modules/vuetify/lib/components/VCarousel/VCarousel.css
// extracted by mini-css-extract-plugin

;// CONCATENATED MODULE: ./node_modules/vuetify/lib/components/VWindow/VWindow.css
// extracted by mini-css-extract-plugin

// EXTERNAL MODULE: ./node_modules/vuetify/lib/directives/touch/index.mjs
var touch = __webpack_require__(842);
;// CONCATENATED MODULE: ./node_modules/vuetify/lib/components/VWindow/VWindow.mjs

// Styles
 // Components

 // Composables





 // Directives

 // Utilities


 // Types

const VWindowSymbol = Symbol.for('vuetify:v-window');
const VWindowGroupSymbol = Symbol.for('vuetify:v-window-group');
const VWindow = (0,defineComponent/* genericComponent */.e)()({
  name: 'VWindow',
  directives: {
    Touch: touch/* Touch */.X
  },
  props: {
    continuous: Boolean,
    nextIcon: {
      type: [Boolean, String],
      default: '$next'
    },
    prevIcon: {
      type: [Boolean, String],
      default: '$prev'
    },
    reverse: Boolean,
    showArrows: {
      type: [Boolean, String],
      validator: v => typeof v === 'boolean' || v === 'hover'
    },
    touch: {
      type: [Object, Boolean],
      default: undefined
    },
    direction: {
      type: String,
      default: 'horizontal'
    },
    modelValue: null,
    disabled: Boolean,
    selectedClass: {
      type: String,
      default: 'v-window-item--active'
    },
    // TODO: mandatory should probably not be exposed but do this for now
    mandatory: {
      default: 'force'
    },
    ...makeTagProps(),
    ...(0,composables_theme/* makeThemeProps */.x$)()
  },
  emits: {
    'update:modelValue': v => true
  },

  setup(props, _ref) {
    let {
      slots
    } = _ref;
    const {
      themeClasses
    } = (0,composables_theme/* provideTheme */.ER)(props);
    const {
      isRtl
    } = (0,rtl/* useRtl */.Vw)();
    const {
      t
    } = (0,locale/* useLocale */.bU)();
    const group = useGroup(props, VWindowGroupSymbol);
    const rootRef = (0,reactivity_esm_bundler/* ref */.iH)();
    const isRtlReverse = (0,runtime_core_esm_bundler/* computed */.Fl)(() => isRtl.value ? !props.reverse : props.reverse);
    const isReversed = (0,reactivity_esm_bundler/* ref */.iH)(false);
    const transition = (0,runtime_core_esm_bundler/* computed */.Fl)(() => {
      const axis = props.direction === 'vertical' ? 'y' : 'x';
      const reverse = isRtlReverse.value ? !isReversed.value : isReversed.value;
      const direction = reverse ? '-reverse' : '';
      return `v-window-${axis}${direction}-transition`;
    });
    const transitionCount = (0,reactivity_esm_bundler/* ref */.iH)(0);
    const transitionHeight = (0,reactivity_esm_bundler/* ref */.iH)(undefined);
    const activeIndex = (0,runtime_core_esm_bundler/* computed */.Fl)(() => {
      return group.items.value.findIndex(item => group.selected.value.includes(item.id));
    });
    (0,runtime_core_esm_bundler/* watch */.YP)(activeIndex, (newVal, oldVal) => {
      const itemsLength = group.items.value.length;
      const lastIndex = itemsLength - 1;

      if (itemsLength <= 2) {
        isReversed.value = newVal < oldVal;
      } else if (newVal === lastIndex && oldVal === 0) {
        isReversed.value = true;
      } else if (newVal === 0 && oldVal === lastIndex) {
        isReversed.value = false;
      } else {
        isReversed.value = newVal < oldVal;
      }
    });
    (0,runtime_core_esm_bundler/* provide */.JJ)(VWindowSymbol, {
      transition,
      isReversed,
      transitionCount,
      transitionHeight,
      rootRef
    });
    const canMoveBack = (0,runtime_core_esm_bundler/* computed */.Fl)(() => props.continuous || activeIndex.value !== 0);
    const canMoveForward = (0,runtime_core_esm_bundler/* computed */.Fl)(() => props.continuous || activeIndex.value !== group.items.value.length - 1);

    function prev() {
      canMoveBack.value && group.prev();
    }

    function next() {
      canMoveForward.value && group.next();
    }

    const arrows = (0,runtime_core_esm_bundler/* computed */.Fl)(() => {
      const arrows = [];
      const prevProps = {
        icon: isRtl.value ? props.nextIcon : props.prevIcon,
        class: `v-window__${isRtlReverse.value ? 'right' : 'left'}`,
        onClick: group.prev,
        ariaLabel: t('$vuetify.carousel.prev')
      };
      arrows.push(canMoveBack.value ? slots.prev ? slots.prev({
        props: prevProps
      }) : (0,runtime_core_esm_bundler/* createVNode */.Wm)(VBtn, prevProps, null) : (0,runtime_core_esm_bundler/* createVNode */.Wm)("div", null, null));
      const nextProps = {
        icon: isRtl.value ? props.prevIcon : props.nextIcon,
        class: `v-window__${isRtlReverse.value ? 'left' : 'right'}`,
        onClick: group.next,
        ariaLabel: t('$vuetify.carousel.next')
      };
      arrows.push(canMoveForward.value ? slots.next ? slots.next({
        props: nextProps
      }) : (0,runtime_core_esm_bundler/* createVNode */.Wm)(VBtn, nextProps, null) : (0,runtime_core_esm_bundler/* createVNode */.Wm)("div", null, null));
      return arrows;
    });
    const touchOptions = (0,runtime_core_esm_bundler/* computed */.Fl)(() => {
      if (props.touch === false) return props.touch;
      const options = {
        left: () => {
          isRtlReverse.value ? prev() : next();
        },
        right: () => {
          isRtlReverse.value ? next() : prev();
        },
        end: _ref2 => {
          let {
            originalEvent
          } = _ref2;
          originalEvent.stopPropagation();
        },
        start: _ref3 => {
          let {
            originalEvent
          } = _ref3;
          originalEvent.stopPropagation();
        }
      };
      return { ...options,
        ...(props.touch === true ? {} : props.touch)
      };
    });
    useRender(() => {
      var _slots$default, _slots$additional;

      return (0,runtime_core_esm_bundler/* withDirectives */.wy)((0,runtime_core_esm_bundler/* createVNode */.Wm)(props.tag, {
        "ref": rootRef,
        "class": ['v-window', {
          'v-window--show-arrows-on-hover': props.showArrows === 'hover'
        }, themeClasses.value]
      }, {
        default: () => [(0,runtime_core_esm_bundler/* createVNode */.Wm)("div", {
          "class": "v-window__container",
          "style": {
            height: transitionHeight.value
          }
        }, [(_slots$default = slots.default) == null ? void 0 : _slots$default.call(slots, {
          group
        }), props.showArrows !== false && (0,runtime_core_esm_bundler/* createVNode */.Wm)("div", {
          "class": "v-window__controls"
        }, [arrows.value])]), (_slots$additional = slots.additional) == null ? void 0 : _slots$additional.call(slots, {
          group
        })]
      }), [[(0,runtime_core_esm_bundler/* resolveDirective */.Q2)("touch"), touchOptions.value]]);
    });
    return {
      group
    };
  }

});
//# sourceMappingURL=VWindow.mjs.map
;// CONCATENATED MODULE: ./node_modules/vuetify/lib/components/VCarousel/VCarousel.mjs

// Styles
 // Components




 // Composables


 // Utilities


 // Types

const VCarousel = (0,defineComponent/* defineComponent */.a)({
  name: 'VCarousel',
  props: {
    color: String,
    cycle: Boolean,
    delimiterIcon: {
      type: String,
      default: '$delimiter'
    },
    height: {
      type: [Number, String],
      default: 500
    },
    hideDelimiters: Boolean,
    hideDelimiterBackground: Boolean,
    interval: {
      type: [Number, String],
      default: 6000,
      validator: value => value > 0
    },
    modelValue: null,
    progress: [Boolean, String],
    showArrows: {
      type: [Boolean, String],
      default: true,
      validator: v => typeof v === 'boolean' || v === 'hover'
    },
    verticalDelimiters: [Boolean, String]
  },
  emits: {
    'update:modelValue': val => true
  },

  setup(props, _ref) {
    let {
      slots
    } = _ref;
    const model = useProxiedModel(props, 'modelValue');
    const {
      t
    } = (0,locale/* useLocale */.bU)();
    const windowRef = (0,reactivity_esm_bundler/* ref */.iH)();
    let slideTimeout = -1;
    (0,runtime_core_esm_bundler/* watch */.YP)(model, restartTimeout);
    (0,runtime_core_esm_bundler/* watch */.YP)(() => props.interval, restartTimeout);
    (0,runtime_core_esm_bundler/* watch */.YP)(() => props.cycle, val => {
      if (val) restartTimeout();else window.clearTimeout(slideTimeout);
    });
    (0,runtime_core_esm_bundler/* onMounted */.bv)(startTimeout);

    function startTimeout() {
      if (!props.cycle || !windowRef.value) return;
      slideTimeout = window.setTimeout(windowRef.value.group.next, +props.interval > 0 ? +props.interval : 6000);
    }

    function restartTimeout() {
      window.clearTimeout(slideTimeout);
      window.requestAnimationFrame(startTimeout);
    }

    useRender(() => (0,runtime_core_esm_bundler/* createVNode */.Wm)(VWindow, {
      "ref": windowRef,
      "modelValue": model.value,
      "onUpdate:modelValue": $event => model.value = $event,
      "class": ['v-carousel', {
        'v-carousel--hide-delimiter-background': props.hideDelimiterBackground,
        'v-carousel--vertical-delimiters': props.verticalDelimiters
      }],
      "style": {
        height: (0,helpers/* convertToUnit */.kb)(props.height)
      },
      "continuous": true,
      "showArrows": props.showArrows,
      "mandatory": "force"
    }, {
      default: slots.default,
      additional: _ref2 => {
        let {
          group
        } = _ref2;
        return (0,runtime_core_esm_bundler/* createVNode */.Wm)(runtime_core_esm_bundler/* Fragment */.HY, null, [!props.hideDelimiters && (0,runtime_core_esm_bundler/* createVNode */.Wm)("div", {
          "class": "v-carousel__controls",
          "style": {
            left: props.verticalDelimiters === 'left' && props.verticalDelimiters ? 0 : 'auto',
            right: props.verticalDelimiters === 'right' ? 0 : 'auto'
          }
        }, [group.items.value.length > 0 && (0,runtime_core_esm_bundler/* createVNode */.Wm)(VDefaultsProvider, {
          "defaults": {
            VBtn: {
              color: props.color,
              icon: props.delimiterIcon,
              size: 'x-small',
              variant: 'text'
            }
          },
          "scoped": true
        }, {
          default: () => [group.items.value.map(item => {
            const props = {
              'aria-label': t('$vuetify.carousel.ariaLabel.delimiter'),
              class: [group.isSelected(item.id) && 'v-btn--selected'],
              onClick: () => group.select(item.id, true)
            };
            return slots.item ? slots.item({
              props,
              item
            }) : (0,runtime_core_esm_bundler/* createVNode */.Wm)(VBtn, (0,runtime_core_esm_bundler/* mergeProps */.dG)(item, props), null);
          })]
        })]), props.progress && (0,runtime_core_esm_bundler/* createVNode */.Wm)(VProgressLinear, {
          "class": "v-carousel__progress",
          "color": typeof props.progress === 'string' ? props.progress : undefined,
          "modelValue": (group.getItemIndex(model.value) + 1) / group.items.value.length * 100
        }, null)]);
      },
      prev: slots.prev,
      next: slots.next
    }));
  }

});
//# sourceMappingURL=VCarousel.mjs.map
;// CONCATENATED MODULE: ./node_modules/vuetify/lib/components/VWindow/VWindowItem.mjs

// Composables


 // Directives

 // Utilities




const VWindowItem = (0,defineComponent/* defineComponent */.a)({
  name: 'VWindowItem',
  directives: {
    Touch: touch/* default */.Z
  },
  props: {
    reverseTransition: {
      type: [Boolean, String],
      default: undefined
    },
    transition: {
      type: [Boolean, String],
      default: undefined
    },
    ...makeLazyProps(),
    ...makeGroupItemProps()
  },

  setup(props, _ref) {
    let {
      slots
    } = _ref;
    const window = (0,runtime_core_esm_bundler/* inject */.f3)(VWindowSymbol);
    const groupItem = useGroupItem(props, VWindowGroupSymbol);
    if (!window || !groupItem) throw new Error('[Vuetify] VWindowItem must be used inside VWindow');
    const isTransitioning = (0,reactivity_esm_bundler/* ref */.iH)(false);
    const hasTransition = (0,runtime_core_esm_bundler/* computed */.Fl)(() => window.isReversed.value ? props.reverseTransition !== false : props.transition !== false);

    function onAfterTransition() {
      if (!isTransitioning.value || !window) {
        return;
      } // Finalize transition state.


      isTransitioning.value = false;

      if (window.transitionCount.value > 0) {
        window.transitionCount.value -= 1; // Remove container height if we are out of transition.

        if (window.transitionCount.value === 0) {
          window.transitionHeight.value = undefined;
        }
      }
    }

    function onBeforeTransition() {
      if (isTransitioning.value || !window) {
        return;
      } // Initialize transition state here.


      isTransitioning.value = true;

      if (window.transitionCount.value === 0) {
        var _window$rootRef$value;

        // Set initial height for height transition.
        window.transitionHeight.value = (0,helpers/* convertToUnit */.kb)((_window$rootRef$value = window.rootRef.value) == null ? void 0 : _window$rootRef$value.clientHeight);
      }

      window.transitionCount.value += 1;
    }

    function onTransitionCancelled() {
      onAfterTransition(); // This should have the same path as normal transition end.
    }

    function onEnterTransition(el) {
      if (!isTransitioning.value) {
        return;
      }

      (0,runtime_core_esm_bundler/* nextTick */.Y3)(() => {
        // Do not set height if no transition or cancelled.
        if (!hasTransition.value || !isTransitioning.value || !window) {
          return;
        } // Set transition target height.


        window.transitionHeight.value = (0,helpers/* convertToUnit */.kb)(el.clientHeight);
      });
    }

    const transition = (0,runtime_core_esm_bundler/* computed */.Fl)(() => {
      const name = window.isReversed.value ? props.reverseTransition : props.transition;
      return !hasTransition.value ? false : {
        name: typeof name !== 'string' ? window.transition.value : name,
        onBeforeEnter: onBeforeTransition,
        onAfterEnter: onAfterTransition,
        onEnterCancelled: onTransitionCancelled,
        onBeforeLeave: onBeforeTransition,
        onAfterLeave: onAfterTransition,
        onLeaveCancelled: onTransitionCancelled,
        onEnter: onEnterTransition
      };
    });
    const {
      hasContent
    } = useLazy(props, groupItem.isSelected);
    return () => {
      return (0,runtime_core_esm_bundler/* createVNode */.Wm)(MaybeTransition, {
        "transition": transition.value
      }, {
        default: () => [(0,runtime_core_esm_bundler/* withDirectives */.wy)((0,runtime_core_esm_bundler/* createVNode */.Wm)("div", {
          "class": ['v-window-item', groupItem.selectedClass.value]
        }, [slots.default && hasContent.value && slots.default()]), [[runtime_dom_esm_bundler/* vShow */.F8, groupItem.isSelected.value]])]
      });
    };
  }

});
//# sourceMappingURL=VWindowItem.mjs.map
;// CONCATENATED MODULE: ./node_modules/vuetify/lib/components/VCarousel/VCarouselItem.mjs

// Components

 // Utilities


const VCarouselItem = (0,defineComponent/* defineComponent */.a)({
  name: 'VCarouselItem',
  inheritAttrs: false,
  props: {
    value: null
  },

  setup(props, _ref) {
    let {
      slots,
      attrs
    } = _ref;
    useRender(() => (0,runtime_core_esm_bundler/* createVNode */.Wm)(VWindowItem, {
      "class": "v-carousel-item",
      "value": props.value
    }, {
      default: () => [(0,runtime_core_esm_bundler/* createVNode */.Wm)(VImg, attrs, slots)]
    }));
  }

});
//# sourceMappingURL=VCarouselItem.mjs.map
;// CONCATENATED MODULE: ./node_modules/vuetify/lib/components/VCarousel/index.mjs


//# sourceMappingURL=index.mjs.map
;// CONCATENATED MODULE: ./node_modules/vuetify/lib/components/VCheckbox/VCheckbox.css
// extracted by mini-css-extract-plugin

;// CONCATENATED MODULE: ./node_modules/vuetify/lib/components/VSelectionControl/VSelectionControl.css
// extracted by mini-css-extract-plugin

;// CONCATENATED MODULE: ./node_modules/vuetify/lib/components/VSelectionControlGroup/VSelectionControlGroup.css
// extracted by mini-css-extract-plugin

;// CONCATENATED MODULE: ./node_modules/vuetify/lib/components/VSelectionControlGroup/VSelectionControlGroup.mjs

// Styles
 // Composables

 // Utility


 // Types

const VSelectionControlGroupSymbol = Symbol.for('vuetify:selection-control-group');
const VSelectionControlGroup = (0,defineComponent/* defineComponent */.a)({
  name: 'VSelectionControlGroup',
  props: {
    disabled: Boolean,
    id: String,
    inline: Boolean,
    name: String,
    falseIcon: String,
    trueIcon: String,
    multiple: {
      type: Boolean,
      default: null
    },
    readonly: Boolean,
    type: String,
    modelValue: null
  },
  emits: {
    'update:modelValue': val => true
  },

  setup(props, _ref) {
    let {
      slots
    } = _ref;
    const modelValue = useProxiedModel(props, 'modelValue');
    const uid = (0,helpers/* getUid */.sq)();
    const id = (0,runtime_core_esm_bundler/* computed */.Fl)(() => props.id || `v-selection-control-group-${uid}`);
    const name = (0,runtime_core_esm_bundler/* computed */.Fl)(() => props.name || id.value);
    (0,runtime_core_esm_bundler/* provide */.JJ)(VSelectionControlGroupSymbol, {
      disabled: (0,reactivity_esm_bundler/* toRef */.Vh)(props, 'disabled'),
      inline: (0,reactivity_esm_bundler/* toRef */.Vh)(props, 'inline'),
      modelValue,
      multiple: (0,runtime_core_esm_bundler/* computed */.Fl)(() => !!props.multiple || props.multiple == null && Array.isArray(modelValue.value)),
      name,
      falseIcon: (0,reactivity_esm_bundler/* toRef */.Vh)(props, 'falseIcon'),
      trueIcon: (0,reactivity_esm_bundler/* toRef */.Vh)(props, 'trueIcon'),
      readonly: (0,reactivity_esm_bundler/* toRef */.Vh)(props, 'readonly'),
      type: (0,reactivity_esm_bundler/* toRef */.Vh)(props, 'type')
    });
    useRender(() => {
      var _slots$default;

      return (0,runtime_core_esm_bundler/* createVNode */.Wm)("div", {
        "class": "v-selection-control-group",
        "aria-labelled-by": props.type === 'radio' ? id.value : undefined,
        "role": props.type === 'radio' ? 'radiogroup' : undefined
      }, [slots == null ? void 0 : (_slots$default = slots.default) == null ? void 0 : _slots$default.call(slots)]);
    });
    return {};
  }

});
//# sourceMappingURL=VSelectionControlGroup.mjs.map
;// CONCATENATED MODULE: ./node_modules/vuetify/lib/components/VSelectionControl/VSelectionControl.mjs

// Styles
 // Components



 // Composables




 // Directives

 // Utilities


 // Types

const makeSelectionControlProps = (0,propsFactory/* propsFactory */.U)({
  color: String,
  disabled: Boolean,
  error: Boolean,
  id: String,
  inline: Boolean,
  label: String,
  falseIcon: String,
  trueIcon: String,
  ripple: {
    type: Boolean,
    default: true
  },
  multiple: {
    type: Boolean,
    default: null
  },
  name: String,
  readonly: Boolean,
  trueValue: null,
  falseValue: null,
  modelValue: null,
  type: String,
  value: null,
  valueComparator: {
    type: Function,
    default: helpers/* deepEqual */.vZ
  },
  ...(0,composables_theme/* makeThemeProps */.x$)(),
  ...makeDensityProps()
});
function useSelectionControl(props) {
  const group = (0,runtime_core_esm_bundler/* inject */.f3)(VSelectionControlGroupSymbol, undefined);
  const {
    densityClasses
  } = useDensity(props);
  const modelValue = useProxiedModel(props, 'modelValue');
  const trueValue = (0,runtime_core_esm_bundler/* computed */.Fl)(() => props.trueValue !== undefined ? props.trueValue : props.value !== undefined ? props.value : true);
  const falseValue = (0,runtime_core_esm_bundler/* computed */.Fl)(() => props.falseValue !== undefined ? props.falseValue : false);
  const isMultiple = (0,runtime_core_esm_bundler/* computed */.Fl)(() => (group == null ? void 0 : group.multiple.value) || !!props.multiple || props.multiple == null && Array.isArray(modelValue.value));
  const model = (0,runtime_core_esm_bundler/* computed */.Fl)({
    get() {
      const val = group ? group.modelValue.value : modelValue.value;
      return isMultiple.value ? val.some(v => props.valueComparator(v, trueValue.value)) : props.valueComparator(val, trueValue.value);
    },

    set(val) {
      if (props.readonly) return;
      const currentValue = val ? trueValue.value : falseValue.value;
      let newVal = currentValue;

      if (isMultiple.value) {
        newVal = val ? [...(0,helpers/* wrapInArray */.FT)(modelValue.value), currentValue] : (0,helpers/* wrapInArray */.FT)(modelValue.value).filter(item => !props.valueComparator(item, trueValue.value));
      }

      if (group) {
        group.modelValue.value = newVal;
      } else {
        modelValue.value = newVal;
      }
    }

  });
  const {
    textColorClasses,
    textColorStyles
  } = useTextColor((0,runtime_core_esm_bundler/* computed */.Fl)(() => {
    return model.value && !props.error && !props.disabled ? props.color : undefined;
  }));
  const icon = (0,runtime_core_esm_bundler/* computed */.Fl)(() => {
    var _group$trueIcon$value, _group$falseIcon$valu;

    return model.value ? (_group$trueIcon$value = group == null ? void 0 : group.trueIcon.value) != null ? _group$trueIcon$value : props.trueIcon : (_group$falseIcon$valu = group == null ? void 0 : group.falseIcon.value) != null ? _group$falseIcon$valu : props.falseIcon;
  });
  return {
    group,
    densityClasses,
    trueValue,
    falseValue,
    model,
    textColorClasses,
    textColorStyles,
    icon
  };
}
const VSelectionControl = (0,defineComponent/* genericComponent */.e)()({
  name: 'VSelectionControl',
  directives: {
    Ripple: ripple/* Ripple */.H
  },
  inheritAttrs: false,
  props: makeSelectionControlProps(),
  emits: {
    'update:modelValue': val => true
  },

  setup(props, _ref) {
    let {
      attrs,
      slots
    } = _ref;
    const {
      densityClasses,
      group,
      icon,
      model,
      textColorClasses,
      textColorStyles,
      trueValue
    } = useSelectionControl(props);
    const uid = (0,helpers/* getUid */.sq)();
    const id = (0,runtime_core_esm_bundler/* computed */.Fl)(() => props.id || `input-${uid}`);
    const isFocused = (0,reactivity_esm_bundler/* ref */.iH)(false);
    const isFocusVisible = (0,reactivity_esm_bundler/* ref */.iH)(false);
    const input = (0,reactivity_esm_bundler/* ref */.iH)();

    function onFocus(e) {
      isFocused.value = true;

      if (!globals/* SUPPORTS_FOCUS_VISIBLE */.Z1 || globals/* SUPPORTS_FOCUS_VISIBLE */.Z1 && e.target.matches(':focus-visible')) {
        isFocusVisible.value = true;
      }
    }

    function onBlur() {
      isFocused.value = false;
      isFocusVisible.value = false;
    }

    useRender(() => {
      var _group$type$value, _slots$default, _group$name$value, _slots$input;

      const label = slots.label ? slots.label({
        label: props.label,
        props: {
          for: id.value
        }
      }) : props.label;
      const type = (_group$type$value = group == null ? void 0 : group.type.value) != null ? _group$type$value : props.type;
      return (0,runtime_core_esm_bundler/* createVNode */.Wm)("div", {
        "class": ['v-selection-control', {
          'v-selection-control--dirty': model.value,
          'v-selection-control--disabled': props.disabled,
          'v-selection-control--error': props.error,
          'v-selection-control--focused': isFocused.value,
          'v-selection-control--focus-visible': isFocusVisible.value,
          'v-selection-control--inline': (group == null ? void 0 : group.inline.value) || props.inline
        }, densityClasses.value]
      }, [(0,runtime_core_esm_bundler/* createVNode */.Wm)("div", {
        "class": ['v-selection-control__wrapper', textColorClasses.value]
      }, [(_slots$default = slots.default) == null ? void 0 : _slots$default.call(slots), (0,runtime_core_esm_bundler/* withDirectives */.wy)((0,runtime_core_esm_bundler/* createVNode */.Wm)("div", {
        "class": ['v-selection-control__input'],
        "style": textColorStyles.value
      }, [icon.value && (0,runtime_core_esm_bundler/* createVNode */.Wm)(VIcon, {
        "icon": icon.value
      }, null), (0,runtime_core_esm_bundler/* withDirectives */.wy)((0,runtime_core_esm_bundler/* createVNode */.Wm)("input", (0,runtime_core_esm_bundler/* mergeProps */.dG)({
        "onUpdate:modelValue": $event => model.value = $event,
        "ref": input,
        "disabled": props.disabled,
        "id": id.value,
        "onBlur": onBlur,
        "onFocus": onFocus,
        "aria-readonly": props.readonly,
        "type": type,
        "value": trueValue.value,
        "name": (_group$name$value = group == null ? void 0 : group.name.value) != null ? _group$name$value : props.name,
        "aria-checked": type === 'checkbox' ? model.value : undefined
      }, attrs), null), [[runtime_dom_esm_bundler/* vModelDynamic */.YZ, model.value]]), (_slots$input = slots.input) == null ? void 0 : _slots$input.call(slots, {
        model,
        textColorClasses,
        props: {
          onFocus,
          onBlur,
          id: id.value
        }
      })]), [[(0,runtime_core_esm_bundler/* resolveDirective */.Q2)("ripple"), props.ripple && [!props.disabled && !props.readonly, null, ['center', 'circle']]]])]), (0,runtime_core_esm_bundler/* createVNode */.Wm)(VLabel, {
        "for": id.value
      }, {
        default: () => [label]
      })]);
    });
    return {
      isFocused,
      input
    };
  }

});
function filterControlProps(props) {
  return (0,helpers/* pick */.ei)(props, Object.keys(VSelectionControl.props));
}
//# sourceMappingURL=VSelectionControl.mjs.map
;// CONCATENATED MODULE: ./node_modules/vuetify/lib/components/VCheckbox/VCheckbox.mjs

// Styles
 // Components


 // Composables

 // Utility



const VCheckbox = (0,defineComponent/* defineComponent */.a)({
  name: 'VCheckbox',
  inheritAttrs: false,
  props: {
    indeterminate: Boolean,
    indeterminateIcon: {
      type: String,
      default: '$checkboxIndeterminate'
    },
    ...makeVInputProps(),
    ...makeSelectionControlProps(),
    falseIcon: {
      type: String,
      default: '$checkboxOff'
    },
    trueIcon: {
      type: String,
      default: '$checkboxOn'
    }
  },
  emits: {
    'update:indeterminate': val => true
  },

  setup(props, _ref) {
    let {
      attrs,
      slots
    } = _ref;
    const indeterminate = useProxiedModel(props, 'indeterminate');
    const falseIcon = (0,runtime_core_esm_bundler/* computed */.Fl)(() => {
      return indeterminate.value ? props.indeterminateIcon : props.falseIcon;
    });
    const trueIcon = (0,runtime_core_esm_bundler/* computed */.Fl)(() => {
      return indeterminate.value ? props.indeterminateIcon : props.trueIcon;
    });

    function onChange() {
      if (indeterminate.value) {
        indeterminate.value = false;
      }
    }

    useRender(() => {
      const [inputAttrs, controlAttrs] = (0,helpers/* filterInputAttrs */.An)(attrs);
      const [inputProps, _1] = filterInputProps(props);
      const [controlProps, _2] = filterControlProps(props);
      return (0,runtime_core_esm_bundler/* createVNode */.Wm)(VInput, (0,runtime_core_esm_bundler/* mergeProps */.dG)({
        "class": "v-checkbox"
      }, inputAttrs, inputProps), { ...slots,
        default: _ref2 => {
          let {
            isDisabled,
            isReadonly
          } = _ref2;
          return (0,runtime_core_esm_bundler/* createVNode */.Wm)(VSelectionControl, (0,runtime_core_esm_bundler/* mergeProps */.dG)(controlProps, {
            "type": "checkbox",
            "onUpdate:modelValue": onChange,
            "falseIcon": falseIcon.value,
            "trueIcon": trueIcon.value,
            "aria-checked": indeterminate.value ? 'mixed' : undefined,
            "disabled": isDisabled.value,
            "readonly": isReadonly.value
          }, controlAttrs), slots);
        }
      });
    });
    return {};
  }

});
//# sourceMappingURL=VCheckbox.mjs.map
;// CONCATENATED MODULE: ./node_modules/vuetify/lib/components/VCheckbox/index.mjs

//# sourceMappingURL=index.mjs.map
;// CONCATENATED MODULE: ./node_modules/vuetify/lib/components/VChip/index.mjs

//# sourceMappingURL=index.mjs.map
;// CONCATENATED MODULE: ./node_modules/vuetify/lib/components/VChipGroup/index.mjs

//# sourceMappingURL=index.mjs.map
;// CONCATENATED MODULE: ./node_modules/vuetify/lib/components/VCode/VCode.css
// extracted by mini-css-extract-plugin

;// CONCATENATED MODULE: ./node_modules/vuetify/lib/components/VCode/index.mjs


const VCode = createSimpleFunctional('v-code');
//# sourceMappingURL=index.mjs.map
;// CONCATENATED MODULE: ./node_modules/vuetify/lib/components/VColorPicker/VColorPicker.css
// extracted by mini-css-extract-plugin

;// CONCATENATED MODULE: ./node_modules/vuetify/lib/components/VSheet/VSheet.css
// extracted by mini-css-extract-plugin

;// CONCATENATED MODULE: ./node_modules/vuetify/lib/components/VSheet/VSheet.mjs

// Styles
 // Composables








 // Utilities



const VSheet = (0,defineComponent/* defineComponent */.a)({
  name: 'VSheet',
  props: {
    color: String,
    ...makeBorderProps(),
    ...makeDimensionProps(),
    ...makeElevationProps(),
    ...makePositionProps(),
    ...makeRoundedProps(),
    ...makeTagProps(),
    ...(0,composables_theme/* makeThemeProps */.x$)()
  },

  setup(props, _ref) {
    let {
      slots
    } = _ref;
    const {
      themeClasses
    } = (0,composables_theme/* provideTheme */.ER)(props);
    const {
      backgroundColorClasses,
      backgroundColorStyles
    } = useBackgroundColor((0,reactivity_esm_bundler/* toRef */.Vh)(props, 'color'));
    const {
      borderClasses
    } = useBorder(props);
    const {
      dimensionStyles
    } = useDimension(props);
    const {
      elevationClasses
    } = useElevation(props);
    const {
      positionClasses,
      positionStyles
    } = usePosition(props);
    const {
      roundedClasses
    } = useRounded(props);
    return () => (0,runtime_core_esm_bundler/* createVNode */.Wm)(props.tag, {
      "class": ['v-sheet', themeClasses.value, backgroundColorClasses.value, borderClasses.value, elevationClasses.value, positionClasses.value, roundedClasses.value],
      "style": [backgroundColorStyles.value, dimensionStyles.value, positionStyles.value]
    }, slots);
  }

});
//# sourceMappingURL=VSheet.mjs.map
;// CONCATENATED MODULE: ./node_modules/vuetify/lib/components/VColorPicker/VColorPickerPreview.css
// extracted by mini-css-extract-plugin

;// CONCATENATED MODULE: ./node_modules/vuetify/lib/components/VSlider/VSlider.css
// extracted by mini-css-extract-plugin

;// CONCATENATED MODULE: ./node_modules/vuetify/lib/components/VSlider/VSliderThumb.css
// extracted by mini-css-extract-plugin

;// CONCATENATED MODULE: ./node_modules/vuetify/lib/components/VSlider/slider.mjs
/* eslint-disable max-statements */
// Composables


 // Utilities


 // Types

const VSliderSymbol = Symbol.for('vuetify:v-slider');
function slider_getOffset(e, el, direction) {
  const vertical = direction === 'vertical';
  const rect = el.getBoundingClientRect();
  const touch = 'touches' in e ? e.touches[0] : e;
  return vertical ? touch.clientY - (rect.top + rect.height / 2) : touch.clientX - (rect.left + rect.width / 2);
}

function getPosition(e, position) {
  if ('touches' in e && e.touches.length) return e.touches[0][position];else if ('changedTouches' in e && e.changedTouches.length) return e.changedTouches[0][position];else return e[position];
}

const makeSliderProps = (0,propsFactory/* propsFactory */.U)({
  disabled: Boolean,
  error: Boolean,
  readonly: Boolean,
  max: {
    type: [Number, String],
    default: 100
  },
  min: {
    type: [Number, String],
    default: 0
  },
  step: {
    type: [Number, String],
    default: 0
  },
  thumbColor: String,
  thumbLabel: {
    type: [Boolean, String],
    default: undefined,
    validator: v => typeof v === 'boolean' || v === 'always'
  },
  thumbSize: {
    type: [Number, String],
    default: 20
  },
  showTicks: {
    type: [Boolean, String],
    default: false,
    validator: v => typeof v === 'boolean' || v === 'always'
  },
  ticks: {
    type: [Array, Object]
  },
  tickSize: {
    type: [Number, String],
    default: 2
  },
  color: String,
  trackColor: String,
  trackFillColor: String,
  trackSize: {
    type: [Number, String],
    default: 4
  },
  direction: {
    type: String,
    default: 'horizontal',
    validator: v => ['vertical', 'horizontal'].includes(v)
  },
  reverse: Boolean,
  ...makeRoundedProps(),
  ...makeElevationProps({
    elevation: 2
  })
}, 'slider');
const useSlider = _ref => {
  let {
    props,
    handleSliderMouseUp,
    handleMouseMove,
    getActiveThumb
  } = _ref;
  const {
    isRtl
  } = (0,rtl/* useRtl */.Vw)();
  const isReversed = (0,runtime_core_esm_bundler/* computed */.Fl)(() => isRtl.value !== props.reverse);
  const horizontalDirection = (0,runtime_core_esm_bundler/* computed */.Fl)(() => {
    let hd = isRtl.value ? 'rtl' : 'ltr';

    if (props.reverse) {
      hd = hd === 'rtl' ? 'ltr' : 'rtl';
    }

    return hd;
  });
  const min = (0,runtime_core_esm_bundler/* computed */.Fl)(() => parseFloat(props.min));
  const max = (0,runtime_core_esm_bundler/* computed */.Fl)(() => parseFloat(props.max));
  const step = (0,runtime_core_esm_bundler/* computed */.Fl)(() => props.step > 0 ? parseFloat(props.step) : 0);
  const decimals = (0,runtime_core_esm_bundler/* computed */.Fl)(() => {
    const trimmedStep = step.value.toString().trim();
    return trimmedStep.includes('.') ? trimmedStep.length - trimmedStep.indexOf('.') - 1 : 0;
  });
  const thumbSize = (0,runtime_core_esm_bundler/* computed */.Fl)(() => parseInt(props.thumbSize, 10));
  const tickSize = (0,runtime_core_esm_bundler/* computed */.Fl)(() => parseInt(props.tickSize, 10));
  const trackSize = (0,runtime_core_esm_bundler/* computed */.Fl)(() => parseInt(props.trackSize, 10));
  const numTicks = (0,runtime_core_esm_bundler/* computed */.Fl)(() => (max.value - min.value) / step.value);
  const disabled = (0,reactivity_esm_bundler/* toRef */.Vh)(props, 'disabled');
  const vertical = (0,runtime_core_esm_bundler/* computed */.Fl)(() => props.direction === 'vertical');
  const thumbColor = (0,runtime_core_esm_bundler/* computed */.Fl)(() => {
    var _props$thumbColor;

    return props.error || props.disabled ? undefined : (_props$thumbColor = props.thumbColor) != null ? _props$thumbColor : props.color;
  });
  const trackColor = (0,runtime_core_esm_bundler/* computed */.Fl)(() => {
    var _props$trackColor;

    return props.error || props.disabled ? undefined : (_props$trackColor = props.trackColor) != null ? _props$trackColor : props.color;
  });
  const trackFillColor = (0,runtime_core_esm_bundler/* computed */.Fl)(() => {
    var _props$trackFillColor;

    return props.error || props.disabled ? undefined : (_props$trackFillColor = props.trackFillColor) != null ? _props$trackFillColor : props.color;
  });
  const mousePressed = (0,reactivity_esm_bundler/* ref */.iH)(false);
  const startOffset = (0,reactivity_esm_bundler/* ref */.iH)(0);
  const trackContainerRef = (0,reactivity_esm_bundler/* ref */.iH)();
  const activeThumbRef = (0,reactivity_esm_bundler/* ref */.iH)();

  function roundValue(value) {
    if (step.value <= 0) return value;
    const clamped = (0,helpers/* clamp */.uZ)(value, min.value, max.value);
    const offset = min.value % step.value;
    const newValue = Math.round((clamped - offset) / step.value) * step.value + offset;
    return parseFloat(Math.min(newValue, max.value).toFixed(decimals.value));
  }

  function parseMouseMove(e) {
    var _trackContainerRef$va;

    const vertical = props.direction === 'vertical';
    const start = vertical ? 'top' : 'left';
    const length = vertical ? 'height' : 'width';
    const position = vertical ? 'clientY' : 'clientX';
    const {
      [start]: trackStart,
      [length]: trackLength
    } = (_trackContainerRef$va = trackContainerRef.value) == null ? void 0 : _trackContainerRef$va.$el.getBoundingClientRect();
    const clickOffset = getPosition(e, position); // It is possible for left to be NaN, force to number

    let clickPos = Math.min(Math.max((clickOffset - trackStart - startOffset.value) / trackLength, 0), 1) || 0;
    if (vertical || isReversed.value) clickPos = 1 - clickPos;
    return roundValue(min.value + clickPos * (max.value - min.value));
  }

  let thumbMoved = false;

  const handleStop = e => {
    if (!thumbMoved) {
      startOffset.value = 0;
      handleSliderMouseUp(parseMouseMove(e));
    }

    mousePressed.value = false;
    thumbMoved = false;
    startOffset.value = 0;
  };

  const handleStart = e => {
    activeThumbRef.value = getActiveThumb(e);
    if (!activeThumbRef.value) return;
    activeThumbRef.value.focus();
    mousePressed.value = true;

    if (activeThumbRef.value.contains(e.target)) {
      thumbMoved = true;
      startOffset.value = slider_getOffset(e, activeThumbRef.value, props.direction);
    } else {
      startOffset.value = 0;
      handleMouseMove(parseMouseMove(e));
    }
  };

  const moveListenerOptions = {
    passive: true,
    capture: true
  };

  function onMouseMove(e) {
    thumbMoved = true;
    handleMouseMove(parseMouseMove(e));
  }

  function onSliderMouseUp(e) {
    e.stopPropagation();
    e.preventDefault();
    handleStop(e);
    window.removeEventListener('mousemove', onMouseMove, moveListenerOptions);
    window.removeEventListener('mouseup', onSliderMouseUp);
  }

  function onSliderTouchend(e) {
    e.stopPropagation();
    e.preventDefault();
    handleStop(e);
    window.removeEventListener('touchmove', onMouseMove, moveListenerOptions);
    window.removeEventListener('touchend', onSliderTouchend);
  }

  function onSliderTouchstart(e) {
    handleStart(e);
    window.addEventListener('touchmove', onMouseMove, moveListenerOptions);
    window.addEventListener('touchend', onSliderTouchend, {
      passive: false
    });
  }

  function onSliderMousedown(e) {
    e.preventDefault();
    handleStart(e);
    window.addEventListener('mousemove', onMouseMove, moveListenerOptions);
    window.addEventListener('mouseup', onSliderMouseUp, {
      passive: false
    });
  }

  const position = val => {
    const percentage = (val - min.value) / (max.value - min.value) * 100;
    return (0,helpers/* clamp */.uZ)(isNaN(percentage) ? 0 : percentage, 0, 100);
  };

  const parsedTicks = (0,runtime_core_esm_bundler/* computed */.Fl)(() => {
    if (!props.ticks) {
      return numTicks.value !== Infinity ? (0,helpers/* createRange */.MT)(numTicks.value + 1).map(t => {
        const value = min.value + t * step.value;
        return {
          value,
          position: position(value)
        };
      }) : [];
    }

    if (Array.isArray(props.ticks)) return props.ticks.map(t => ({
      value: t,
      position: position(t),
      label: t.toString()
    }));
    return Object.keys(props.ticks).map(key => ({
      value: parseInt(key, 10),
      position: position(parseInt(key, 10)),
      label: props.ticks[key]
    }));
  });
  const hasLabels = (0,runtime_core_esm_bundler/* computed */.Fl)(() => parsedTicks.value.some(_ref2 => {
    let {
      label
    } = _ref2;
    return !!label;
  }));
  const data = {
    activeThumbRef,
    color: (0,reactivity_esm_bundler/* toRef */.Vh)(props, 'color'),
    decimals,
    disabled,
    direction: (0,reactivity_esm_bundler/* toRef */.Vh)(props, 'direction'),
    elevation: (0,reactivity_esm_bundler/* toRef */.Vh)(props, 'elevation'),
    hasLabels,
    horizontalDirection,
    isReversed,
    min,
    max,
    mousePressed,
    numTicks,
    onSliderMousedown,
    onSliderTouchstart,
    parsedTicks,
    parseMouseMove,
    position,
    readonly: (0,reactivity_esm_bundler/* toRef */.Vh)(props, 'readonly'),
    rounded: (0,reactivity_esm_bundler/* toRef */.Vh)(props, 'rounded'),
    roundValue,
    showTicks: (0,reactivity_esm_bundler/* toRef */.Vh)(props, 'showTicks'),
    startOffset,
    step,
    thumbSize,
    thumbColor,
    thumbLabel: (0,reactivity_esm_bundler/* toRef */.Vh)(props, 'thumbLabel'),
    ticks: (0,reactivity_esm_bundler/* toRef */.Vh)(props, 'ticks'),
    tickSize,
    trackColor,
    trackContainerRef,
    trackFillColor,
    trackSize,
    vertical
  };
  (0,runtime_core_esm_bundler/* provide */.JJ)(VSliderSymbol, data);
  return data;
};
//# sourceMappingURL=slider.mjs.map
;// CONCATENATED MODULE: ./node_modules/vuetify/lib/components/VSlider/VSliderThumb.mjs

// Styles
 // Components



 // Directives

 // Composables

 // Utilities



const VSliderThumb = (0,defineComponent/* defineComponent */.a)({
  name: 'VSliderThumb',
  directives: {
    Ripple: ripple/* default */.Z
  },
  props: {
    focused: Boolean,
    max: {
      type: Number,
      required: true
    },
    min: {
      type: Number,
      required: true
    },
    modelValue: {
      type: Number,
      required: true
    },
    position: {
      type: Number,
      required: true
    }
  },
  emits: {
    'update:modelValue': v => true
  },

  setup(props, _ref) {
    let {
      slots,
      emit
    } = _ref;
    const slider = (0,runtime_core_esm_bundler/* inject */.f3)(VSliderSymbol);
    if (!slider) throw new Error('[Vuetify] v-slider-thumb must be used inside v-slider or v-range-slider');
    const {
      thumbColor,
      step,
      vertical,
      disabled,
      thumbSize,
      thumbLabel,
      direction,
      readonly,
      elevation,
      isReversed,
      horizontalDirection,
      mousePressed,
      decimals
    } = slider;
    const {
      textColorClasses,
      textColorStyles
    } = useTextColor(thumbColor);
    const {
      pageup,
      pagedown,
      end,
      home,
      left,
      right,
      down,
      up
    } = helpers/* keyValues */.ff;
    const relevantKeys = [pageup, pagedown, end, home, left, right, down, up];
    const multipliers = (0,runtime_core_esm_bundler/* computed */.Fl)(() => {
      if (step.value) return [1, 2, 3];else return [1, 5, 10];
    });

    function parseKeydown(e, value) {
      if (!relevantKeys.includes(e.key)) return;
      e.preventDefault();

      const _step = step.value || 0.1;

      const steps = (props.max - props.min) / _step;

      if ([left, right, down, up].includes(e.key)) {
        const increase = isReversed.value ? [left, up] : [right, up];
        const direction = increase.includes(e.key) ? 1 : -1;
        const multiplier = e.shiftKey ? 2 : e.ctrlKey ? 1 : 0;
        value = value + direction * _step * multipliers.value[multiplier];
      } else if (e.key === home) {
        value = props.min;
      } else if (e.key === end) {
        value = props.max;
      } else {
        const direction = e.key === pagedown ? 1 : -1;
        value = value - direction * _step * (steps > 100 ? steps / 10 : 10);
      }

      return Math.max(props.min, Math.min(props.max, value));
    }

    function onKeydown(e) {
      const newValue = parseKeydown(e, props.modelValue);
      newValue != null && emit('update:modelValue', newValue);
    }

    return () => {
      var _slots$thumbLabel, _slots$thumbLabel2;

      const positionPercentage = (0,helpers/* convertToUnit */.kb)(vertical.value ? 100 - props.position : props.position, '%');
      const inset = vertical.value ? 'block' : 'inline';
      const {
        elevationClasses
      } = useElevation((0,runtime_core_esm_bundler/* computed */.Fl)(() => !disabled.value ? elevation.value : undefined));
      return (0,runtime_core_esm_bundler/* createVNode */.Wm)("div", {
        "class": ['v-slider-thumb', {
          'v-slider-thumb--focused': props.focused,
          'v-slider-thumb--pressed': props.focused && mousePressed.value
        }],
        "style": {
          [`inset-${inset}-start`]: `calc(${positionPercentage} - var(--v-slider-thumb-size) / 2)`,
          '--v-slider-thumb-size': (0,helpers/* convertToUnit */.kb)(thumbSize.value),
          direction: !vertical.value ? horizontalDirection.value : undefined
        },
        "role": "slider",
        "tabindex": disabled.value ? -1 : 0,
        "aria-valuemin": props.min,
        "aria-valuemax": props.max,
        "aria-valuenow": props.modelValue,
        "aria-readonly": readonly.value,
        "aria-orientation": direction.value,
        "onKeydown": !readonly.value ? onKeydown : undefined
      }, [(0,runtime_core_esm_bundler/* createVNode */.Wm)("div", {
        "class": ['v-slider-thumb__surface', textColorClasses.value, elevationClasses.value],
        "style": { ...textColorStyles.value
        }
      }, null), (0,runtime_core_esm_bundler/* withDirectives */.wy)((0,runtime_core_esm_bundler/* createVNode */.Wm)("div", {
        "class": ['v-slider-thumb__ripple', textColorClasses.value],
        "style": textColorStyles.value
      }, null), [[(0,runtime_core_esm_bundler/* resolveDirective */.Q2)("ripple"), true, null, {
        circle: true,
        center: true
      }]]), (0,runtime_core_esm_bundler/* createVNode */.Wm)(VScaleTransition, {
        "origin": "bottom center"
      }, {
        default: () => [(0,runtime_core_esm_bundler/* withDirectives */.wy)((0,runtime_core_esm_bundler/* createVNode */.Wm)("div", {
          "class": "v-slider-thumb__label-container"
        }, [(0,runtime_core_esm_bundler/* createVNode */.Wm)("div", {
          "class": ['v-slider-thumb__label']
        }, [(0,runtime_core_esm_bundler/* createVNode */.Wm)("div", null, [(_slots$thumbLabel = (_slots$thumbLabel2 = slots['thumb-label']) == null ? void 0 : _slots$thumbLabel2.call(slots, {
          modelValue: props.modelValue
        })) != null ? _slots$thumbLabel : props.modelValue.toFixed(step.value ? decimals.value : 1)])])]), [[runtime_dom_esm_bundler/* vShow */.F8, thumbLabel.value && props.focused || thumbLabel.value === 'always']])]
      })]);
    };
  }

});
//# sourceMappingURL=VSliderThumb.mjs.map
;// CONCATENATED MODULE: ./node_modules/vuetify/lib/components/VSlider/VSliderTrack.css
// extracted by mini-css-extract-plugin

;// CONCATENATED MODULE: ./node_modules/vuetify/lib/components/VSlider/VSliderTrack.mjs

// Styles
 // Components

 // Composables


 // Utilities



const VSliderTrack = (0,defineComponent/* defineComponent */.a)({
  name: 'VSliderTrack',
  props: {
    start: {
      type: Number,
      required: true
    },
    stop: {
      type: Number,
      required: true
    }
  },
  emits: {},

  setup(props, _ref) {
    let {
      slots
    } = _ref;
    const slider = (0,runtime_core_esm_bundler/* inject */.f3)(VSliderSymbol);
    if (!slider) throw new Error('[Vuetify] v-slider-track must be inside v-slider or v-range-slider');
    const {
      trackColor,
      trackFillColor,
      vertical,
      tickSize,
      showTicks,
      trackSize,
      color,
      rounded,
      parsedTicks,
      horizontalDirection
    } = slider;
    const {
      roundedClasses
    } = useRounded(rounded);
    const {
      backgroundColorClasses: trackFillColorClasses,
      backgroundColorStyles: trackFillColorStyles
    } = useBackgroundColor(trackFillColor);
    const {
      backgroundColorClasses: trackColorClasses,
      backgroundColorStyles: trackColorStyles
    } = useBackgroundColor(trackColor);
    const startDir = (0,runtime_core_esm_bundler/* computed */.Fl)(() => `inset-${vertical.value ? 'block-end' : 'inline-start'}`);
    const endDir = (0,runtime_core_esm_bundler/* computed */.Fl)(() => vertical.value ? 'height' : 'width');
    const backgroundStyles = (0,runtime_core_esm_bundler/* computed */.Fl)(() => {
      return {
        [startDir.value]: '0%',
        [endDir.value]: '100%'
      };
    });
    const trackFillWidth = (0,runtime_core_esm_bundler/* computed */.Fl)(() => props.stop - props.start);
    const trackFillStyles = (0,runtime_core_esm_bundler/* computed */.Fl)(() => {
      return {
        [startDir.value]: (0,helpers/* convertToUnit */.kb)(props.start, '%'),
        [endDir.value]: (0,helpers/* convertToUnit */.kb)(trackFillWidth.value, '%')
      };
    });
    const computedTicks = (0,runtime_core_esm_bundler/* computed */.Fl)(() => {
      const ticks = vertical.value ? parsedTicks.value.slice().reverse() : parsedTicks.value;
      return ticks.map((tick, index) => {
        var _slots$tickLabel, _slots$tickLabel2;

        const directionProperty = vertical.value ? 'bottom' : 'margin-inline-start';
        return (0,runtime_core_esm_bundler/* createVNode */.Wm)("div", {
          "key": tick.value,
          "class": ['v-slider-track__tick', {
            'v-slider-track__tick--filled': tick.position >= props.start && tick.position <= props.stop
          }],
          "style": {
            [directionProperty]: tick.position > 0 && tick.position < 100 && (0,helpers/* convertToUnit */.kb)(tick.position, '%')
          }
        }, [(tick.label || slots['tick-label']) && (0,runtime_core_esm_bundler/* createVNode */.Wm)("div", {
          "class": "v-slider-track__tick-label"
        }, [(_slots$tickLabel = (_slots$tickLabel2 = slots['tick-label']) == null ? void 0 : _slots$tickLabel2.call(slots, {
          tick,
          index
        })) != null ? _slots$tickLabel : tick.label])]);
      });
    });
    return () => {
      return (0,runtime_core_esm_bundler/* createVNode */.Wm)("div", {
        "class": ['v-slider-track', roundedClasses.value],
        "style": {
          '--v-slider-track-size': (0,helpers/* convertToUnit */.kb)(trackSize.value),
          '--v-slider-tick-size': (0,helpers/* convertToUnit */.kb)(tickSize.value),
          direction: !vertical.value ? horizontalDirection.value : undefined
        }
      }, [(0,runtime_core_esm_bundler/* createVNode */.Wm)("div", {
        "class": ['v-slider-track__background', trackColorClasses.value, {
          'v-slider-track__background--opacity': !!color.value || !trackFillColor.value
        }],
        "style": { ...backgroundStyles.value,
          ...trackColorStyles.value
        }
      }, null), (0,runtime_core_esm_bundler/* createVNode */.Wm)("div", {
        "class": ['v-slider-track__fill', trackFillColorClasses.value],
        "style": { ...trackFillStyles.value,
          ...trackFillColorStyles.value
        }
      }, null), showTicks.value && (0,runtime_core_esm_bundler/* createVNode */.Wm)("div", {
        "class": ['v-slider-track__ticks', {
          'v-slider-track__ticks--always-show': showTicks.value === 'always'
        }]
      }, [computedTicks.value])]);
    };
  }

});
//# sourceMappingURL=VSliderTrack.mjs.map
;// CONCATENATED MODULE: ./node_modules/vuetify/lib/components/VSlider/VSlider.mjs

// Styles
 // Components



 // Composables



 // Helpers

 // Types



const VSlider = (0,defineComponent/* defineComponent */.a)({
  name: 'VSlider',
  props: { ...makeFocusProps(),
    ...makeSliderProps(),
    ...makeVInputProps(),
    modelValue: {
      type: [Number, String],
      default: 0
    }
  },
  emits: {
    'update:focused': value => true,
    'update:modelValue': v => true
  },

  setup(props, _ref) {
    let {
      attrs,
      slots
    } = _ref;
    const thumbContainerRef = (0,reactivity_esm_bundler/* ref */.iH)();
    const {
      min,
      max,
      mousePressed,
      roundValue,
      onSliderMousedown,
      onSliderTouchstart,
      trackContainerRef,
      position,
      hasLabels,
      readonly
    } = useSlider({
      props,
      // eslint-disable-next-line @typescript-eslint/no-use-before-define
      handleSliderMouseUp: newValue => model.value = roundValue(newValue),
      // eslint-disable-next-line @typescript-eslint/no-use-before-define
      handleMouseMove: newValue => model.value = roundValue(newValue),
      getActiveThumb: () => {
        var _thumbContainerRef$va;

        return (_thumbContainerRef$va = thumbContainerRef.value) == null ? void 0 : _thumbContainerRef$va.$el;
      }
    });
    const model = useProxiedModel(props, 'modelValue', undefined, v => {
      const value = typeof v === 'string' ? parseFloat(v) : v == null ? min.value : v;
      return roundValue(value);
    });
    const {
      isFocused,
      focus,
      blur
    } = useFocus(props);
    const trackStop = (0,runtime_core_esm_bundler/* computed */.Fl)(() => position(model.value));
    return () => {
      const [inputProps, _] = filterInputProps(props);
      return (0,runtime_core_esm_bundler/* createVNode */.Wm)(VInput, (0,runtime_core_esm_bundler/* mergeProps */.dG)({
        "class": ['v-slider', {
          'v-slider--has-labels': !!slots['tick-label'] || hasLabels.value,
          'v-slider--focused': isFocused.value,
          'v-slider--pressed': mousePressed.value,
          'v-slider--disabled': props.disabled
        }]
      }, inputProps, {
        "focused": isFocused.value
      }), { ...slots,
        default: _ref2 => {
          let {
            id
          } = _ref2;
          return (0,runtime_core_esm_bundler/* createVNode */.Wm)("div", {
            "class": "v-slider__container",
            "onMousedown": !readonly.value ? onSliderMousedown : undefined,
            "onTouchstartPassive": !readonly.value ? onSliderTouchstart : undefined
          }, [(0,runtime_core_esm_bundler/* createVNode */.Wm)("input", {
            "id": id.value,
            "name": props.name || id.value,
            "disabled": props.disabled,
            "readonly": props.readonly,
            "tabindex": "-1",
            "value": model.value
          }, null), (0,runtime_core_esm_bundler/* createVNode */.Wm)(VSliderTrack, {
            "ref": trackContainerRef,
            "start": 0,
            "stop": trackStop.value
          }, {
            'tick-label': slots['tick-label']
          }), (0,runtime_core_esm_bundler/* createVNode */.Wm)(VSliderThumb, {
            "ref": thumbContainerRef,
            "focused": isFocused.value,
            "min": min.value,
            "max": max.value,
            "modelValue": model.value,
            "onUpdate:modelValue": v => model.value = v,
            "position": trackStop.value,
            "elevation": props.elevation,
            "onFocus": focus,
            "onBlur": blur
          }, {
            'thumb-label': slots['thumb-label']
          })]);
        }
      });
    };
  }

});
//# sourceMappingURL=VSlider.mjs.map
;// CONCATENATED MODULE: ./node_modules/vuetify/lib/components/VColorPicker/util/index.mjs
var _rgba$inputs;

// Utilities
 // Types

function has(obj, key) {
  return key.every(k => obj.hasOwnProperty(k));
}

function parseColor(color) {
  var _hsva$a;

  if (!color) return null;
  let hsva = null;

  if (typeof color === 'string') {
    const hex = (0,colorUtils/* parseHex */.KQ)(color);
    hsva = (0,colorUtils/* HexToHSVA */.yt)(hex);
  }

  if (typeof color === 'object') {
    if (has(color, ['r', 'g', 'b'])) {
      hsva = (0,colorUtils/* RGBAtoHSVA */.Yq)(color);
    } else if (has(color, ['h', 's', 'l'])) {
      hsva = (0,colorUtils/* HSLAtoHSVA */.nk)(color);
    } else if (has(color, ['h', 's', 'v'])) {
      hsva = color;
    }
  }

  return hsva != null ? { ...hsva,
    a: (_hsva$a = hsva.a) != null ? _hsva$a : 1
  } : null;
}

function stripAlpha(color, stripAlpha) {
  if (stripAlpha) {
    const {
      a,
      ...rest
    } = color;
    return rest;
  }

  return color;
}

function extractColor(color, input) {
  if (input == null || typeof input === 'string') {
    const hex = (0,colorUtils/* HSVAtoHex */.n0)(color);
    if (color.a === 1) return hex.slice(0, 7);else return hex;
  }

  if (typeof input === 'object') {
    let converted;
    if (has(input, ['r', 'g', 'b'])) converted = (0,colorUtils/* HSVAtoRGBA */.UJ)(color);else if (has(input, ['h', 's', 'l'])) converted = (0,colorUtils/* HSVAtoHSLA */.mM)(color);else if (has(input, ['h', 's', 'v'])) converted = color;
    return stripAlpha(converted, !has(input, ['a']));
  }

  return color;
}
function hasAlpha(color) {
  if (!color) return false;

  if (typeof color === 'string') {
    return color.length > 7;
  }

  if (typeof color === 'object') {
    return has(color, ['a']) || has(color, ['alpha']);
  }

  return false;
}
const nullColor = {
  h: 0,
  s: 0,
  v: 1,
  a: 1
};
const rgba = {
  inputProps: {
    type: 'number',
    min: 0
  },
  inputs: [{
    label: 'R',
    max: 255,
    step: 1,
    getValue: c => Math.round(c.r),
    getColor: (c, v) => ({ ...c,
      r: Number(v)
    })
  }, {
    label: 'G',
    max: 255,
    step: 1,
    getValue: c => Math.round(c.g),
    getColor: (c, v) => ({ ...c,
      g: Number(v)
    })
  }, {
    label: 'B',
    max: 255,
    step: 1,
    getValue: c => Math.round(c.b),
    getColor: (c, v) => ({ ...c,
      b: Number(v)
    })
  }, {
    label: 'A',
    max: 1,
    step: 0.01,
    getValue: c => Math.round(c.a * 100) / 100,
    getColor: (c, v) => ({ ...c,
      a: Number(v)
    })
  }],
  to: colorUtils/* HSVAtoRGBA */.UJ,
  from: colorUtils/* RGBAtoHSVA */.Yq
};
const rgb = { ...rgba,
  inputs: (_rgba$inputs = rgba.inputs) == null ? void 0 : _rgba$inputs.slice(0, 3)
};
const hsla = {
  inputProps: {
    type: 'number',
    min: 0
  },
  inputs: [{
    label: 'H',
    max: 360,
    step: 1,
    getValue: c => Math.round(c.h),
    getColor: (c, v) => ({ ...c,
      h: Number(v)
    })
  }, {
    label: 'S',
    max: 1,
    step: 0.01,
    getValue: c => Math.round(c.s * 100) / 100,
    getColor: (c, v) => ({ ...c,
      s: Number(v)
    })
  }, {
    label: 'L',
    max: 1,
    step: 0.01,
    getValue: c => Math.round(c.l * 100) / 100,
    getColor: (c, v) => ({ ...c,
      l: Number(v)
    })
  }, {
    label: 'A',
    max: 1,
    step: 0.01,
    getValue: c => Math.round(c.a * 100) / 100,
    getColor: (c, v) => ({ ...c,
      a: Number(v)
    })
  }],
  to: colorUtils/* HSVAtoHSLA */.mM,
  from: colorUtils/* HSLAtoHSVA */.nk
};
const hsl = { ...hsla,
  inputs: hsla.inputs.slice(0, 3)
};
const hexa = {
  inputProps: {
    type: 'text'
  },
  inputs: [{
    label: 'HEXA',
    getValue: c => c,
    getColor: (c, v) => v
  }],
  to: colorUtils/* HSVAtoHex */.n0,
  from: colorUtils/* HexToHSVA */.yt
};
const hex = { ...hexa,
  inputs: [{
    label: 'HEX',
    getValue: c => c.slice(0, 7),
    getColor: (c, v) => v
  }]
};
const modes = {
  rgb,
  rgba,
  hsl,
  hsla,
  hex,
  hexa
};
//# sourceMappingURL=index.mjs.map
;// CONCATENATED MODULE: ./node_modules/vuetify/lib/components/VColorPicker/VColorPickerPreview.mjs

// Styles
 // Components

 // Utilities


 // Types

const VColorPickerPreview = (0,defineComponent/* defineComponent */.a)({
  name: 'VColorPickerPreview',
  props: {
    color: {
      type: Object
    },
    disabled: Boolean,
    hideAlpha: Boolean
  },
  emits: {
    'update:color': color => true
  },

  setup(props, _ref) {
    let {
      emit
    } = _ref;
    return () => {
      var _props$color, _props$color2, _props$color4;

      return (0,runtime_core_esm_bundler/* createVNode */.Wm)("div", {
        "class": ['v-color-picker-preview', {
          'v-color-picker-preview--hide-alpha': props.hideAlpha
        }]
      }, [(0,runtime_core_esm_bundler/* createVNode */.Wm)("div", {
        "class": "v-color-picker-preview__dot"
      }, [(0,runtime_core_esm_bundler/* createVNode */.Wm)("div", {
        "style": {
          background: (0,colorUtils/* HSVAtoCSS */.eC)((_props$color = props.color) != null ? _props$color : nullColor)
        }
      }, null)]), (0,runtime_core_esm_bundler/* createVNode */.Wm)("div", {
        "class": "v-color-picker-preview__sliders"
      }, [(0,runtime_core_esm_bundler/* createVNode */.Wm)(VSlider, {
        "class": "v-color-picker-preview__track v-color-picker-preview__hue",
        "modelValue": (_props$color2 = props.color) == null ? void 0 : _props$color2.h,
        "onUpdate:modelValue": h => {
          var _props$color3;

          return emit('update:color', { ...((_props$color3 = props.color) != null ? _props$color3 : nullColor),
            h
          });
        },
        "step": 0,
        "min": 0,
        "max": 360,
        "disabled": props.disabled,
        "thumbSize": 14,
        "trackSize": 8,
        "trackFillColor": "white",
        "hideDetails": true
      }, null), !props.hideAlpha && (0,runtime_core_esm_bundler/* createVNode */.Wm)(VSlider, {
        "class": "v-color-picker-preview__track v-color-picker-preview__alpha",
        "modelValue": (_props$color4 = props.color) == null ? void 0 : _props$color4.a,
        "onUpdate:modelValue": a => {
          var _props$color5;

          return emit('update:color', { ...((_props$color5 = props.color) != null ? _props$color5 : nullColor),
            a
          });
        },
        "step": 0,
        "min": 0,
        "max": 1,
        "disabled": props.disabled,
        "thumbSize": 14,
        "trackSize": 8,
        "trackFillColor": "white",
        "hideDetails": true
      }, null)])]);
    };
  }

});
//# sourceMappingURL=VColorPickerPreview.mjs.map
;// CONCATENATED MODULE: ./node_modules/vuetify/lib/components/VColorPicker/VColorPickerCanvas.css
// extracted by mini-css-extract-plugin

;// CONCATENATED MODULE: ./node_modules/vuetify/lib/components/VColorPicker/VColorPickerCanvas.mjs

// Styles
 // Utilities


 // Types

const VColorPickerCanvas = (0,defineComponent/* defineComponent */.a)({
  name: 'VColorPickerCanvas',
  props: {
    color: {
      type: Object
    },
    disabled: Boolean,
    dotSize: {
      type: [Number, String],
      default: 10
    },
    height: {
      type: [Number, String],
      default: 150
    },
    width: {
      type: [Number, String],
      default: 300
    }
  },
  emits: {
    'update:color': color => true,
    'update:position': hue => true
  },

  setup(props, _ref) {
    let {
      emit
    } = _ref;
    const isInteracting = (0,reactivity_esm_bundler/* ref */.iH)(false);
    const isOutsideUpdate = (0,reactivity_esm_bundler/* ref */.iH)(false);
    const dotPosition = (0,reactivity_esm_bundler/* ref */.iH)({
      x: 0,
      y: 0
    });
    const dotStyles = (0,runtime_core_esm_bundler/* computed */.Fl)(() => {
      const {
        x,
        y
      } = dotPosition.value;
      const radius = parseInt(props.dotSize, 10) / 2;
      return {
        width: (0,helpers/* convertToUnit */.kb)(props.dotSize),
        height: (0,helpers/* convertToUnit */.kb)(props.dotSize),
        transform: `translate(${(0,helpers/* convertToUnit */.kb)(x - radius)}, ${(0,helpers/* convertToUnit */.kb)(y - radius)})`
      };
    });
    const canvasRef = (0,reactivity_esm_bundler/* ref */.iH)();

    function updateDotPosition(x, y, rect) {
      const {
        left,
        top,
        width,
        height
      } = rect;
      dotPosition.value = {
        x: (0,helpers/* clamp */.uZ)(x - left, 0, width),
        y: (0,helpers/* clamp */.uZ)(y - top, 0, height)
      };
    }

    function handleClick(e) {
      if (props.disabled || !canvasRef.value) return;
      updateDotPosition(e.clientX, e.clientY, canvasRef.value.getBoundingClientRect());
    }

    function handleMouseDown(e) {
      // To prevent selection while moving cursor
      e.preventDefault();
      if (props.disabled) return;
      isInteracting.value = true;
      window.addEventListener('mousemove', handleMouseMove);
      window.addEventListener('mouseup', handleMouseUp);
      window.addEventListener('touchmove', handleMouseMove);
      window.addEventListener('touchend', handleMouseUp);
    }

    function handleMouseMove(e) {
      if (props.disabled || !canvasRef.value) return;
      isInteracting.value = true;
      const coords = (0,helpers/* getEventCoordinates */.DC)(e);
      updateDotPosition(coords.clientX, coords.clientY, canvasRef.value.getBoundingClientRect());
    }

    function handleMouseUp() {
      window.removeEventListener('mousemove', handleMouseMove);
      window.removeEventListener('mouseup', handleMouseUp);
      window.removeEventListener('touchmove', handleMouseMove);
      window.removeEventListener('touchend', handleMouseUp);
    }

    (0,runtime_core_esm_bundler/* watch */.YP)(dotPosition, () => {
      var _props$color$h, _props$color, _props$color$a, _props$color2;

      if (isOutsideUpdate.value) {
        isOutsideUpdate.value = false;
        return;
      }

      if (!canvasRef.value) return;
      const {
        width,
        height
      } = canvasRef.value.getBoundingClientRect();
      const {
        x,
        y
      } = dotPosition.value;
      emit('update:color', {
        h: (_props$color$h = (_props$color = props.color) == null ? void 0 : _props$color.h) != null ? _props$color$h : 0,
        s: (0,helpers/* clamp */.uZ)(x, 0, width) / width,
        v: 1 - (0,helpers/* clamp */.uZ)(y, 0, height) / height,
        a: (_props$color$a = (_props$color2 = props.color) == null ? void 0 : _props$color2.a) != null ? _props$color$a : 1
      });
    });

    function updateCanvas() {
      var _props$color$h2, _props$color3;

      if (!canvasRef.value) return;
      const canvas = canvasRef.value;
      const ctx = canvas.getContext('2d');
      if (!ctx) return;
      const saturationGradient = ctx.createLinearGradient(0, 0, canvas.width, 0);
      saturationGradient.addColorStop(0, 'hsla(0, 0%, 100%, 1)'); // white

      saturationGradient.addColorStop(1, `hsla(${(_props$color$h2 = (_props$color3 = props.color) == null ? void 0 : _props$color3.h) != null ? _props$color$h2 : 0}, 100%, 50%, 1)`);
      ctx.fillStyle = saturationGradient;
      ctx.fillRect(0, 0, canvas.width, canvas.height);
      const valueGradient = ctx.createLinearGradient(0, 0, 0, canvas.height);
      valueGradient.addColorStop(0, 'hsla(0, 0%, 100%, 0)'); // transparent

      valueGradient.addColorStop(1, 'hsla(0, 0%, 0%, 1)'); // black

      ctx.fillStyle = valueGradient;
      ctx.fillRect(0, 0, canvas.width, canvas.height);
    }

    (0,runtime_core_esm_bundler/* watch */.YP)(() => {
      var _props$color4;

      return (_props$color4 = props.color) == null ? void 0 : _props$color4.h;
    }, updateCanvas, {
      immediate: true
    });
    (0,runtime_core_esm_bundler/* watch */.YP)(() => props.color, () => {
      if (isInteracting.value) {
        isInteracting.value = false;
        return;
      }

      if (!props.color) return;
      isOutsideUpdate.value = true;
      dotPosition.value = {
        x: props.color.s * parseInt(props.width, 10),
        y: (1 - props.color.v) * parseInt(props.height, 10)
      };
    }, {
      deep: true,
      immediate: true
    });
    (0,runtime_core_esm_bundler/* onMounted */.bv)(() => updateCanvas());
    return () => (0,runtime_core_esm_bundler/* createVNode */.Wm)("div", {
      "class": "v-color-picker-canvas",
      "style": {
        width: (0,helpers/* convertToUnit */.kb)(props.width),
        height: (0,helpers/* convertToUnit */.kb)(props.height)
      },
      "onClick": handleClick,
      "onMousedown": handleMouseDown,
      "onTouchstart": handleMouseDown
    }, [(0,runtime_core_esm_bundler/* createVNode */.Wm)("canvas", {
      "ref": canvasRef,
      "width": props.width,
      "height": props.height
    }, null), (0,runtime_core_esm_bundler/* createVNode */.Wm)("div", {
      "class": ['v-color-picker-canvas__dot', {
        'v-color-picker-canvas__dot--disabled': props.disabled
      }],
      "style": dotStyles.value
    }, null)]);
  }

});
//# sourceMappingURL=VColorPickerCanvas.mjs.map
;// CONCATENATED MODULE: ./node_modules/vuetify/lib/components/VColorPicker/VColorPickerEdit.css
// extracted by mini-css-extract-plugin

;// CONCATENATED MODULE: ./node_modules/vuetify/lib/components/VColorPicker/VColorPickerEdit.mjs

// Styles
 // Components

 // Utilities



 // Types

const VColorPickerInput = _ref => {
  let {
    label,
    ...rest
  } = _ref;
  return (0,runtime_core_esm_bundler/* createVNode */.Wm)("div", {
    "class": "v-color-picker-edit__input"
  }, [(0,runtime_core_esm_bundler/* createVNode */.Wm)("input", rest, null), (0,runtime_core_esm_bundler/* createVNode */.Wm)("span", null, [label])]);
};

const VColorPickerEdit = (0,defineComponent/* defineComponent */.a)({
  name: 'VColorPickerEdit',
  props: {
    color: Object,
    disabled: Boolean,
    mode: {
      type: String,
      default: 'rgba',
      validator: v => Object.keys(modes).includes(v)
    },
    modes: {
      type: Array,
      default: () => Object.keys(modes),
      validator: v => Array.isArray(v) && v.every(m => Object.keys(modes).includes(m))
    }
  },
  emits: {
    'update:color': color => true,
    'update:mode': mode => true
  },

  setup(props, _ref2) {
    let {
      emit
    } = _ref2;
    const enabledModes = (0,runtime_core_esm_bundler/* computed */.Fl)(() => {
      return props.modes.map(key => ({ ...modes[key],
        name: key
      }));
    });
    const inputs = (0,runtime_core_esm_bundler/* computed */.Fl)(() => {
      var _mode$inputs;

      const mode = enabledModes.value.find(m => m.name === props.mode);
      if (!mode) return [];
      const color = props.color ? mode.to(props.color) : {};
      return (_mode$inputs = mode.inputs) == null ? void 0 : _mode$inputs.map(_ref3 => {
        let {
          getValue,
          getColor,
          ...inputProps
        } = _ref3;
        return { ...mode.inputProps,
          ...inputProps,
          disabled: props.disabled,
          value: getValue(color),
          onChange: e => {
            const target = e.target;
            if (!target) return;
            emit('update:color', mode.from(getColor(color, target.value)));
          }
        };
      });
    });
    return () => {
      var _inputs$value;

      return (0,runtime_core_esm_bundler/* createVNode */.Wm)("div", {
        "class": "v-color-picker-edit"
      }, [(_inputs$value = inputs.value) == null ? void 0 : _inputs$value.map(props => (0,runtime_core_esm_bundler/* createVNode */.Wm)(VColorPickerInput, props, null)), enabledModes.value.length > 1 && (0,runtime_core_esm_bundler/* createVNode */.Wm)(VBtn, {
        "icon": "$unfold",
        "size": "x-small",
        "variant": "plain",
        "onClick": () => {
          const mi = enabledModes.value.findIndex(m => m.name === props.mode);
          emit('update:mode', enabledModes.value[(mi + 1) % enabledModes.value.length].name);
        }
      }, null)]);
    };
  }

});
//# sourceMappingURL=VColorPickerEdit.mjs.map
;// CONCATENATED MODULE: ./node_modules/vuetify/lib/components/VColorPicker/VColorPickerSwatches.css
// extracted by mini-css-extract-plugin

;// CONCATENATED MODULE: ./node_modules/vuetify/lib/util/colors.mjs
const red = Object.freeze({
  base: '#f44336',
  lighten5: '#ffebee',
  lighten4: '#ffcdd2',
  lighten3: '#ef9a9a',
  lighten2: '#e57373',
  lighten1: '#ef5350',
  darken1: '#e53935',
  darken2: '#d32f2f',
  darken3: '#c62828',
  darken4: '#b71c1c',
  accent1: '#ff8a80',
  accent2: '#ff5252',
  accent3: '#ff1744',
  accent4: '#d50000'
});
const pink = Object.freeze({
  base: '#e91e63',
  lighten5: '#fce4ec',
  lighten4: '#f8bbd0',
  lighten3: '#f48fb1',
  lighten2: '#f06292',
  lighten1: '#ec407a',
  darken1: '#d81b60',
  darken2: '#c2185b',
  darken3: '#ad1457',
  darken4: '#880e4f',
  accent1: '#ff80ab',
  accent2: '#ff4081',
  accent3: '#f50057',
  accent4: '#c51162'
});
const purple = Object.freeze({
  base: '#9c27b0',
  lighten5: '#f3e5f5',
  lighten4: '#e1bee7',
  lighten3: '#ce93d8',
  lighten2: '#ba68c8',
  lighten1: '#ab47bc',
  darken1: '#8e24aa',
  darken2: '#7b1fa2',
  darken3: '#6a1b9a',
  darken4: '#4a148c',
  accent1: '#ea80fc',
  accent2: '#e040fb',
  accent3: '#d500f9',
  accent4: '#aa00ff'
});
const deepPurple = Object.freeze({
  base: '#673ab7',
  lighten5: '#ede7f6',
  lighten4: '#d1c4e9',
  lighten3: '#b39ddb',
  lighten2: '#9575cd',
  lighten1: '#7e57c2',
  darken1: '#5e35b1',
  darken2: '#512da8',
  darken3: '#4527a0',
  darken4: '#311b92',
  accent1: '#b388ff',
  accent2: '#7c4dff',
  accent3: '#651fff',
  accent4: '#6200ea'
});
const indigo = Object.freeze({
  base: '#3f51b5',
  lighten5: '#e8eaf6',
  lighten4: '#c5cae9',
  lighten3: '#9fa8da',
  lighten2: '#7986cb',
  lighten1: '#5c6bc0',
  darken1: '#3949ab',
  darken2: '#303f9f',
  darken3: '#283593',
  darken4: '#1a237e',
  accent1: '#8c9eff',
  accent2: '#536dfe',
  accent3: '#3d5afe',
  accent4: '#304ffe'
});
const blue = Object.freeze({
  base: '#2196f3',
  lighten5: '#e3f2fd',
  lighten4: '#bbdefb',
  lighten3: '#90caf9',
  lighten2: '#64b5f6',
  lighten1: '#42a5f5',
  darken1: '#1e88e5',
  darken2: '#1976d2',
  darken3: '#1565c0',
  darken4: '#0d47a1',
  accent1: '#82b1ff',
  accent2: '#448aff',
  accent3: '#2979ff',
  accent4: '#2962ff'
});
const lightBlue = Object.freeze({
  base: '#03a9f4',
  lighten5: '#e1f5fe',
  lighten4: '#b3e5fc',
  lighten3: '#81d4fa',
  lighten2: '#4fc3f7',
  lighten1: '#29b6f6',
  darken1: '#039be5',
  darken2: '#0288d1',
  darken3: '#0277bd',
  darken4: '#01579b',
  accent1: '#80d8ff',
  accent2: '#40c4ff',
  accent3: '#00b0ff',
  accent4: '#0091ea'
});
const cyan = Object.freeze({
  base: '#00bcd4',
  lighten5: '#e0f7fa',
  lighten4: '#b2ebf2',
  lighten3: '#80deea',
  lighten2: '#4dd0e1',
  lighten1: '#26c6da',
  darken1: '#00acc1',
  darken2: '#0097a7',
  darken3: '#00838f',
  darken4: '#006064',
  accent1: '#84ffff',
  accent2: '#18ffff',
  accent3: '#00e5ff',
  accent4: '#00b8d4'
});
const teal = Object.freeze({
  base: '#009688',
  lighten5: '#e0f2f1',
  lighten4: '#b2dfdb',
  lighten3: '#80cbc4',
  lighten2: '#4db6ac',
  lighten1: '#26a69a',
  darken1: '#00897b',
  darken2: '#00796b',
  darken3: '#00695c',
  darken4: '#004d40',
  accent1: '#a7ffeb',
  accent2: '#64ffda',
  accent3: '#1de9b6',
  accent4: '#00bfa5'
});
const green = Object.freeze({
  base: '#4caf50',
  lighten5: '#e8f5e9',
  lighten4: '#c8e6c9',
  lighten3: '#a5d6a7',
  lighten2: '#81c784',
  lighten1: '#66bb6a',
  darken1: '#43a047',
  darken2: '#388e3c',
  darken3: '#2e7d32',
  darken4: '#1b5e20',
  accent1: '#b9f6ca',
  accent2: '#69f0ae',
  accent3: '#00e676',
  accent4: '#00c853'
});
const lightGreen = Object.freeze({
  base: '#8bc34a',
  lighten5: '#f1f8e9',
  lighten4: '#dcedc8',
  lighten3: '#c5e1a5',
  lighten2: '#aed581',
  lighten1: '#9ccc65',
  darken1: '#7cb342',
  darken2: '#689f38',
  darken3: '#558b2f',
  darken4: '#33691e',
  accent1: '#ccff90',
  accent2: '#b2ff59',
  accent3: '#76ff03',
  accent4: '#64dd17'
});
const lime = Object.freeze({
  base: '#cddc39',
  lighten5: '#f9fbe7',
  lighten4: '#f0f4c3',
  lighten3: '#e6ee9c',
  lighten2: '#dce775',
  lighten1: '#d4e157',
  darken1: '#c0ca33',
  darken2: '#afb42b',
  darken3: '#9e9d24',
  darken4: '#827717',
  accent1: '#f4ff81',
  accent2: '#eeff41',
  accent3: '#c6ff00',
  accent4: '#aeea00'
});
const yellow = Object.freeze({
  base: '#ffeb3b',
  lighten5: '#fffde7',
  lighten4: '#fff9c4',
  lighten3: '#fff59d',
  lighten2: '#fff176',
  lighten1: '#ffee58',
  darken1: '#fdd835',
  darken2: '#fbc02d',
  darken3: '#f9a825',
  darken4: '#f57f17',
  accent1: '#ffff8d',
  accent2: '#ffff00',
  accent3: '#ffea00',
  accent4: '#ffd600'
});
const amber = Object.freeze({
  base: '#ffc107',
  lighten5: '#fff8e1',
  lighten4: '#ffecb3',
  lighten3: '#ffe082',
  lighten2: '#ffd54f',
  lighten1: '#ffca28',
  darken1: '#ffb300',
  darken2: '#ffa000',
  darken3: '#ff8f00',
  darken4: '#ff6f00',
  accent1: '#ffe57f',
  accent2: '#ffd740',
  accent3: '#ffc400',
  accent4: '#ffab00'
});
const orange = Object.freeze({
  base: '#ff9800',
  lighten5: '#fff3e0',
  lighten4: '#ffe0b2',
  lighten3: '#ffcc80',
  lighten2: '#ffb74d',
  lighten1: '#ffa726',
  darken1: '#fb8c00',
  darken2: '#f57c00',
  darken3: '#ef6c00',
  darken4: '#e65100',
  accent1: '#ffd180',
  accent2: '#ffab40',
  accent3: '#ff9100',
  accent4: '#ff6d00'
});
const deepOrange = Object.freeze({
  base: '#ff5722',
  lighten5: '#fbe9e7',
  lighten4: '#ffccbc',
  lighten3: '#ffab91',
  lighten2: '#ff8a65',
  lighten1: '#ff7043',
  darken1: '#f4511e',
  darken2: '#e64a19',
  darken3: '#d84315',
  darken4: '#bf360c',
  accent1: '#ff9e80',
  accent2: '#ff6e40',
  accent3: '#ff3d00',
  accent4: '#dd2c00'
});
const brown = Object.freeze({
  base: '#795548',
  lighten5: '#efebe9',
  lighten4: '#d7ccc8',
  lighten3: '#bcaaa4',
  lighten2: '#a1887f',
  lighten1: '#8d6e63',
  darken1: '#6d4c41',
  darken2: '#5d4037',
  darken3: '#4e342e',
  darken4: '#3e2723'
});
const blueGrey = Object.freeze({
  base: '#607d8b',
  lighten5: '#eceff1',
  lighten4: '#cfd8dc',
  lighten3: '#b0bec5',
  lighten2: '#90a4ae',
  lighten1: '#78909c',
  darken1: '#546e7a',
  darken2: '#455a64',
  darken3: '#37474f',
  darken4: '#263238'
});
const grey = Object.freeze({
  base: '#9e9e9e',
  lighten5: '#fafafa',
  lighten4: '#f5f5f5',
  lighten3: '#eeeeee',
  lighten2: '#e0e0e0',
  lighten1: '#bdbdbd',
  darken1: '#757575',
  darken2: '#616161',
  darken3: '#424242',
  darken4: '#212121'
});
const shades = Object.freeze({
  black: '#000000',
  white: '#ffffff',
  transparent: 'transparent'
});
/* harmony default export */ const colors = (Object.freeze({
  red,
  pink,
  purple,
  deepPurple,
  indigo,
  blue,
  lightBlue,
  cyan,
  teal,
  green,
  lightGreen,
  lime,
  yellow,
  amber,
  orange,
  deepOrange,
  brown,
  blueGrey,
  grey,
  shades
}));
//# sourceMappingURL=colors.mjs.map
;// CONCATENATED MODULE: ./node_modules/vuetify/lib/components/VColorPicker/VColorPickerSwatches.mjs

// Styles
 // Components

 // Utilities



 // Types

function parseDefaultColors(colors) {
  return Object.keys(colors).map(key => {
    const color = colors[key];
    return color.base ? [color.base, color.darken4, color.darken3, color.darken2, color.darken1, color.lighten1, color.lighten2, color.lighten3, color.lighten4, color.lighten5] : [color.black, color.white, color.transparent];
  });
}

const VColorPickerSwatches = (0,defineComponent/* defineComponent */.a)({
  name: 'VColorPickerSwatches',
  props: {
    swatches: {
      type: Array,
      default: () => parseDefaultColors(colors)
    },
    disabled: Boolean,
    color: Object,
    maxHeight: [Number, String]
  },
  emits: {
    'update:color': color => true
  },

  setup(props, _ref) {
    let {
      emit
    } = _ref;
    return () => (0,runtime_core_esm_bundler/* createVNode */.Wm)("div", {
      "class": "v-color-picker-swatches",
      "style": {
        maxHeight: (0,helpers/* convertToUnit */.kb)(props.maxHeight)
      }
    }, [(0,runtime_core_esm_bundler/* createVNode */.Wm)("div", null, [props.swatches.map(swatch => (0,runtime_core_esm_bundler/* createVNode */.Wm)("div", {
      "class": "v-color-picker-swatches__swatch"
    }, [swatch.map(color => {
      const hsva = parseColor(color);
      return (0,runtime_core_esm_bundler/* createVNode */.Wm)("div", {
        "class": "v-color-picker-swatches__color",
        "onClick": () => hsva && emit('update:color', hsva)
      }, [(0,runtime_core_esm_bundler/* createVNode */.Wm)("div", {
        "style": {
          background: color
        }
      }, [props.color && (0,helpers/* deepEqual */.vZ)(props.color, hsva) ? (0,runtime_core_esm_bundler/* createVNode */.Wm)(VIcon, {
        "size": "x-small",
        "icon": "$success",
        "color": (0,colorUtils/* getContrast */.mj)(color, '#FFFFFF') > 2 ? 'white' : 'black'
      }, null) : undefined])]);
    })]))])]);
  }

});
//# sourceMappingURL=VColorPickerSwatches.mjs.map
;// CONCATENATED MODULE: ./node_modules/vuetify/lib/components/VColorPicker/VColorPicker.mjs

// Styles
 // Components





 // Composables




 // Utilities



 // Types

const VColorPicker = (0,defineComponent/* defineComponent */.a)({
  name: 'VColorPicker',
  inheritAttrs: false,
  props: {
    canvasHeight: {
      type: [String, Number],
      default: 150
    },
    disabled: Boolean,
    dotSize: {
      type: [Number, String],
      default: 10
    },
    hideCanvas: Boolean,
    hideSliders: Boolean,
    hideInputs: Boolean,
    mode: {
      type: String,
      default: 'rgba',
      validator: v => Object.keys(modes).includes(v)
    },
    modes: {
      type: Array,
      default: () => Object.keys(modes),
      validator: v => Array.isArray(v) && v.every(m => Object.keys(modes).includes(m))
    },
    showSwatches: Boolean,
    swatches: Array,
    swatchesMaxHeight: {
      type: [Number, String],
      default: 150
    },
    modelValue: {
      type: [Object, String]
    },
    width: {
      type: [Number, String],
      default: 300
    },
    ...makeElevationProps(),
    ...makeRoundedProps(),
    ...(0,composables_theme/* makeThemeProps */.x$)()
  },
  emits: {
    'update:modelValue': color => true,
    'update:mode': mode => true
  },

  setup(props) {
    const mode = useProxiedModel(props, 'mode');
    const lastPickedColor = (0,reactivity_esm_bundler/* ref */.iH)(null);
    const currentColor = useProxiedModel(props, 'modelValue', undefined, v => {
      let c = parseColor(v);
      if (!c) return null;

      if (lastPickedColor.value) {
        c = { ...c,
          h: lastPickedColor.value.h
        };
        lastPickedColor.value = null;
      }

      return c;
    }, v => {
      if (!v) return null;
      return extractColor(v, props.modelValue);
    });

    const updateColor = hsva => {
      currentColor.value = hsva;
      lastPickedColor.value = hsva;
    };

    (0,runtime_core_esm_bundler/* onMounted */.bv)(() => {
      if (!props.modes.includes(mode.value)) mode.value = props.modes[0];
    });
    return () => {
      var _currentColor$value;

      return (0,runtime_core_esm_bundler/* createVNode */.Wm)(VSheet, {
        "rounded": props.rounded,
        "elevation": props.elevation,
        "theme": props.theme,
        "class": ['v-color-picker'],
        "style": {
          '--v-color-picker-color-hsv': (0,colorUtils/* HSVAtoCSS */.eC)({ ...((_currentColor$value = currentColor.value) != null ? _currentColor$value : nullColor),
            a: 1
          })
        },
        "maxWidth": props.width
      }, {
        default: () => [!props.hideCanvas && (0,runtime_core_esm_bundler/* createVNode */.Wm)(VColorPickerCanvas, {
          "color": currentColor.value,
          "onUpdate:color": updateColor,
          "disabled": props.disabled,
          "dotSize": props.dotSize,
          "width": props.width,
          "height": props.canvasHeight
        }, null), (!props.hideSliders || !props.hideInputs) && (0,runtime_core_esm_bundler/* createVNode */.Wm)("div", {
          "class": "v-color-picker__controls"
        }, [!props.hideSliders && (0,runtime_core_esm_bundler/* createVNode */.Wm)(VColorPickerPreview, {
          "color": currentColor.value,
          "onUpdate:color": updateColor,
          "hideAlpha": !mode.value.endsWith('a'),
          "disabled": props.disabled
        }, null), !props.hideInputs && (0,runtime_core_esm_bundler/* createVNode */.Wm)(VColorPickerEdit, {
          "modes": props.modes,
          "mode": mode.value,
          "onUpdate:mode": m => mode.value = m,
          "color": currentColor.value,
          "onUpdate:color": updateColor,
          "disabled": props.disabled
        }, null)]), props.showSwatches && (0,runtime_core_esm_bundler/* createVNode */.Wm)(VColorPickerSwatches, {
          "color": currentColor.value,
          "onUpdate:color": updateColor,
          "maxHeight": props.swatchesMaxHeight,
          "swatches": props.swatches,
          "disabled": props.disabled
        }, null)]
      });
    };
  }

});
//# sourceMappingURL=VColorPicker.mjs.map
;// CONCATENATED MODULE: ./node_modules/vuetify/lib/components/VColorPicker/index.mjs

//# sourceMappingURL=index.mjs.map
;// CONCATENATED MODULE: ./node_modules/vuetify/lib/components/VCombobox/VCombobox.css
// extracted by mini-css-extract-plugin

;// CONCATENATED MODULE: ./node_modules/vuetify/lib/components/VCombobox/VCombobox.mjs

// Styles
 // Components






 // Composables







 // Utility


 // Types

function VCombobox_highlightResult(text, matches, length) {
  if (Array.isArray(matches)) throw new Error('Multiple matches is not implemented');
  return typeof matches === 'number' && ~matches ? (0,runtime_core_esm_bundler/* createVNode */.Wm)(runtime_core_esm_bundler/* Fragment */.HY, null, [(0,runtime_core_esm_bundler/* createVNode */.Wm)("span", {
    "class": "v-combobox__unmask"
  }, [text.substr(0, matches)]), (0,runtime_core_esm_bundler/* createVNode */.Wm)("span", {
    "class": "v-combobox__mask"
  }, [text.substr(matches, length)]), (0,runtime_core_esm_bundler/* createVNode */.Wm)("span", {
    "class": "v-combobox__unmask"
  }, [text.substr(matches + length)])]) : text;
}

const VCombobox = (0,defineComponent/* genericComponent */.e)()({
  name: 'VCombobox',
  props: {
    // TODO: implement post keyboard support
    // autoSelectFirst: Boolean,
    delimiters: Array,
    ...makeFilterProps({
      filterKeys: ['title']
    }),
    ...makeSelectProps({
      hideNoData: true
    }),
    ...makeTransitionProps({
      transition: false
    })
  },
  emits: {
    'update:modelValue': val => true,
    'update:searchInput': val => true
  },

  setup(props, _ref) {
    let {
      emit,
      slots
    } = _ref;
    const {
      t
    } = (0,locale/* useLocale */.bU)();
    const vTextFieldRef = (0,reactivity_esm_bundler/* ref */.iH)();
    const activator = (0,reactivity_esm_bundler/* ref */.iH)();
    const isFocused = (0,reactivity_esm_bundler/* ref */.iH)(false);
    const isPristine = (0,reactivity_esm_bundler/* ref */.iH)(true);
    const menu = (0,reactivity_esm_bundler/* ref */.iH)(false);
    const selectionIndex = (0,reactivity_esm_bundler/* ref */.iH)(-1);
    const color = (0,runtime_core_esm_bundler/* computed */.Fl)(() => {
      var _vTextFieldRef$value;

      return (_vTextFieldRef$value = vTextFieldRef.value) == null ? void 0 : _vTextFieldRef$value.color;
    });
    const {
      items
    } = useItems(props);
    const {
      textColorClasses,
      textColorStyles
    } = useTextColor(color);
    const model = useProxiedModel(props, 'modelValue', [], v => (0,helpers/* wrapInArray */.FT)(v || []), v => props.multiple ? v : v[0]);

    const _search = (0,reactivity_esm_bundler/* ref */.iH)('');

    const search = (0,runtime_core_esm_bundler/* computed */.Fl)({
      get: () => props.multiple ? _search.value : transformItem(props, model.value[0]).value,
      set: val => {
        var _props$delimiters;

        if (props.multiple) {
          _search.value = val;
        } else {
          model.value = [val];
        }

        if (val && props.multiple && (_props$delimiters = props.delimiters) != null && _props$delimiters.length) {
          const values = val.split(new RegExp(`(?:${props.delimiters.join('|')})+`));

          if (values.length > 1) {
            values.forEach(v => {
              v = v.trim();
              if (v) select({
                value: v
              });
            });
            _search.value = '';
          }
        }

        if (!val) selectionIndex.value = -1;
        if (isFocused.value) menu.value = true;
        isPristine.value = !val;
      }
    });
    (0,runtime_core_esm_bundler/* watch */.YP)(_search, value => {
      emit('update:searchInput', value);
    });
    const {
      filteredItems
    } = useFilter(props, items, (0,runtime_core_esm_bundler/* computed */.Fl)(() => isPristine.value ? undefined : search.value));
    const selections = (0,runtime_core_esm_bundler/* computed */.Fl)(() => {
      const array = [];
      let index = 0;

      for (const unwrapped of model.value) {
        const item = transformItem(props, unwrapped);
        const found = array.find(selection => selection.value === item.value);

        if (found == null) {
          array.push({ ...item,
            index,
            selected: index === selectionIndex.value
          });
          index++;
        }
      }

      return array;
    });
    const selected = (0,runtime_core_esm_bundler/* computed */.Fl)(() => selections.value.map(selection => selection.value));
    const selection = (0,runtime_core_esm_bundler/* computed */.Fl)(() => selections.value[selectionIndex.value]);

    function onClear(e) {
      model.value = [];

      if (props.openOnClear) {
        menu.value = true;
      }
    }

    function onClickControl() {
      if (props.hideNoData && !filteredItems.value.length) return;
      menu.value = true;
    }

    function onKeydown(e) {
      const selectionStart = vTextFieldRef.value.selectionStart;
      const length = selected.value.length;
      if (selectionIndex.value > -1) e.preventDefault();

      if (['Enter', 'ArrowDown'].includes(e.key)) {
        menu.value = true;
      }

      if (['Escape'].includes(e.key)) {
        menu.value = false;
      }

      if (['Enter', 'Escape', 'Tab'].includes(e.key)) {
        isPristine.value = true;
      }

      if (!props.multiple) return;

      if (['Backspace', 'Delete'].includes(e.key)) {
        if (selectionIndex.value < 0) {
          if (e.key === 'Backspace' && !search.value) {
            selectionIndex.value = length - 1;
          }

          return;
        }

        select(selection.value);
        (0,runtime_core_esm_bundler/* nextTick */.Y3)(() => !selection.value && (selectionIndex.value = length - 2));
      }

      if (e.key === 'ArrowLeft') {
        if (selectionIndex.value < 0 && selectionStart > 0) return;
        const prev = selectionIndex.value > -1 ? selectionIndex.value - 1 : length - 1;

        if (selections.value[prev]) {
          selectionIndex.value = prev;
        } else {
          selectionIndex.value = -1;
          vTextFieldRef.value.setSelectionRange(search.value.length, search.value.length);
        }
      }

      if (e.key === 'ArrowRight') {
        if (selectionIndex.value < 0) return;
        const next = selectionIndex.value + 1;

        if (selections.value[next]) {
          selectionIndex.value = next;
        } else {
          selectionIndex.value = -1;
          vTextFieldRef.value.setSelectionRange(0, 0);
        }
      }

      if (e.key === 'Enter') {
        select({
          value: search.value
        });
        search.value = '';
      }
    }

    function onInput(e) {
      search.value = e.target.value;
    }

    function onAfterLeave() {
      if (isFocused.value) isPristine.value = true;
    }

    function select(item) {
      if (props.multiple) {
        const index = selected.value.findIndex(selection => selection === item.value);

        if (index === -1) {
          model.value = [...model.value, item.value];
        } else {
          const value = [...model.value];
          value.splice(index, 1);
          model.value = value;
        }

        search.value = '';
      } else {
        search.value = item.title; // watch for search watcher to trigger

        (0,runtime_core_esm_bundler/* nextTick */.Y3)(() => {
          menu.value = false;
          isPristine.value = true;
        });
      }
    }

    (0,runtime_core_esm_bundler/* watch */.YP)(() => vTextFieldRef.value, val => {
      activator.value = val.$el.querySelector('.v-input__control');
    });
    (0,runtime_core_esm_bundler/* watch */.YP)(filteredItems, val => {
      if (!val.length && props.hideNoData) menu.value = false;
    });
    (0,runtime_core_esm_bundler/* watch */.YP)(isFocused, val => {
      if (val) {
        selectionIndex.value = -1;
      } else {
        menu.value = false;
        if (!props.multiple || !search.value) return;
        model.value = [...model.value, search.value];
        search.value = '';
      }
    });
    useRender(() => {
      const hasChips = !!(props.chips || slots.chip);
      return (0,runtime_core_esm_bundler/* createVNode */.Wm)(VTextField, {
        "ref": vTextFieldRef,
        "modelValue": search.value,
        "onInput": onInput,
        "class": ['v-combobox', {
          'v-combobox--active-menu': menu.value,
          'v-combobox--chips': !!props.chips,
          'v-combobox--selecting-index': selectionIndex.value > -1,
          [`v-combobox--${props.multiple ? 'multiple' : 'single'}`]: true
        }],
        "appendInnerIcon": props.items.length ? props.menuIcon : undefined,
        "dirty": selected.value.length > 0,
        "onClick:clear": onClear,
        "onClick:control": onClickControl,
        "onClick:input": onClickControl,
        "onFocus": () => isFocused.value = true,
        "onBlur": () => isFocused.value = false,
        "onKeydown": onKeydown
      }, { ...slots,
        default: () => {
          var _slots$noData, _slots$noData2;

          return (0,runtime_core_esm_bundler/* createVNode */.Wm)(runtime_core_esm_bundler/* Fragment */.HY, null, [activator.value && (0,runtime_core_esm_bundler/* createVNode */.Wm)(VMenu, {
            "modelValue": menu.value,
            "onUpdate:modelValue": $event => menu.value = $event,
            "activator": activator.value,
            "contentClass": "v-combobox__content",
            "eager": props.eager,
            "openOnClick": false,
            "transition": props.transition,
            "onAfterLeave": onAfterLeave
          }, {
            default: () => [(0,runtime_core_esm_bundler/* createVNode */.Wm)(VList, {
              "selected": selected.value,
              "selectStrategy": props.multiple ? 'independent' : 'single-independent'
            }, {
              default: () => [!filteredItems.value.length && !props.hideNoData && ((_slots$noData = (_slots$noData2 = slots['no-data']) == null ? void 0 : _slots$noData2.call(slots)) != null ? _slots$noData : (0,runtime_core_esm_bundler/* createVNode */.Wm)(VListItem, {
                "title": t(props.noDataText)
              }, null)), filteredItems.value.map(_ref2 => {
                let {
                  item,
                  matches
                } = _ref2;
                return (0,runtime_core_esm_bundler/* createVNode */.Wm)(VListItem, {
                  "value": item.value,
                  "onMousedown": e => e.preventDefault(),
                  "onClick": () => select(item)
                }, {
                  title: () => {
                    var _search$value$length, _search$value;

                    return isPristine.value ? item.title : VCombobox_highlightResult(item.title, matches.title, (_search$value$length = (_search$value = search.value) == null ? void 0 : _search$value.length) != null ? _search$value$length : 0);
                  }
                });
              })]
            })]
          }), selections.value.map((selection, index) => {
            function onChipClose(e) {
              e.stopPropagation();
              e.preventDefault();
              select(selection);
            }

            const slotProps = {
              'onClick:close': onChipClose,
              modelValue: true
            };
            return (0,runtime_core_esm_bundler/* createVNode */.Wm)("div", {
              "class": ['v-combobox__selection', selection.selected && ['v-combobox__selection--selected', textColorClasses.value]],
              "style": selection.selected ? textColorStyles.value : {}
            }, [hasChips && (0,runtime_core_esm_bundler/* createVNode */.Wm)(VDefaultsProvider, {
              "defaults": {
                VChip: {
                  closable: props.closableChips,
                  size: 'small',
                  text: selection.title
                }
              }
            }, {
              default: () => [slots.chip ? slots.chip({
                props: slotProps,
                selection
              }) : (0,runtime_core_esm_bundler/* createVNode */.Wm)(VChip, slotProps, null)]
            }), !hasChips && (slots.selection ? slots.selection({
              selection
            }) : (0,runtime_core_esm_bundler/* createVNode */.Wm)("span", {
              "class": "v-combobox__selection-text"
            }, [selection.title, props.multiple && index < selections.value.length - 1 && (0,runtime_core_esm_bundler/* createVNode */.Wm)("span", {
              "class": "v-combobox__selection-comma"
            }, [(0,runtime_core_esm_bundler/* createTextVNode */.Uk)(",")])]))]);
          })]);
        }
      });
    });
    return useForwardRef({
      isFocused,
      isPristine,
      menu,
      search,
      selectionIndex,
      filteredItems,
      select
    }, vTextFieldRef);
  }

});
//# sourceMappingURL=VCombobox.mjs.map
;// CONCATENATED MODULE: ./node_modules/vuetify/lib/components/VCombobox/index.mjs

//# sourceMappingURL=index.mjs.map
;// CONCATENATED MODULE: ./node_modules/vuetify/lib/components/VCounter/index.mjs

//# sourceMappingURL=index.mjs.map
;// CONCATENATED MODULE: ./node_modules/vuetify/lib/components/VDefaultsProvider/index.mjs

//# sourceMappingURL=index.mjs.map
;// CONCATENATED MODULE: ./node_modules/vuetify/lib/components/VDialog/VDialog.css
// extracted by mini-css-extract-plugin

;// CONCATENATED MODULE: ./node_modules/vuetify/lib/components/VDialog/VDialog.mjs

// Styles
 // Components


 // Composables



 // Utilities


 // Types

const VDialog = (0,defineComponent/* genericComponent */.e)()({
  name: 'VDialog',
  inheritAttrs: false,
  props: {
    fullscreen: Boolean,
    origin: {
      type: String,
      default: 'center center'
    },
    retainFocus: {
      type: Boolean,
      default: true
    },
    scrollable: Boolean,
    modelValue: Boolean,
    ...makeDimensionProps({
      width: 'auto'
    }),
    ...makeTransitionProps({
      transition: {
        component: VDialogTransition
      }
    })
  },
  emits: {
    'update:modelValue': value => true
  },

  setup(props, _ref) {
    let {
      attrs,
      slots
    } = _ref;
    const isActive = useProxiedModel(props, 'modelValue');
    const {
      dimensionStyles
    } = useDimension(props);
    const overlay = (0,reactivity_esm_bundler/* ref */.iH)();

    function onFocusin(e) {
      var _overlay$value, _overlay$value2;

      const before = e.relatedTarget;
      const after = e.target;

      if (before !== after && (_overlay$value = overlay.value) != null && _overlay$value.contentEl && // We're the topmost dialog
      (_overlay$value2 = overlay.value) != null && _overlay$value2.isTop && // It isn't the document or the dialog body
      ![document, overlay.value.contentEl].includes(after) && // It isn't inside the dialog body
      !overlay.value.contentEl.contains(after)) {
        const focusable = [...overlay.value.contentEl.querySelectorAll('button, [href], input, select, textarea, [tabindex]:not([tabindex="-1"])')].filter(el => !el.hasAttribute('disabled'));
        if (!focusable.length) return;
        const firstElement = focusable[0];
        const lastElement = focusable[focusable.length - 1];

        if (before === firstElement) {
          lastElement.focus();
        } else {
          firstElement.focus();
        }
      }
    }

    if (globals/* IN_BROWSER */.BR) {
      (0,runtime_core_esm_bundler/* watch */.YP)(() => isActive.value && props.retainFocus, val => {
        val ? document.addEventListener('focusin', onFocusin) : document.removeEventListener('focusin', onFocusin);
      }, {
        immediate: true
      });
    }

    (0,runtime_core_esm_bundler/* watch */.YP)(isActive, async val => {
      await (0,runtime_core_esm_bundler/* nextTick */.Y3)();

      if (val) {
        var _contentEl;

        (_contentEl = overlay.value.contentEl) == null ? void 0 : _contentEl.focus({
          preventScroll: true
        });
      } else {
        var _activatorEl;

        (_activatorEl = overlay.value.activatorEl) == null ? void 0 : _activatorEl.focus({
          preventScroll: true
        });
      }
    });
    return () => {
      return (0,runtime_core_esm_bundler/* createVNode */.Wm)(VOverlay, (0,runtime_core_esm_bundler/* mergeProps */.dG)({
        "modelValue": isActive.value,
        "onUpdate:modelValue": $event => isActive.value = $event,
        "class": ['v-dialog', {
          'v-dialog--fullscreen': props.fullscreen,
          'v-dialog--scrollable': props.scrollable
        }],
        "style": dimensionStyles.value,
        "transition": props.transition,
        "ref": overlay,
        "aria-role": "dialog",
        "aria-modal": "true",
        "activatorProps": {
          'aria-haspopup': 'dialog',
          'aria-expanded': String(isActive.value)
        }
      }, attrs), {
        default: slots.default,
        activator: slots.activator
      });
    };
  }

});
//# sourceMappingURL=VDialog.mjs.map
;// CONCATENATED MODULE: ./node_modules/vuetify/lib/components/VDialog/index.mjs

//# sourceMappingURL=index.mjs.map
;// CONCATENATED MODULE: ./node_modules/vuetify/lib/components/VDivider/index.mjs

//# sourceMappingURL=index.mjs.map
;// CONCATENATED MODULE: ./node_modules/vuetify/lib/components/VExpansionPanel/VExpansionPanel.css
// extracted by mini-css-extract-plugin

;// CONCATENATED MODULE: ./node_modules/vuetify/lib/components/VExpansionPanel/VExpansionPanels.mjs

// Styles
 // Composables




 // Utilities


 // Types

const VExpansionPanelSymbol = Symbol.for('vuetify:v-expansion-panel');
const VExpansionPanels_allowedVariants = ['default', 'accordion', 'inset', 'popout'];
const VExpansionPanels = (0,defineComponent/* defineComponent */.a)({
  name: 'VExpansionPanels',
  props: {
    color: String,
    variant: {
      type: String,
      default: 'default',
      validator: v => VExpansionPanels_allowedVariants.includes(v)
    },
    readonly: Boolean,
    ...makeGroupProps(),
    ...makeTagProps(),
    ...(0,composables_theme/* makeThemeProps */.x$)()
  },
  emits: {
    'update:modelValue': val => true
  },

  setup(props, _ref) {
    let {
      slots
    } = _ref;
    useGroup(props, VExpansionPanelSymbol);
    const {
      themeClasses
    } = (0,composables_theme/* provideTheme */.ER)(props);
    const variantClass = (0,runtime_core_esm_bundler/* computed */.Fl)(() => props.variant && `v-expansion-panels--variant-${props.variant}`);
    (0,composables_defaults/* provideDefaults */.AF)({
      VExpansionPanel: {
        color: (0,reactivity_esm_bundler/* toRef */.Vh)(props, 'color')
      },
      VExpansionPanelTitle: {
        readonly: (0,reactivity_esm_bundler/* toRef */.Vh)(props, 'readonly')
      }
    });
    useRender(() => (0,runtime_core_esm_bundler/* createVNode */.Wm)(props.tag, {
      "class": ['v-expansion-panels', themeClasses.value, variantClass.value]
    }, slots));
    return {};
  }

});
//# sourceMappingURL=VExpansionPanels.mjs.map
;// CONCATENATED MODULE: ./node_modules/vuetify/lib/components/VExpansionPanel/VExpansionPanelTitle.mjs

// Components

 // Composables

 // Directives

 // Utilities



const makeVExpansionPanelTitleProps = (0,propsFactory/* propsFactory */.U)({
  color: String,
  expandIcon: {
    type: String,
    default: '$expand'
  },
  collapseIcon: {
    type: String,
    default: '$collapse'
  },
  hideActions: Boolean,
  ripple: {
    type: [Boolean, Object],
    default: false
  },
  readonly: Boolean
});
const VExpansionPanelTitle = (0,defineComponent/* defineComponent */.a)({
  name: 'VExpansionPanelTitle',
  directives: {
    Ripple: ripple/* Ripple */.H
  },
  props: { ...makeVExpansionPanelTitleProps()
  },

  setup(props, _ref) {
    let {
      slots
    } = _ref;
    const expansionPanel = (0,runtime_core_esm_bundler/* inject */.f3)(VExpansionPanelSymbol);
    if (!expansionPanel) throw new Error('[Vuetify] v-expansion-panel-title needs to be placed inside v-expansion-panel');
    const {
      backgroundColorClasses,
      backgroundColorStyles
    } = useBackgroundColor(props, 'color');
    const slotProps = (0,runtime_core_esm_bundler/* computed */.Fl)(() => ({
      collapseIcon: props.collapseIcon,
      disabled: expansionPanel.disabled.value,
      expanded: expansionPanel.isSelected.value,
      expandIcon: props.expandIcon,
      readonly: props.readonly
    }));
    useRender(() => {
      var _slots$default;

      return (0,runtime_core_esm_bundler/* withDirectives */.wy)((0,runtime_core_esm_bundler/* createVNode */.Wm)("button", {
        "class": ['v-expansion-panel-title', {
          'v-expansion-panel-title--active': expansionPanel.isSelected.value
        }, backgroundColorClasses.value],
        "style": backgroundColorStyles.value,
        "type": "button",
        "tabindex": expansionPanel.disabled.value ? -1 : undefined,
        "disabled": expansionPanel.disabled.value,
        "aria-expanded": expansionPanel.isSelected.value,
        "onClick": !props.readonly ? expansionPanel.toggle : undefined
      }, [(0,runtime_core_esm_bundler/* createVNode */.Wm)("div", {
        "class": "v-expansion-panel-title__overlay"
      }, null), (_slots$default = slots.default) == null ? void 0 : _slots$default.call(slots, slotProps.value), !props.hideActions && (0,runtime_core_esm_bundler/* createVNode */.Wm)("div", {
        "class": "v-expansion-panel-title__icon"
      }, [slots.actions ? slots.actions(slotProps.value) : (0,runtime_core_esm_bundler/* createVNode */.Wm)(VIcon, {
        "icon": expansionPanel.isSelected.value ? props.collapseIcon : props.expandIcon
      }, null)])]), [[(0,runtime_core_esm_bundler/* resolveDirective */.Q2)("ripple"), props.ripple]]);
    });
    return {};
  }

});
//# sourceMappingURL=VExpansionPanelTitle.mjs.map
;// CONCATENATED MODULE: ./node_modules/vuetify/lib/components/VExpansionPanel/VExpansionPanelText.mjs

// Components

 // Composables

 // Utilities



const VExpansionPanelText = (0,defineComponent/* defineComponent */.a)({
  name: 'VExpansionPanelText',
  props: { ...makeLazyProps()
  },

  setup(props, _ref) {
    let {
      slots
    } = _ref;
    const expansionPanel = (0,runtime_core_esm_bundler/* inject */.f3)(VExpansionPanelSymbol);
    if (!expansionPanel) throw new Error('[Vuetify] v-expansion-panel-text needs to be placed inside v-expansion-panel');
    const {
      hasContent,
      onAfterLeave
    } = useLazy(props, expansionPanel.isSelected);
    useRender(() => {
      var _slots$default;

      return (0,runtime_core_esm_bundler/* createVNode */.Wm)(VExpandTransition, {
        "onAfterLeave": onAfterLeave
      }, {
        default: () => [(0,runtime_core_esm_bundler/* withDirectives */.wy)((0,runtime_core_esm_bundler/* createVNode */.Wm)("div", {
          "class": "v-expansion-panel-text"
        }, [slots.default && hasContent.value && (0,runtime_core_esm_bundler/* createVNode */.Wm)("div", {
          "class": "v-expansion-panel-text__wrapper"
        }, [(_slots$default = slots.default) == null ? void 0 : _slots$default.call(slots)])]), [[runtime_dom_esm_bundler/* vShow */.F8, expansionPanel.isSelected.value]])]
      });
    });
    return {};
  }

});
//# sourceMappingURL=VExpansionPanelText.mjs.map
;// CONCATENATED MODULE: ./node_modules/vuetify/lib/components/VExpansionPanel/VExpansionPanel.mjs

// Components


 // Composables






 // Utilities



const VExpansionPanel = (0,defineComponent/* defineComponent */.a)({
  name: 'VExpansionPanel',
  props: {
    title: String,
    text: String,
    bgColor: String,
    ...makeElevationProps(),
    ...makeGroupItemProps(),
    ...makeLazyProps(),
    ...makeRoundedProps(),
    ...makeTagProps(),
    ...makeVExpansionPanelTitleProps()
  },

  setup(props, _ref) {
    let {
      slots
    } = _ref;
    const groupItem = useGroupItem(props, VExpansionPanelSymbol);
    const {
      backgroundColorClasses,
      backgroundColorStyles
    } = useBackgroundColor(props, 'bgColor');
    const {
      elevationClasses
    } = useElevation(props);
    const {
      roundedClasses
    } = useRounded(props);
    const isDisabled = (0,runtime_core_esm_bundler/* computed */.Fl)(() => (groupItem == null ? void 0 : groupItem.disabled.value) || props.disabled);
    const selectedIndices = (0,runtime_core_esm_bundler/* computed */.Fl)(() => groupItem.group.items.value.reduce((arr, item, index) => {
      if (groupItem.group.selected.value.includes(item.id)) arr.push(index);
      return arr;
    }, []));
    const isBeforeSelected = (0,runtime_core_esm_bundler/* computed */.Fl)(() => {
      const index = groupItem.group.items.value.findIndex(item => item.id === groupItem.id);
      return !groupItem.isSelected.value && selectedIndices.value.some(selectedIndex => selectedIndex - index === 1);
    });
    const isAfterSelected = (0,runtime_core_esm_bundler/* computed */.Fl)(() => {
      const index = groupItem.group.items.value.findIndex(item => item.id === groupItem.id);
      return !groupItem.isSelected.value && selectedIndices.value.some(selectedIndex => selectedIndex - index === -1);
    });
    (0,runtime_core_esm_bundler/* provide */.JJ)(VExpansionPanelSymbol, groupItem);
    useRender(() => {
      var _slots$default;

      const hasText = !!(slots.text || props.text);
      const hasTitle = !!(slots.title || props.title);
      return (0,runtime_core_esm_bundler/* createVNode */.Wm)(props.tag, {
        "class": ['v-expansion-panel', {
          'v-expansion-panel--active': groupItem.isSelected.value,
          'v-expansion-panel--before-active': isBeforeSelected.value,
          'v-expansion-panel--after-active': isAfterSelected.value,
          'v-expansion-panel--disabled': isDisabled.value
        }, roundedClasses.value, backgroundColorClasses.value],
        "style": backgroundColorStyles.value,
        "aria-expanded": groupItem.isSelected.value
      }, {
        default: () => [(0,runtime_core_esm_bundler/* createVNode */.Wm)("div", {
          "class": ['v-expansion-panel__shadow', ...elevationClasses.value]
        }, null), hasTitle && (0,runtime_core_esm_bundler/* createVNode */.Wm)(VExpansionPanelTitle, {
          "collapseIcon": props.collapseIcon,
          "color": props.color,
          "expandIcon": props.expandIcon,
          "hideActions": props.hideActions,
          "ripple": props.ripple
        }, {
          default: () => [slots.title ? slots.title() : props.title]
        }), hasText && (0,runtime_core_esm_bundler/* createVNode */.Wm)(VExpansionPanelText, {
          "eager": props.eager
        }, {
          default: () => [slots.text ? slots.text() : props.text]
        }), (_slots$default = slots.default) == null ? void 0 : _slots$default.call(slots)]
      });
    });
    return {};
  }

});
//# sourceMappingURL=VExpansionPanel.mjs.map
;// CONCATENATED MODULE: ./node_modules/vuetify/lib/components/VExpansionPanel/index.mjs




//# sourceMappingURL=index.mjs.map
;// CONCATENATED MODULE: ./node_modules/vuetify/lib/components/VField/index.mjs


//# sourceMappingURL=index.mjs.map
;// CONCATENATED MODULE: ./node_modules/vuetify/lib/components/VFileInput/VFileInput.css
// extracted by mini-css-extract-plugin

;// CONCATENATED MODULE: ./node_modules/vuetify/lib/components/VFileInput/VFileInput.mjs

// Styles
 // Components




 // Composables



 // Utilities


 // Types


const VFileInput = (0,defineComponent/* defineComponent */.a)({
  name: 'VFileInput',
  inheritAttrs: false,
  props: {
    chips: Boolean,
    counter: Boolean,
    counterSizeString: {
      type: String,
      default: '$vuetify.fileInput.counterSize'
    },
    counterString: {
      type: String,
      default: '$vuetify.fileInput.counter'
    },
    multiple: Boolean,
    hint: String,
    persistentHint: Boolean,
    placeholder: String,
    showSize: {
      type: [Boolean, Number],
      default: false,
      validator: v => {
        return typeof v === 'boolean' || [1000, 1024].includes(v);
      }
    },
    ...makeVInputProps(),
    prependIcon: {
      type: String,
      default: '$file'
    },
    modelValue: {
      type: Array,
      default: () => [],
      validator: val => {
        return (0,helpers/* wrapInArray */.FT)(val).every(v => v != null && typeof v === 'object');
      }
    },
    ...makeVFieldProps({
      clearable: true
    })
  },
  emits: {
    'click:clear': e => true,
    'click:control': e => true,
    'update:modelValue': files => true
  },

  setup(props, _ref) {
    let {
      attrs,
      emit,
      slots
    } = _ref;
    const {
      t
    } = (0,locale/* useLocale */.bU)();
    const model = useProxiedModel(props, 'modelValue');
    const base = (0,runtime_core_esm_bundler/* computed */.Fl)(() => typeof props.showSize !== 'boolean' ? props.showSize : undefined);
    const totalBytes = (0,runtime_core_esm_bundler/* computed */.Fl)(() => {
      var _model$value;

      return ((_model$value = model.value) != null ? _model$value : []).reduce((bytes, _ref2) => {
        let {
          size = 0
        } = _ref2;
        return bytes + size;
      }, 0);
    });
    const totalBytesReadable = (0,runtime_core_esm_bundler/* computed */.Fl)(() => (0,helpers/* humanReadableFileSize */.XE)(totalBytes.value, base.value));
    const fileNames = (0,runtime_core_esm_bundler/* computed */.Fl)(() => {
      var _model$value2;

      return ((_model$value2 = model.value) != null ? _model$value2 : []).map(file => {
        const {
          name = '',
          size = 0
        } = file;
        return !props.showSize ? name : `${name} (${(0,helpers/* humanReadableFileSize */.XE)(size, base.value)})`;
      });
    });
    const counterValue = (0,runtime_core_esm_bundler/* computed */.Fl)(() => {
      var _model$value$length, _model$value3;

      const fileCount = (_model$value$length = (_model$value3 = model.value) == null ? void 0 : _model$value3.length) != null ? _model$value$length : 0;
      if (props.showSize) return t(props.counterSizeString, fileCount, totalBytesReadable.value);else return t(props.counterString, fileCount);
    });
    const vInputRef = (0,reactivity_esm_bundler/* ref */.iH)();
    const vFieldRef = (0,reactivity_esm_bundler/* ref */.iH)();
    const isFocused = (0,reactivity_esm_bundler/* ref */.iH)(false);
    const inputRef = (0,reactivity_esm_bundler/* ref */.iH)();
    const messages = (0,runtime_core_esm_bundler/* computed */.Fl)(() => {
      return props.messages.length ? props.messages : props.persistentHint ? props.hint : '';
    });

    function onFocus() {
      if (inputRef.value !== document.activeElement) {
        var _inputRef$value;

        (_inputRef$value = inputRef.value) == null ? void 0 : _inputRef$value.focus();
      }

      if (!isFocused.value) {
        isFocused.value = true;
      }
    }

    function onControlClick(e) {
      var _inputRef$value2;

      (_inputRef$value2 = inputRef.value) == null ? void 0 : _inputRef$value2.click();
      emit('click:control', e);
    }

    function onClear(e) {
      e.stopPropagation();
      onFocus();
      (0,runtime_core_esm_bundler/* nextTick */.Y3)(() => {
        model.value = [];

        if (inputRef != null && inputRef.value) {
          inputRef.value.value = '';
        }

        emit('click:clear', e);
      });
    }

    useRender(() => {
      const hasCounter = !!(slots.counter || props.counter);
      const [rootAttrs, inputAttrs] = (0,helpers/* filterInputAttrs */.An)(attrs);
      const [{
        modelValue: _,
        ...inputProps
      }] = filterInputProps(props);
      const [fieldProps] = filterFieldProps(props);
      return (0,runtime_core_esm_bundler/* createVNode */.Wm)(VInput, (0,runtime_core_esm_bundler/* mergeProps */.dG)({
        "ref": vInputRef,
        "modelValue": model.value,
        "onUpdate:modelValue": $event => model.value = $event,
        "class": "v-file-input"
      }, rootAttrs, inputProps, {
        "onClick:prepend": onControlClick,
        "messages": messages.value
      }), { ...slots,
        default: _ref3 => {
          let {
            isDisabled,
            isDirty,
            isReadonly,
            isValid
          } = _ref3;
          return (0,runtime_core_esm_bundler/* createVNode */.Wm)(VField, (0,runtime_core_esm_bundler/* mergeProps */.dG)({
            "ref": vFieldRef,
            "prepend-icon": props.prependIcon,
            "onClick:control": onControlClick,
            "onClick:clear": onClear
          }, fieldProps, {
            "active": isDirty.value || isFocused.value,
            "dirty": isDirty.value,
            "focused": isFocused.value,
            "error": isValid.value === false
          }), { ...slots,
            default: _ref4 => {
              let {
                props: {
                  class: fieldClass,
                  ...slotProps
                }
              } = _ref4;
              return (0,runtime_core_esm_bundler/* createVNode */.Wm)(runtime_core_esm_bundler/* Fragment */.HY, null, [(0,runtime_core_esm_bundler/* createVNode */.Wm)("input", (0,runtime_core_esm_bundler/* mergeProps */.dG)({
                "ref": inputRef,
                "type": "file",
                "readonly": isReadonly.value,
                "disabled": isDisabled.value,
                "multiple": props.multiple,
                "name": props.name,
                "onClick": e => {
                  e.stopPropagation();
                  onFocus();
                },
                "onChange": e => {
                  var _target$files;

                  if (!e.target) return;
                  const target = e.target;
                  model.value = [...((_target$files = target.files) != null ? _target$files : [])];
                },
                "onFocus": onFocus,
                "onBlur": () => isFocused.value = false
              }, slotProps, inputAttrs), null), model.value.length > 0 && (0,runtime_core_esm_bundler/* createVNode */.Wm)("div", {
                "class": fieldClass
              }, [slots.selection ? slots.selection({
                fileNames: fileNames.value,
                totalBytes: totalBytes.value,
                totalBytesReadable: totalBytesReadable.value
              }) : props.chips ? fileNames.value.map(text => (0,runtime_core_esm_bundler/* createVNode */.Wm)(VChip, {
                "key": text,
                "size": "small",
                "color": props.color
              }, {
                default: () => [text]
              })) : fileNames.value.join(', ')])]);
            }
          });
        },
        details: hasCounter ? () => (0,runtime_core_esm_bundler/* createVNode */.Wm)(runtime_core_esm_bundler/* Fragment */.HY, null, [(0,runtime_core_esm_bundler/* createVNode */.Wm)("span", null, null), (0,runtime_core_esm_bundler/* createVNode */.Wm)(VCounter, {
          "active": !!model.value.length,
          "value": counterValue.value
        }, slots.counter)]) : undefined
      });
    });
    return useForwardRef({}, vInputRef, vFieldRef, inputRef);
  }

});
//# sourceMappingURL=VFileInput.mjs.map
;// CONCATENATED MODULE: ./node_modules/vuetify/lib/components/VFileInput/index.mjs

//# sourceMappingURL=index.mjs.map
;// CONCATENATED MODULE: ./node_modules/vuetify/lib/components/VFooter/VFooter.css
// extracted by mini-css-extract-plugin

;// CONCATENATED MODULE: ./node_modules/vuetify/lib/components/VFooter/VFooter.mjs

// Styles
 // Composables








 // Utilities



const VFooter = (0,defineComponent/* defineComponent */.a)({
  name: 'VFooter',
  props: {
    app: Boolean,
    color: String,
    height: {
      type: [Number, String],
      default: 'auto'
    },
    ...makeBorderProps(),
    ...makeElevationProps(),
    ...makeLayoutItemProps(),
    ...makeRoundedProps(),
    ...makeTagProps({
      tag: 'footer'
    }),
    ...(0,composables_theme/* makeThemeProps */.x$)()
  },

  setup(props, _ref) {
    let {
      slots
    } = _ref;
    const {
      themeClasses
    } = (0,composables_theme/* provideTheme */.ER)(props);
    const {
      backgroundColorClasses,
      backgroundColorStyles
    } = useBackgroundColor((0,reactivity_esm_bundler/* toRef */.Vh)(props, 'color'));
    const {
      borderClasses
    } = useBorder(props);
    const {
      elevationClasses
    } = useElevation(props);
    const {
      roundedClasses
    } = useRounded(props);
    const autoHeight = (0,reactivity_esm_bundler/* ref */.iH)(32);
    const {
      resizeRef
    } = useResizeObserver(entries => {
      if (!entries.length) return;
      autoHeight.value = entries[0].target.clientHeight;
    });
    const height = (0,runtime_core_esm_bundler/* computed */.Fl)(() => props.height === 'auto' ? autoHeight.value : parseInt(props.height, 10));
    const {
      layoutItemStyles
    } = useLayoutItem({
      id: props.name,
      priority: (0,runtime_core_esm_bundler/* computed */.Fl)(() => parseInt(props.priority, 10)),
      position: (0,runtime_core_esm_bundler/* computed */.Fl)(() => 'bottom'),
      layoutSize: height,
      elementSize: (0,runtime_core_esm_bundler/* computed */.Fl)(() => props.height === 'auto' ? undefined : height.value),
      active: (0,runtime_core_esm_bundler/* computed */.Fl)(() => props.app),
      absolute: (0,reactivity_esm_bundler/* toRef */.Vh)(props, 'absolute')
    });
    return () => (0,runtime_core_esm_bundler/* createVNode */.Wm)(props.tag, {
      "ref": resizeRef,
      "class": ['v-footer', themeClasses.value, backgroundColorClasses.value, borderClasses.value, elevationClasses.value, roundedClasses.value],
      "style": [backgroundColorStyles, props.app ? layoutItemStyles.value : undefined]
    }, slots);
  }

});
//# sourceMappingURL=VFooter.mjs.map
;// CONCATENATED MODULE: ./node_modules/vuetify/lib/components/VFooter/index.mjs

//# sourceMappingURL=index.mjs.map
;// CONCATENATED MODULE: ./node_modules/vuetify/lib/components/VForm/VForm.mjs

// Composables
 // Utilities



 // Types

const VForm = (0,defineComponent/* defineComponent */.a)({
  name: 'VForm',
  props: { ...makeFormProps()
  },
  emits: {
    'update:modelValue': val => true,
    submit: e => true
  },

  setup(props, _ref) {
    let {
      slots,
      emit
    } = _ref;
    const form = createForm(props);
    const formRef = (0,reactivity_esm_bundler/* ref */.iH)();

    function onReset(e) {
      e.preventDefault();
      form.reset();
    }

    function onSubmit(_e) {
      const e = _e;
      const ready = form.validate();
      e.then = ready.then.bind(ready);
      e.catch = ready.catch.bind(ready);
      e.finally = ready.finally.bind(ready);
      emit('submit', e);

      if (!e.defaultPrevented) {
        ready.then(_ref2 => {
          let {
            valid
          } = _ref2;

          if (valid) {
            var _formRef$value;

            (_formRef$value = formRef.value) == null ? void 0 : _formRef$value.submit();
          }
        });
      }

      e.preventDefault();
    }

    useRender(() => {
      var _slots$default;

      return (0,runtime_core_esm_bundler/* createVNode */.Wm)("form", {
        "ref": formRef,
        "class": "v-form",
        "novalidate": true,
        "onReset": onReset,
        "onSubmit": onSubmit
      }, [(_slots$default = slots.default) == null ? void 0 : _slots$default.call(slots, form)]);
    });
    return useForwardRef(form, formRef);
  }

});
//# sourceMappingURL=VForm.mjs.map
;// CONCATENATED MODULE: ./node_modules/vuetify/lib/components/VForm/index.mjs

//# sourceMappingURL=index.mjs.map
;// CONCATENATED MODULE: ./node_modules/vuetify/lib/components/VGrid/VGrid.css
// extracted by mini-css-extract-plugin

;// CONCATENATED MODULE: ./node_modules/vuetify/lib/components/VGrid/VContainer.mjs

// Styles
 // Composables

 // Utilities


const VContainer = (0,defineComponent/* defineComponent */.a)({
  name: 'VContainer',
  props: {
    fluid: {
      type: Boolean,
      default: false
    },
    ...makeTagProps()
  },

  setup(props, _ref) {
    let {
      slots
    } = _ref;
    return () => (0,runtime_core_esm_bundler/* createVNode */.Wm)(props.tag, {
      "class": ['v-container', {
        'v-container--fluid': props.fluid
      }]
    }, slots);
  }

});
//# sourceMappingURL=VContainer.mjs.map
;// CONCATENATED MODULE: ./node_modules/vuetify/lib/components/VGrid/VCol.mjs
// Styles
 // Composables

 // Utilities


 // Types

const breakpoints = ['sm', 'md', 'lg', 'xl', 'xxl']; // no xs

const breakpointProps = (() => {
  return breakpoints.reduce((props, val) => {
    props[val] = {
      type: [Boolean, String, Number],
      default: false
    };
    return props;
  }, {});
})();

const offsetProps = (() => {
  return breakpoints.reduce((props, val) => {
    props['offset' + (0,shared_esm_bundler/* capitalize */.kC)(val)] = {
      type: [String, Number],
      default: null
    };
    return props;
  }, {});
})();

const orderProps = (() => {
  return breakpoints.reduce((props, val) => {
    props['order' + (0,shared_esm_bundler/* capitalize */.kC)(val)] = {
      type: [String, Number],
      default: null
    };
    return props;
  }, {});
})();

const propMap = {
  col: Object.keys(breakpointProps),
  offset: Object.keys(offsetProps),
  order: Object.keys(orderProps)
};

function breakpointClass(type, prop, val) {
  let className = type;

  if (val == null || val === false) {
    return undefined;
  }

  if (prop) {
    const breakpoint = prop.replace(type, '');
    className += `-${breakpoint}`;
  }

  if (type === 'col') {
    className = 'v-' + className;
  } // Handling the boolean style prop when accepting [Boolean, String, Number]
  // means Vue will not convert <v-col sm></v-col> to sm: true for us.
  // Since the default is false, an empty string indicates the prop's presence.


  if (type === 'col' && (val === '' || val === true)) {
    // .v-col-md
    return className.toLowerCase();
  } // .order-md-6


  className += `-${val}`;
  return className.toLowerCase();
}

const VCol = (0,defineComponent/* defineComponent */.a)({
  name: 'VCol',
  props: {
    cols: {
      type: [Boolean, String, Number],
      default: false
    },
    ...breakpointProps,
    offset: {
      type: [String, Number],
      default: null
    },
    ...offsetProps,
    order: {
      type: [String, Number],
      default: null
    },
    ...orderProps,
    alignSelf: {
      type: String,
      default: null,
      validator: str => ['auto', 'start', 'end', 'center', 'baseline', 'stretch'].includes(str)
    },
    ...makeTagProps()
  },

  setup(props, _ref) {
    let {
      slots
    } = _ref;
    const classes = (0,runtime_core_esm_bundler/* computed */.Fl)(() => {
      const classList = []; // Loop through `col`, `offset`, `order` breakpoint props

      let type;

      for (type in propMap) {
        propMap[type].forEach(prop => {
          const value = props[prop];
          const className = breakpointClass(type, prop, value);
          if (className) classList.push(className);
        });
      }

      const hasColClasses = classList.some(className => className.startsWith('v-col-'));
      classList.push({
        // Default to .v-col if no other col-{bp}-* classes generated nor `cols` specified.
        'v-col': !hasColClasses || !props.cols,
        [`v-col-${props.cols}`]: props.cols,
        [`offset-${props.offset}`]: props.offset,
        [`order-${props.order}`]: props.order,
        [`align-self-${props.alignSelf}`]: props.alignSelf
      });
      return classList;
    });
    return () => {
      var _slots$default;

      return (0,runtime_core_esm_bundler.h)(props.tag, {
        class: classes.value
      }, (_slots$default = slots.default) == null ? void 0 : _slots$default.call(slots));
    };
  }

});
//# sourceMappingURL=VCol.mjs.map
;// CONCATENATED MODULE: ./node_modules/vuetify/lib/components/VGrid/VRow.mjs
// Styles
 // Composables

 // Utilities


 // Types

const VRow_breakpoints = ['sm', 'md', 'lg', 'xl', 'xxl']; // no xs

const ALIGNMENT = ['start', 'end', 'center'];

function makeRowProps(prefix, def) {
  return VRow_breakpoints.reduce((props, val) => {
    props[prefix + (0,shared_esm_bundler/* capitalize */.kC)(val)] = def();
    return props;
  }, {});
}

const alignValidator = str => [...ALIGNMENT, 'baseline', 'stretch'].includes(str);

const alignProps = makeRowProps('align', () => ({
  type: String,
  default: null,
  validator: alignValidator
}));

const justifyValidator = str => [...ALIGNMENT, 'space-between', 'space-around'].includes(str);

const justifyProps = makeRowProps('justify', () => ({
  type: String,
  default: null,
  validator: justifyValidator
}));

const alignContentValidator = str => [...ALIGNMENT, 'space-between', 'space-around', 'stretch'].includes(str);

const alignContentProps = makeRowProps('alignContent', () => ({
  type: String,
  default: null,
  validator: alignContentValidator
}));
const VRow_propMap = {
  align: Object.keys(alignProps),
  justify: Object.keys(justifyProps),
  alignContent: Object.keys(alignContentProps)
};
const classMap = {
  align: 'align',
  justify: 'justify',
  alignContent: 'align-content'
};

function VRow_breakpointClass(type, prop, val) {
  let className = classMap[type];

  if (val == null) {
    return undefined;
  }

  if (prop) {
    // alignSm -> Sm
    const breakpoint = prop.replace(type, '');
    className += `-${breakpoint}`;
  } // .align-items-sm-center


  className += `-${val}`;
  return className.toLowerCase();
}

const VRow = (0,defineComponent/* defineComponent */.a)({
  name: 'VRow',
  props: {
    dense: Boolean,
    noGutters: Boolean,
    align: {
      type: String,
      default: null,
      validator: alignValidator
    },
    ...alignProps,
    justify: {
      type: String,
      default: null,
      validator: justifyValidator
    },
    ...justifyProps,
    alignContent: {
      type: String,
      default: null,
      validator: alignContentValidator
    },
    ...alignContentProps,
    ...makeTagProps()
  },

  setup(props, _ref) {
    let {
      slots
    } = _ref;
    const classes = (0,runtime_core_esm_bundler/* computed */.Fl)(() => {
      const classList = []; // Loop through `align`, `justify`, `alignContent` breakpoint props

      let type;

      for (type in VRow_propMap) {
        VRow_propMap[type].forEach(prop => {
          const value = props[prop];
          const className = VRow_breakpointClass(type, prop, value);
          if (className) classList.push(className);
        });
      }

      classList.push({
        'v-row--no-gutters': props.noGutters,
        'v-row--dense': props.dense,
        [`align-${props.align}`]: props.align,
        [`justify-${props.justify}`]: props.justify,
        [`align-content-${props.alignContent}`]: props.alignContent
      });
      return classList;
    });
    return () => {
      var _slots$default;

      return (0,runtime_core_esm_bundler.h)(props.tag, {
        class: ['v-row', classes.value]
      }, (_slots$default = slots.default) == null ? void 0 : _slots$default.call(slots));
    };
  }

});
//# sourceMappingURL=VRow.mjs.map
;// CONCATENATED MODULE: ./node_modules/vuetify/lib/components/VGrid/VSpacer.mjs

const VSpacer = createSimpleFunctional('flex-grow-1', 'div', 'VSpacer');
//# sourceMappingURL=VSpacer.mjs.map
;// CONCATENATED MODULE: ./node_modules/vuetify/lib/components/VGrid/index.mjs




//# sourceMappingURL=index.mjs.map
;// CONCATENATED MODULE: ./node_modules/vuetify/lib/components/VHover/VHover.mjs
// Composables

 // Utilities


const VHover = (0,defineComponent/* defineComponent */.a)({
  name: 'VHover',
  props: {
    disabled: Boolean,
    modelValue: {
      type: Boolean,
      default: undefined
    },
    ...makeDelayProps()
  },
  emits: {
    'update:modelValue': value => true
  },

  setup(props, _ref) {
    let {
      slots
    } = _ref;
    const isHovering = useProxiedModel(props, 'modelValue');
    const {
      runOpenDelay,
      runCloseDelay
    } = useDelay(props, value => !props.disabled && (isHovering.value = value));
    return () => {
      var _slots$default;

      return (_slots$default = slots.default) == null ? void 0 : _slots$default.call(slots, {
        isHovering: isHovering.value,
        props: {
          onMouseenter: runOpenDelay,
          onMouseleave: runCloseDelay
        }
      });
    };
  }

});
//# sourceMappingURL=VHover.mjs.map
;// CONCATENATED MODULE: ./node_modules/vuetify/lib/components/VHover/index.mjs

//# sourceMappingURL=index.mjs.map
;// CONCATENATED MODULE: ./node_modules/vuetify/lib/components/VIcon/index.mjs


//# sourceMappingURL=index.mjs.map
;// CONCATENATED MODULE: ./node_modules/vuetify/lib/components/VImg/index.mjs

//# sourceMappingURL=index.mjs.map
;// CONCATENATED MODULE: ./node_modules/vuetify/lib/components/VInput/index.mjs

//# sourceMappingURL=index.mjs.map
;// CONCATENATED MODULE: ./node_modules/vuetify/lib/components/VItemGroup/VItemGroup.css
// extracted by mini-css-extract-plugin

;// CONCATENATED MODULE: ./node_modules/vuetify/lib/components/VItemGroup/VItemGroup.mjs

// Styles
 // Composables



 // Utilities


const VItemGroupSymbol = Symbol.for('vuetify:v-item-group');
const VItemGroup = (0,defineComponent/* defineComponent */.a)({
  name: 'VItemGroup',
  props: { ...makeGroupProps({
      selectedClass: 'v-item--selected'
    }),
    ...makeTagProps(),
    ...(0,composables_theme/* makeThemeProps */.x$)()
  },
  emits: {
    'update:modelValue': value => true
  },

  setup(props, _ref) {
    let {
      slots
    } = _ref;
    const {
      themeClasses
    } = (0,composables_theme/* provideTheme */.ER)(props);
    const {
      isSelected,
      select,
      next,
      prev,
      selected
    } = useGroup(props, VItemGroupSymbol);
    return () => {
      var _slots$default;

      return (0,runtime_core_esm_bundler/* createVNode */.Wm)(props.tag, {
        "class": ['v-item-group', themeClasses.value]
      }, {
        default: () => [(_slots$default = slots.default) == null ? void 0 : _slots$default.call(slots, {
          isSelected,
          select,
          next,
          prev,
          selected: selected.value
        })]
      });
    };
  }

});
//# sourceMappingURL=VItemGroup.mjs.map
;// CONCATENATED MODULE: ./node_modules/vuetify/lib/components/VItemGroup/VItem.mjs
// Composables

 // Utilities

 // Types

const VItem = (0,defineComponent/* genericComponent */.e)()({
  name: 'VItem',
  props: makeGroupItemProps(),

  setup(props, _ref) {
    let {
      slots
    } = _ref;
    const {
      isSelected,
      select,
      toggle,
      selectedClass,
      value,
      disabled
    } = useGroupItem(props, VItemGroupSymbol);
    return () => {
      var _slots$default;

      return (_slots$default = slots.default) == null ? void 0 : _slots$default.call(slots, {
        isSelected: isSelected.value,
        selectedClass: selectedClass.value,
        select,
        toggle,
        value: value.value,
        disabled: disabled.value
      });
    };
  }

});
//# sourceMappingURL=VItem.mjs.map
;// CONCATENATED MODULE: ./node_modules/vuetify/lib/components/VItemGroup/index.mjs


//# sourceMappingURL=index.mjs.map
;// CONCATENATED MODULE: ./node_modules/vuetify/lib/components/VKbd/VKbd.css
// extracted by mini-css-extract-plugin

;// CONCATENATED MODULE: ./node_modules/vuetify/lib/components/VKbd/index.mjs


const VKbd = createSimpleFunctional('v-kbd');
//# sourceMappingURL=index.mjs.map
;// CONCATENATED MODULE: ./node_modules/vuetify/lib/components/VLabel/index.mjs

//# sourceMappingURL=index.mjs.map
;// CONCATENATED MODULE: ./node_modules/vuetify/lib/components/VLayout/VLayout.css
// extracted by mini-css-extract-plugin

;// CONCATENATED MODULE: ./node_modules/vuetify/lib/components/VLayout/VLayout.mjs

// Styles
 // Utilities

 // Composables


const VLayout = (0,defineComponent/* defineComponent */.a)({
  name: 'VLayout',
  props: makeLayoutProps(),

  setup(props, _ref) {
    let {
      slots
    } = _ref;
    const {
      layoutClasses,
      layoutStyles,
      getLayoutItem,
      items,
      layoutRef
    } = createLayout(props);
    useRender(() => {
      var _slots$default;

      return (0,runtime_core_esm_bundler/* createVNode */.Wm)("div", {
        "ref": layoutRef,
        "class": layoutClasses.value,
        "style": layoutStyles.value
      }, [(_slots$default = slots.default) == null ? void 0 : _slots$default.call(slots)]);
    });
    return {
      getLayoutItem,
      items
    };
  }

});
//# sourceMappingURL=VLayout.mjs.map
;// CONCATENATED MODULE: ./node_modules/vuetify/lib/components/VLayout/VLayoutItem.css
// extracted by mini-css-extract-plugin

;// CONCATENATED MODULE: ./node_modules/vuetify/lib/components/VLayout/VLayoutItem.mjs

// Styles
 // Composables

 // Utilities


 // Types

const VLayoutItem = (0,defineComponent/* defineComponent */.a)({
  name: 'VLayoutItem',
  props: {
    position: {
      type: String,
      required: true
    },
    size: {
      type: [Number, String],
      default: 300
    },
    modelValue: Boolean,
    ...makeLayoutItemProps()
  },

  setup(props, _ref) {
    let {
      slots
    } = _ref;
    const {
      layoutItemStyles
    } = useLayoutItem({
      id: props.name,
      priority: (0,runtime_core_esm_bundler/* computed */.Fl)(() => parseInt(props.priority, 10)),
      position: (0,reactivity_esm_bundler/* toRef */.Vh)(props, 'position'),
      elementSize: (0,reactivity_esm_bundler/* toRef */.Vh)(props, 'size'),
      layoutSize: (0,reactivity_esm_bundler/* toRef */.Vh)(props, 'size'),
      active: (0,reactivity_esm_bundler/* toRef */.Vh)(props, 'modelValue'),
      absolute: (0,reactivity_esm_bundler/* toRef */.Vh)(props, 'absolute')
    });
    return () => {
      var _slots$default;

      return (0,runtime_core_esm_bundler/* createVNode */.Wm)("div", {
        "class": ['v-layout-item'],
        "style": layoutItemStyles.value
      }, [(_slots$default = slots.default) == null ? void 0 : _slots$default.call(slots)]);
    };
  }

});
//# sourceMappingURL=VLayoutItem.mjs.map
;// CONCATENATED MODULE: ./node_modules/vuetify/lib/components/VLayout/index.mjs


//# sourceMappingURL=index.mjs.map
;// CONCATENATED MODULE: ./node_modules/vuetify/lib/components/VLazy/VLazy.mjs

// Composables



 // Directives

 // Utilities


const VLazy = (0,defineComponent/* defineComponent */.a)({
  name: 'VLazy',
  directives: {
    intersect: intersect/* default */.Z
  },
  props: {
    modelValue: Boolean,
    options: {
      type: Object,
      // For more information on types, navigate to:
      // https://developer.mozilla.org/en-US/docs/Web/API/Intersection_Observer_API
      default: () => ({
        root: undefined,
        rootMargin: undefined,
        threshold: undefined
      })
    },
    ...makeDimensionProps(),
    ...makeTagProps(),
    ...makeTransitionProps({
      transition: 'fade-transition'
    })
  },
  emits: {
    'update:modelValue': value => true
  },

  setup(props, _ref) {
    let {
      slots
    } = _ref;
    const {
      dimensionStyles
    } = useDimension(props);
    const isActive = useProxiedModel(props, 'modelValue');

    function onIntersect(isIntersecting) {
      if (isActive.value) return;
      isActive.value = isIntersecting;
    }

    return () => {
      var _slots$default;

      return (0,runtime_core_esm_bundler/* withDirectives */.wy)((0,runtime_core_esm_bundler/* createVNode */.Wm)(props.tag, {
        "class": "v-lazy",
        "style": dimensionStyles.value
      }, {
        default: () => [isActive.value && (0,runtime_core_esm_bundler/* createVNode */.Wm)(MaybeTransition, {
          "transition": props.transition
        }, {
          default: () => [(_slots$default = slots.default) == null ? void 0 : _slots$default.call(slots)]
        })]
      }), [[(0,runtime_core_esm_bundler/* resolveDirective */.Q2)("intersect"), onIntersect, props.options]]);
    };
  }

});
//# sourceMappingURL=VLazy.mjs.map
;// CONCATENATED MODULE: ./node_modules/vuetify/lib/components/VLazy/index.mjs

//# sourceMappingURL=index.mjs.map
;// CONCATENATED MODULE: ./node_modules/vuetify/lib/components/VList/VListImg.mjs

const VListImg = createSimpleFunctional('v-list-img');
//# sourceMappingURL=VListImg.mjs.map
;// CONCATENATED MODULE: ./node_modules/vuetify/lib/components/VList/VListItemAction.mjs

// Composables
 // Utilities


const VListItemAction = (0,defineComponent/* defineComponent */.a)({
  name: 'VListItemAction',
  props: {
    start: Boolean,
    end: Boolean,
    ...makeTagProps()
  },

  setup(props, _ref) {
    let {
      slots
    } = _ref;
    return () => {
      return (0,runtime_core_esm_bundler/* createVNode */.Wm)(props.tag, {
        "class": ['v-list-item-action', {
          'v-list-item-action--start': props.start,
          'v-list-item-action--end': props.end
        }]
      }, slots);
    };
  }

});
//# sourceMappingURL=VListItemAction.mjs.map
;// CONCATENATED MODULE: ./node_modules/vuetify/lib/components/VList/VListItemMedia.mjs

// Composables
 // Utilities


const VListItemMedia = (0,defineComponent/* defineComponent */.a)({
  name: 'VListItemMedia',
  props: {
    start: Boolean,
    end: Boolean,
    ...makeTagProps()
  },

  setup(props, _ref) {
    let {
      slots
    } = _ref;
    return () => {
      return (0,runtime_core_esm_bundler/* createVNode */.Wm)(props.tag, {
        "class": ['v-list-item-media', {
          'v-list-item-media--start': props.start,
          'v-list-item-media--end': props.end
        }]
      }, slots);
    };
  }

});
//# sourceMappingURL=VListItemMedia.mjs.map
;// CONCATENATED MODULE: ./node_modules/vuetify/lib/components/VList/index.mjs












//# sourceMappingURL=index.mjs.map
;// CONCATENATED MODULE: ./node_modules/vuetify/lib/components/VLocaleProvider/VLocaleProvider.css
// extracted by mini-css-extract-plugin

;// CONCATENATED MODULE: ./node_modules/vuetify/lib/components/VLocaleProvider/VLocaleProvider.mjs

 // Composables


 // Utilities


const VLocaleProvider = (0,defineComponent/* defineComponent */.a)({
  name: 'VLocaleProvider',
  props: {
    locale: String,
    fallbackLocale: String,
    messages: Object,
    rtl: {
      type: Boolean,
      default: undefined
    }
  },

  setup(props, _ref) {
    let {
      slots
    } = _ref;
    const localeInstance = (0,locale/* provideLocale */.O4)(props);
    const {
      rtlClasses
    } = (0,rtl/* provideRtl */.zr)(props, localeInstance);
    return () => {
      var _slots$default;

      return (0,runtime_core_esm_bundler/* createVNode */.Wm)("div", {
        "class": ['v-locale-provider', rtlClasses.value]
      }, [(_slots$default = slots.default) == null ? void 0 : _slots$default.call(slots)]);
    };
  }

});
//# sourceMappingURL=VLocaleProvider.mjs.map
;// CONCATENATED MODULE: ./node_modules/vuetify/lib/components/VLocaleProvider/index.mjs

//# sourceMappingURL=index.mjs.map
;// CONCATENATED MODULE: ./node_modules/vuetify/lib/components/VMain/VMain.css
// extracted by mini-css-extract-plugin

;// CONCATENATED MODULE: ./node_modules/vuetify/lib/composables/ssrBoot.mjs
// Utilities
 // Composables

function useSsrBoot() {
  const isBooted = (0,reactivity_esm_bundler/* ref */.iH)(false);
  (0,runtime_core_esm_bundler/* onMounted */.bv)(() => {
    window.requestAnimationFrame(() => {
      isBooted.value = true;
    });
  });
  const ssrBootStyles = (0,runtime_core_esm_bundler/* computed */.Fl)(() => !isBooted.value ? {
    transition: 'none !important'
  } : undefined);
  return {
    ssrBootStyles
  };
}
//# sourceMappingURL=ssrBoot.mjs.map
;// CONCATENATED MODULE: ./node_modules/vuetify/lib/components/VMain/VMain.mjs

// Styles
 // Composables



 // Utilities


const VMain = (0,defineComponent/* defineComponent */.a)({
  name: 'VMain',
  props: makeTagProps({
    tag: 'main'
  }),

  setup(props, _ref) {
    let {
      slots
    } = _ref;
    const {
      mainStyles
    } = useLayout();
    const {
      ssrBootStyles
    } = useSsrBoot();
    return () => {
      var _slots$default;

      return (0,runtime_core_esm_bundler/* createVNode */.Wm)(props.tag, {
        "class": "v-main",
        "style": [mainStyles.value, ssrBootStyles.value]
      }, {
        default: () => [(0,runtime_core_esm_bundler/* createVNode */.Wm)("div", {
          "class": "v-main__wrap"
        }, [(_slots$default = slots.default) == null ? void 0 : _slots$default.call(slots)])]
      });
    };
  }

});
//# sourceMappingURL=VMain.mjs.map
;// CONCATENATED MODULE: ./node_modules/vuetify/lib/components/VMain/index.mjs

//# sourceMappingURL=index.mjs.map
;// CONCATENATED MODULE: ./node_modules/vuetify/lib/components/VMenu/index.mjs

//# sourceMappingURL=index.mjs.map
;// CONCATENATED MODULE: ./node_modules/vuetify/lib/components/VMessages/index.mjs

//# sourceMappingURL=index.mjs.map
;// CONCATENATED MODULE: ./node_modules/vuetify/lib/components/VNavigationDrawer/VNavigationDrawer.css
// extracted by mini-css-extract-plugin

;// CONCATENATED MODULE: ./node_modules/vuetify/lib/composables/touch.mjs

const HORIZON = 100; // ms

const HISTORY = 20; // number of samples to keep

/** @see https://android.googlesource.com/platform/frameworks/native/+/master/libs/input/VelocityTracker.cpp */
function kineticEnergyToVelocity(work) {
  const sqrt2 = 1.41421356237;
  return (work < 0 ? -1.0 : 1.0) * Math.sqrt(Math.abs(work)) * sqrt2;
}
/**
 * Returns pointer velocity in px/s
 */


function calculateImpulseVelocity(samples) {
  // The input should be in reversed time order (most recent sample at index i=0)
  if (samples.length < 2) {
    // if 0 or 1 points, velocity is zero
    return 0;
  } // if (samples[1].t > samples[0].t) {
  //   // Algorithm will still work, but not perfectly
  //   consoleWarn('Samples provided to calculateImpulseVelocity in the wrong order')
  // }


  if (samples.length === 2) {
    // if 2 points, basic linear calculation
    if (samples[1].t === samples[0].t) {
      // consoleWarn(`Events have identical time stamps t=${samples[0].t}, setting velocity = 0`)
      return 0;
    }

    return (samples[1].d - samples[0].d) / (samples[1].t - samples[0].t);
  } // Guaranteed to have at least 3 points here
  // start with the oldest sample and go forward in time


  let work = 0;

  for (let i = samples.length - 1; i > 0; i--) {
    if (samples[i].t === samples[i - 1].t) {
      // consoleWarn(`Events have identical time stamps t=${samples[i].t}, skipping sample`)
      continue;
    }

    const vprev = kineticEnergyToVelocity(work); // v[i-1]

    const vcurr = (samples[i].d - samples[i - 1].d) / (samples[i].t - samples[i - 1].t); // v[i]

    work += (vcurr - vprev) * Math.abs(vcurr);

    if (i === samples.length - 1) {
      work *= 0.5;
    }
  }

  return kineticEnergyToVelocity(work) * 1000;
}
function useVelocity() {
  const touches = {};

  function addMovement(e) {
    Array.from(e.changedTouches).forEach(touch => {
      var _touches$touch$identi;

      const samples = (_touches$touch$identi = touches[touch.identifier]) != null ? _touches$touch$identi : touches[touch.identifier] = new helpers/* CircularBuffer */.PU(HISTORY);
      samples.push([e.timeStamp, touch]);
    });
  }

  function endTouch(e) {
    Array.from(e.changedTouches).forEach(touch => {
      delete touches[touch.identifier];
    });
  }

  function getVelocity(id) {
    var _touches$id;

    const samples = (_touches$id = touches[id]) == null ? void 0 : _touches$id.values().reverse();

    if (!samples) {
      throw new Error(`No samples for touch id ${id}`);
    }

    const newest = samples[0];
    const x = [];
    const y = [];

    for (const val of samples) {
      if (newest[0] - val[0] > HORIZON) break;
      x.push({
        t: val[0],
        d: val[1].clientX
      });
      y.push({
        t: val[0],
        d: val[1].clientY
      });
    }

    return {
      x: calculateImpulseVelocity(x),
      y: calculateImpulseVelocity(y),

      get direction() {
        const {
          x,
          y
        } = this;
        const [absX, absY] = [Math.abs(x), Math.abs(y)];
        return absX > absY && x >= 0 ? 'right' : absX > absY && x <= 0 ? 'left' : absY > absX && y >= 0 ? 'down' : absY > absX && y <= 0 ? 'up' : oops();
      }

    };
  }

  return {
    addMovement,
    endTouch,
    getVelocity
  };
}

function oops() {
  throw new Error();
}
//# sourceMappingURL=touch.mjs.map
;// CONCATENATED MODULE: ./node_modules/vuetify/lib/components/VNavigationDrawer/touch.mjs


function useTouch(_ref) {
  let {
    isActive,
    isTemporary,
    width,
    touchless,
    position
  } = _ref;
  (0,runtime_core_esm_bundler/* onMounted */.bv)(() => {
    window.addEventListener('touchstart', onTouchstart, {
      passive: true
    });
    window.addEventListener('touchmove', onTouchmove, {
      passive: false
    });
    window.addEventListener('touchend', onTouchend, {
      passive: true
    });
  });
  (0,runtime_core_esm_bundler/* onBeforeUnmount */.Jd)(() => {
    window.removeEventListener('touchstart', onTouchstart);
    window.removeEventListener('touchmove', onTouchmove);
    window.removeEventListener('touchend', onTouchend);
  });
  const isHorizontal = (0,runtime_core_esm_bundler/* computed */.Fl)(() => position.value !== 'bottom');
  const {
    addMovement,
    endTouch,
    getVelocity
  } = useVelocity();
  let maybeDragging = false;
  const isDragging = (0,reactivity_esm_bundler/* ref */.iH)(false);
  const dragProgress = (0,reactivity_esm_bundler/* ref */.iH)(0);
  const offset = (0,reactivity_esm_bundler/* ref */.iH)(0);
  let start;

  function getOffset(pos, active) {
    return (position.value === 'left' ? pos : position.value === 'right' ? document.documentElement.clientWidth - pos : position.value === 'bottom' ? document.documentElement.clientHeight - pos : touch_oops()) - (active ? width.value : 0);
  }

  function getProgress(pos) {
    let limit = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;
    const progress = position.value === 'left' ? (pos - offset.value) / width.value : position.value === 'right' ? (document.documentElement.clientWidth - pos - offset.value) / width.value : position.value === 'bottom' ? (document.documentElement.clientHeight - pos - offset.value) / width.value : touch_oops();
    return limit ? Math.max(0, Math.min(1, progress)) : progress;
  }

  function onTouchstart(e) {
    if (touchless.value) return;
    const touchX = e.changedTouches[0].clientX;
    const touchY = e.changedTouches[0].clientY;
    const touchZone = 25;
    const inTouchZone = position.value === 'left' ? touchX < touchZone : position.value === 'right' ? touchX > document.documentElement.clientWidth - touchZone : position.value === 'bottom' ? touchY > document.documentElement.clientHeight - touchZone : touch_oops();
    const inElement = isActive.value && (position.value === 'left' ? touchX < width.value : position.value === 'right' ? touchX > document.documentElement.clientWidth - width.value : position.value === 'bottom' ? touchY > document.documentElement.clientHeight - width.value : touch_oops());

    if (inTouchZone || inElement || isActive.value && isTemporary.value) {
      maybeDragging = true;
      start = [touchX, touchY];
      offset.value = getOffset(isHorizontal.value ? touchX : touchY, isActive.value);
      dragProgress.value = getProgress(isHorizontal.value ? touchX : touchY);
      endTouch(e);
      addMovement(e);
    }
  }

  function onTouchmove(e) {
    const touchX = e.changedTouches[0].clientX;
    const touchY = e.changedTouches[0].clientY;

    if (maybeDragging) {
      if (!e.cancelable) {
        maybeDragging = false;
        return;
      }

      const dx = Math.abs(touchX - start[0]);
      const dy = Math.abs(touchY - start[1]);
      const thresholdMet = isHorizontal.value ? dx > dy && dx > 3 : dy > dx && dy > 3;

      if (thresholdMet) {
        isDragging.value = true;
        maybeDragging = false;
      } else if ((isHorizontal.value ? dy : dx) > 3) {
        maybeDragging = false;
      }
    }

    if (!isDragging.value) return;
    e.preventDefault();
    addMovement(e);
    const progress = getProgress(isHorizontal.value ? touchX : touchY, false);
    dragProgress.value = Math.max(0, Math.min(1, progress));

    if (progress > 1) {
      offset.value = getOffset(isHorizontal.value ? touchX : touchY, true);
    } else if (progress < 0) {
      offset.value = getOffset(isHorizontal.value ? touchX : touchY, false);
    }
  }

  function onTouchend(e) {
    maybeDragging = false;
    if (!isDragging.value) return;
    addMovement(e);
    isDragging.value = false;
    const velocity = getVelocity(e.changedTouches[0].identifier);
    const vx = Math.abs(velocity.x);
    const vy = Math.abs(velocity.y);
    const thresholdMet = isHorizontal.value ? vx > vy && vx > 400 : vy > vx && vy > 3;

    if (thresholdMet) {
      isActive.value = velocity.direction === ({
        left: 'right',
        right: 'left',
        bottom: 'up'
      }[position.value] || touch_oops());
    } else {
      isActive.value = dragProgress.value > 0.5;
    }
  }

  const dragStyles = (0,runtime_core_esm_bundler/* computed */.Fl)(() => {
    return isDragging.value ? {
      transform: position.value === 'left' ? `translateX(calc(-100% + ${dragProgress.value * width.value}px))` : position.value === 'right' ? `translateX(calc(100% - ${dragProgress.value * width.value}px))` : position.value === 'bottom' ? `translateY(calc(100% - ${dragProgress.value * width.value}px))` : touch_oops(),
      transition: 'none'
    } : undefined;
  });
  return {
    isDragging,
    dragProgress,
    dragStyles
  };
}

function touch_oops() {
  throw new Error();
}
//# sourceMappingURL=touch.mjs.map
;// CONCATENATED MODULE: ./node_modules/vuetify/lib/components/VNavigationDrawer/VNavigationDrawer.mjs

// Styles
 // Composables











 // Utilities


 // Types

const VNavigationDrawer = (0,defineComponent/* defineComponent */.a)({
  name: 'VNavigationDrawer',
  props: {
    color: String,
    disableResizeWatcher: Boolean,
    disableRouteWatcher: Boolean,
    expandOnHover: Boolean,
    floating: Boolean,
    modelValue: {
      type: Boolean,
      default: null
    },
    permanent: Boolean,
    rail: Boolean,
    railWidth: {
      type: [Number, String],
      default: 72
    },
    image: String,
    temporary: Boolean,
    touchless: Boolean,
    width: {
      type: [Number, String],
      default: 256
    },
    position: {
      type: String,
      default: 'left',
      validator: value => ['left', 'right', 'bottom'].includes(value)
    },
    ...makeBorderProps(),
    ...makeElevationProps(),
    ...makeLayoutItemProps(),
    ...makeRoundedProps(),
    ...makeTagProps({
      tag: 'nav'
    }),
    ...(0,composables_theme/* makeThemeProps */.x$)()
  },
  emits: {
    'update:modelValue': val => true
  },

  setup(props, _ref) {
    let {
      attrs,
      slots
    } = _ref;
    const {
      themeClasses
    } = (0,composables_theme/* provideTheme */.ER)(props);
    const {
      borderClasses
    } = useBorder(props);
    const {
      backgroundColorClasses,
      backgroundColorStyles
    } = useBackgroundColor((0,reactivity_esm_bundler/* toRef */.Vh)(props, 'color'));
    const {
      elevationClasses
    } = useElevation(props);
    const {
      mobile
    } = (0,display/* useDisplay */.AW)();
    const {
      roundedClasses
    } = useRounded(props);
    const router = useRouter();
    const isActive = useProxiedModel(props, 'modelValue', null, v => !!v);
    const isHovering = (0,reactivity_esm_bundler/* ref */.iH)(false);
    const width = (0,runtime_core_esm_bundler/* computed */.Fl)(() => {
      return props.rail && props.expandOnHover && isHovering.value ? Number(props.width) : Number(props.rail ? props.railWidth : props.width);
    });
    const isTemporary = (0,runtime_core_esm_bundler/* computed */.Fl)(() => !props.permanent && (mobile.value || props.temporary));

    if (!props.disableResizeWatcher) {
      (0,runtime_core_esm_bundler/* watch */.YP)(isTemporary, val => !props.permanent && (isActive.value = !val));
    }

    if (!props.disableRouteWatcher && router) {
      (0,runtime_core_esm_bundler/* watch */.YP)(router.currentRoute, () => isTemporary.value && (isActive.value = false));
    }

    (0,runtime_core_esm_bundler/* watch */.YP)(() => props.permanent, val => {
      if (val) isActive.value = true;
    });
    (0,runtime_core_esm_bundler/* onBeforeMount */.wF)(() => {
      if (props.modelValue != null || isTemporary.value) return;
      isActive.value = props.permanent || !mobile.value;
    });
    const rootEl = (0,reactivity_esm_bundler/* ref */.iH)();
    const {
      isDragging,
      dragProgress,
      dragStyles
    } = useTouch({
      isActive,
      isTemporary,
      width,
      touchless: (0,reactivity_esm_bundler/* toRef */.Vh)(props, 'touchless'),
      position: (0,reactivity_esm_bundler/* toRef */.Vh)(props, 'position')
    });
    const layoutSize = (0,runtime_core_esm_bundler/* computed */.Fl)(() => {
      const size = isTemporary.value ? 0 : props.rail && props.expandOnHover ? Number(props.railWidth) : width.value;
      return isDragging.value ? size * dragProgress.value : size;
    });
    const {
      layoutItemStyles,
      layoutRect,
      layoutItemScrimStyles
    } = useLayoutItem({
      id: props.name,
      priority: (0,runtime_core_esm_bundler/* computed */.Fl)(() => parseInt(props.priority, 10)),
      position: (0,reactivity_esm_bundler/* toRef */.Vh)(props, 'position'),
      layoutSize,
      elementSize: width,
      active: (0,runtime_core_esm_bundler/* computed */.Fl)(() => isActive.value || isDragging.value),
      disableTransitions: (0,runtime_core_esm_bundler/* computed */.Fl)(() => isDragging.value),
      absolute: (0,reactivity_esm_bundler/* toRef */.Vh)(props, 'absolute')
    });
    const scrimStyles = (0,runtime_core_esm_bundler/* computed */.Fl)(() => ({ ...(isDragging.value ? {
        opacity: dragProgress.value * 0.2,
        transition: 'none'
      } : undefined),
      ...(layoutRect.value ? {
        left: (0,helpers/* convertToUnit */.kb)(layoutRect.value.left),
        right: (0,helpers/* convertToUnit */.kb)(layoutRect.value.right),
        top: (0,helpers/* convertToUnit */.kb)(layoutRect.value.top),
        bottom: (0,helpers/* convertToUnit */.kb)(layoutRect.value.bottom)
      } : undefined),
      ...layoutItemScrimStyles.value
    }));
    return () => {
      var _slots$image, _slots$prepend, _slots$default, _slots$append;

      const hasImage = slots.image || props.image;
      return (0,runtime_core_esm_bundler/* createVNode */.Wm)(runtime_core_esm_bundler/* Fragment */.HY, null, [(0,runtime_core_esm_bundler/* createVNode */.Wm)(props.tag, (0,runtime_core_esm_bundler/* mergeProps */.dG)({
        "ref": rootEl,
        "onMouseenter": () => isHovering.value = true,
        "onMouseleave": () => isHovering.value = false,
        "class": ['v-navigation-drawer', {
          'v-navigation-drawer--bottom': props.position === 'bottom',
          'v-navigation-drawer--end': props.position === 'right',
          'v-navigation-drawer--expand-on-hover': props.expandOnHover,
          'v-navigation-drawer--floating': props.floating,
          'v-navigation-drawer--is-hovering': isHovering.value,
          'v-navigation-drawer--rail': props.rail,
          'v-navigation-drawer--start': props.position === 'left',
          'v-navigation-drawer--temporary': isTemporary.value,
          'v-navigation-drawer--active': isActive.value
        }, themeClasses.value, backgroundColorClasses.value, borderClasses.value, elevationClasses.value, roundedClasses.value],
        "style": [backgroundColorStyles.value, layoutItemStyles.value, dragStyles.value]
      }, attrs), {
        default: () => [hasImage && (0,runtime_core_esm_bundler/* createVNode */.Wm)("div", {
          "class": "v-navigation-drawer__img"
        }, [slots.image ? (_slots$image = slots.image) == null ? void 0 : _slots$image.call(slots, {
          image: props.image
        }) : (0,runtime_core_esm_bundler/* createVNode */.Wm)("img", {
          "src": props.image,
          "alt": ""
        }, null)]), slots.prepend && (0,runtime_core_esm_bundler/* createVNode */.Wm)("div", {
          "class": "v-navigation-drawer__prepend"
        }, [(_slots$prepend = slots.prepend) == null ? void 0 : _slots$prepend.call(slots)]), (0,runtime_core_esm_bundler/* createVNode */.Wm)("div", {
          "class": "v-navigation-drawer__content"
        }, [(_slots$default = slots.default) == null ? void 0 : _slots$default.call(slots)]), slots.append && (0,runtime_core_esm_bundler/* createVNode */.Wm)("div", {
          "class": "v-navigation-drawer__append"
        }, [(_slots$append = slots.append) == null ? void 0 : _slots$append.call(slots)])]
      }), (0,runtime_core_esm_bundler/* createVNode */.Wm)(runtime_dom_esm_bundler/* Transition */.uT, {
        "name": "fade-transition"
      }, {
        default: () => [isTemporary.value && (isDragging.value || isActive.value) && (0,runtime_core_esm_bundler/* createVNode */.Wm)("div", {
          "class": "v-navigation-drawer__scrim",
          "style": scrimStyles.value,
          "onClick": () => isActive.value = false
        }, null)]
      })]);
    };
  }

});
//# sourceMappingURL=VNavigationDrawer.mjs.map
;// CONCATENATED MODULE: ./node_modules/vuetify/lib/components/VNavigationDrawer/index.mjs

//# sourceMappingURL=index.mjs.map
;// CONCATENATED MODULE: ./node_modules/vuetify/lib/composables/hydration.mjs
// Utilities


function useHydration(callback) {
  var _vm$root, _vm$root$appContext, _vm$root$appContext$a;

  if (!globals/* IN_BROWSER */.BR) return;
  const vm = (0,util_getCurrentInstance/* getCurrentInstance */.F)('useHydration');
  const rootEl = vm == null ? void 0 : (_vm$root = vm.root) == null ? void 0 : (_vm$root$appContext = _vm$root.appContext) == null ? void 0 : (_vm$root$appContext$a = _vm$root$appContext.app) == null ? void 0 : _vm$root$appContext$a._container;
  return rootEl != null && rootEl.__vue_app__ ? callback() : (0,runtime_core_esm_bundler/* onMounted */.bv)(callback);
}
//# sourceMappingURL=hydration.mjs.map
;// CONCATENATED MODULE: ./node_modules/vuetify/lib/components/VNoSsr/VNoSsr.mjs
// Composables
 // Utilities



const VNoSsr = (0,defineComponent/* defineComponent */.a)({
  name: 'VNoSsr',

  setup(_, _ref) {
    let {
      slots
    } = _ref;
    const show = (0,reactivity_esm_bundler/* ref */.iH)(false);
    useHydration(() => show.value = true);
    return () => {
      var _slots$default;

      return show.value && ((_slots$default = slots.default) == null ? void 0 : _slots$default.call(slots));
    };
  }

});
//# sourceMappingURL=VNoSsr.mjs.map
;// CONCATENATED MODULE: ./node_modules/vuetify/lib/components/VNoSsr/index.mjs

//# sourceMappingURL=index.mjs.map
;// CONCATENATED MODULE: ./node_modules/vuetify/lib/components/VOverlay/index.mjs

//# sourceMappingURL=index.mjs.map
;// CONCATENATED MODULE: ./node_modules/vuetify/lib/components/VPagination/VPagination.css
// extracted by mini-css-extract-plugin

;// CONCATENATED MODULE: ./node_modules/vuetify/lib/composables/refs.mjs
// Imports

function useRefs() {
  const refs = (0,reactivity_esm_bundler/* ref */.iH)([]);
  (0,runtime_core_esm_bundler/* onBeforeUpdate */.Xn)(() => refs.value = []);

  function updateRef(e, i) {
    refs.value[i] = e;
  }

  return {
    refs,
    updateRef
  };
}
//# sourceMappingURL=refs.mjs.map
;// CONCATENATED MODULE: ./node_modules/vuetify/lib/components/VPagination/VPagination.mjs

 // Components

 // Composables













 // Utilities


 // Types


const VPagination = (0,defineComponent/* defineComponent */.a)({
  name: 'VPagination',
  props: {
    start: {
      type: [Number, String],
      default: 1
    },
    modelValue: {
      type: Number,
      default: props => props.start
    },
    disabled: Boolean,
    length: {
      type: [Number, String],
      default: 1,
      validator: val => val % 1 === 0
    },
    totalVisible: [Number, String],
    firstIcon: {
      type: String,
      default: '$first'
    },
    prevIcon: {
      type: String,
      default: '$prev'
    },
    nextIcon: {
      type: String,
      default: '$next'
    },
    lastIcon: {
      type: String,
      default: '$last'
    },
    ariaLabel: {
      type: String,
      default: '$vuetify.pagination.ariaLabel.root'
    },
    pageAriaLabel: {
      type: String,
      default: '$vuetify.pagination.ariaLabel.page'
    },
    currentPageAriaLabel: {
      type: String,
      default: '$vuetify.pagination.ariaLabel.currentPage'
    },
    firstAriaLabel: {
      type: String,
      default: '$vuetify.pagination.ariaLabel.first'
    },
    previousAriaLabel: {
      type: String,
      default: '$vuetify.pagination.ariaLabel.previous'
    },
    nextAriaLabel: {
      type: String,
      default: '$vuetify.pagination.ariaLabel.next'
    },
    lastAriaLabel: {
      type: String,
      default: '$vuetify.pagination.ariaLabel.last'
    },
    ellipsis: {
      type: String,
      default: '...'
    },
    showFirstLastPage: Boolean,
    ...makeRoundedProps(),
    ...makeBorderProps(),
    ...makeDensityProps(),
    ...makeElevationProps(),
    ...makeSizeProps(),
    ...makeTagProps({
      tag: 'nav'
    }),
    ...(0,composables_theme/* makeThemeProps */.x$)(),
    ...makeVariantProps({
      variant: 'text'
    })
  },
  emits: {
    'update:modelValue': value => true,
    first: value => true,
    prev: value => true,
    next: value => true,
    last: value => true
  },

  setup(props, _ref) {
    let {
      slots,
      emit
    } = _ref;
    const page = useProxiedModel(props, 'modelValue');
    const {
      t,
      n
    } = (0,locale/* useLocale */.bU)();
    const {
      isRtl
    } = (0,rtl/* useRtl */.Vw)();
    const {
      themeClasses
    } = (0,composables_theme/* provideTheme */.ER)(props);
    const maxButtons = (0,reactivity_esm_bundler/* ref */.iH)(-1);
    (0,composables_defaults/* provideDefaults */.AF)(undefined, {
      scoped: true
    });
    const {
      resizeRef
    } = useResizeObserver(entries => {
      if (!entries.length) return;
      const {
        target,
        contentRect
      } = entries[0];
      const firstItem = target.querySelector('.v-pagination__list > *');
      if (!firstItem) return;
      const totalWidth = contentRect.width;
      const itemWidth = firstItem.getBoundingClientRect().width + 10;
      maxButtons.value = Math.max(0, Math.floor((totalWidth - 96) / itemWidth));
    });
    const length = (0,runtime_core_esm_bundler/* computed */.Fl)(() => parseInt(props.length, 10));
    const start = (0,runtime_core_esm_bundler/* computed */.Fl)(() => parseInt(props.start, 10));
    const totalVisible = (0,runtime_core_esm_bundler/* computed */.Fl)(() => {
      var _props$totalVisible;

      if (props.totalVisible) return Math.min(parseInt((_props$totalVisible = props.totalVisible) != null ? _props$totalVisible : '', 10), length.value);else if (maxButtons.value >= 0) return maxButtons.value;
      return length.value;
    });
    const range = (0,runtime_core_esm_bundler/* computed */.Fl)(() => {
      if (length.value <= 0) return [];
      if (totalVisible.value <= 2) return [page.value];

      if (length.value <= totalVisible.value) {
        return (0,helpers/* createRange */.MT)(length.value, start.value);
      }

      const even = totalVisible.value % 2 === 0;
      const middle = even ? totalVisible.value / 2 : Math.floor(totalVisible.value / 2);
      const left = even ? middle : middle + 1;
      const right = length.value - middle;

      if (left - page.value >= 0) {
        return [...(0,helpers/* createRange */.MT)(Math.max(1, totalVisible.value - 1), start.value), props.ellipsis, length.value];
      } else if (page.value - right >= 0) {
        const rangeLength = totalVisible.value - 1;
        const rangeStart = length.value - rangeLength + start.value;
        return [start.value, props.ellipsis, ...(0,helpers/* createRange */.MT)(rangeLength, rangeStart)];
      } else {
        const rangeLength = Math.max(1, totalVisible.value - 3);
        const rangeStart = rangeLength === 1 ? page.value : page.value - Math.ceil(rangeLength / 2) + start.value;
        return [start.value, props.ellipsis, ...(0,helpers/* createRange */.MT)(rangeLength, rangeStart), props.ellipsis, length.value];
      }
    }); // TODO: 'first' | 'prev' | 'next' | 'last' does not work here?

    function setValue(e, value, event) {
      e.preventDefault();
      page.value = value;
      event && emit(event, value);
    }

    const {
      refs,
      updateRef
    } = useRefs();
    (0,composables_defaults/* provideDefaults */.AF)({
      VBtn: {
        border: (0,reactivity_esm_bundler/* toRef */.Vh)(props, 'border'),
        density: (0,reactivity_esm_bundler/* toRef */.Vh)(props, 'density'),
        size: (0,reactivity_esm_bundler/* toRef */.Vh)(props, 'size'),
        variant: (0,reactivity_esm_bundler/* toRef */.Vh)(props, 'variant')
      }
    });
    const items = (0,runtime_core_esm_bundler/* computed */.Fl)(() => {
      return range.value.map((item, index) => {
        const ref = e => updateRef(e, index);

        if (typeof item === 'string') {
          return {
            isActive: false,
            page: item,
            props: {
              ref,
              ellipsis: true,
              icon: true,
              disabled: true
            }
          };
        } else {
          const isActive = item === page.value;
          return {
            isActive,
            page: n(item),
            props: {
              ref,
              ellipsis: false,
              icon: true,
              disabled: !!props.disabled || props.length < 2,
              elevation: props.elevation,
              rounded: props.rounded,
              color: isActive ? props.color : undefined,
              ariaCurrent: isActive,
              ariaLabel: t(isActive ? props.currentPageAriaLabel : props.pageAriaLabel, index + 1),
              onClick: e => setValue(e, item)
            }
          };
        }
      });
    });
    const controls = (0,runtime_core_esm_bundler/* computed */.Fl)(() => {
      const prevDisabled = !!props.disabled || page.value <= start.value;
      const nextDisabled = !!props.disabled || page.value >= start.value + length.value - 1;
      return {
        first: props.showFirstLastPage ? {
          icon: isRtl.value ? props.lastIcon : props.firstIcon,
          onClick: e => setValue(e, start.value, 'first'),
          disabled: prevDisabled,
          ariaLabel: t(props.firstAriaLabel),
          ariaDisabled: prevDisabled
        } : undefined,
        prev: {
          icon: isRtl.value ? props.nextIcon : props.prevIcon,
          onClick: e => setValue(e, page.value - 1, 'prev'),
          disabled: prevDisabled,
          ariaLabel: t(props.previousAriaLabel),
          ariaDisabled: prevDisabled
        },
        next: {
          icon: isRtl.value ? props.prevIcon : props.nextIcon,
          onClick: e => setValue(e, page.value + 1, 'next'),
          disabled: nextDisabled,
          ariaLabel: t(props.nextAriaLabel),
          ariaDisabled: nextDisabled
        },
        last: props.showFirstLastPage ? {
          icon: isRtl.value ? props.firstIcon : props.lastIcon,
          onClick: e => setValue(e, start.value + length.value - 1, 'last'),
          disabled: nextDisabled,
          ariaLabel: t(props.lastAriaLabel),
          ariaDisabled: nextDisabled
        } : undefined
      };
    });

    function updateFocus() {
      var _refs$value$currentIn;

      const currentIndex = page.value - start.value;
      (_refs$value$currentIn = refs.value[currentIndex]) == null ? void 0 : _refs$value$currentIn.$el.focus();
    }

    function onKeydown(e) {
      if (e.key === helpers/* keyValues.left */.ff.left && !props.disabled && page.value > props.start) {
        page.value = page.value - 1;
        (0,runtime_core_esm_bundler/* nextTick */.Y3)(updateFocus);
      } else if (e.key === helpers/* keyValues.right */.ff.right && !props.disabled && page.value < start.value + length.value - 1) {
        page.value = page.value + 1;
        (0,runtime_core_esm_bundler/* nextTick */.Y3)(updateFocus);
      }
    }

    return () => (0,runtime_core_esm_bundler/* createVNode */.Wm)(props.tag, {
      "ref": resizeRef,
      "class": ['v-pagination', themeClasses.value],
      "role": "navigation",
      "aria-label": t(props.ariaLabel),
      "onKeydown": onKeydown,
      "data-test": "v-pagination-root"
    }, {
      default: () => [(0,runtime_core_esm_bundler/* createVNode */.Wm)("ul", {
        "class": "v-pagination__list"
      }, [props.showFirstLastPage && (0,runtime_core_esm_bundler/* createVNode */.Wm)("li", {
        "class": "v-pagination__first",
        "data-test": "v-pagination-first"
      }, [slots.first ? slots.first(controls.value.first) : (0,runtime_core_esm_bundler/* createVNode */.Wm)(VBtn, controls.value.first, null)]), (0,runtime_core_esm_bundler/* createVNode */.Wm)("li", {
        "class": "v-pagination__prev",
        "data-test": "v-pagination-prev"
      }, [slots.prev ? slots.prev(controls.value.prev) : (0,runtime_core_esm_bundler/* createVNode */.Wm)(VBtn, controls.value.prev, null)]), items.value.map((item, index) => (0,runtime_core_esm_bundler/* createVNode */.Wm)("li", {
        "key": `${index}_${item.page}`,
        "class": ['v-pagination__item', {
          'v-pagination__item--is-active': item.isActive
        }],
        "data-test": "v-pagination-item"
      }, [slots.item ? slots.item(item) : (0,runtime_core_esm_bundler/* createVNode */.Wm)(VBtn, item.props, {
        default: () => [item.page]
      })])), (0,runtime_core_esm_bundler/* createVNode */.Wm)("li", {
        "class": "v-pagination__next",
        "data-test": "v-pagination-next"
      }, [slots.next ? slots.next(controls.value.next) : (0,runtime_core_esm_bundler/* createVNode */.Wm)(VBtn, controls.value.next, null)]), props.showFirstLastPage && (0,runtime_core_esm_bundler/* createVNode */.Wm)("li", {
        "class": "v-pagination__last",
        "data-test": "v-pagination-last"
      }, [slots.last ? slots.last(controls.value.last) : (0,runtime_core_esm_bundler/* createVNode */.Wm)(VBtn, controls.value.last, null)])])]
    });
  }

});
//# sourceMappingURL=VPagination.mjs.map
;// CONCATENATED MODULE: ./node_modules/vuetify/lib/components/VPagination/index.mjs

//# sourceMappingURL=index.mjs.map
;// CONCATENATED MODULE: ./node_modules/vuetify/lib/components/VParallax/VParallax.css
// extracted by mini-css-extract-plugin

;// CONCATENATED MODULE: ./node_modules/vuetify/lib/components/VParallax/VParallax.mjs

// Styles
 // Components

 // Composables

 // Utilities




function floor(val) {
  return Math.floor(Math.abs(val)) * Math.sign(val);
}

const VParallax = (0,defineComponent/* defineComponent */.a)({
  name: 'VParallax',
  props: {
    scale: {
      type: [Number, String],
      default: 1.3
    }
  },

  setup(props, _ref) {
    let {
      attrs,
      slots
    } = _ref;
    const root = (0,reactivity_esm_bundler/* ref */.iH)();
    const {
      intersectionRef,
      isIntersecting
    } = useIntersectionObserver();
    (0,runtime_core_esm_bundler/* watchEffect */.m0)(() => {
      var _root$value;

      intersectionRef.value = (_root$value = root.value) == null ? void 0 : _root$value.$el;
    });
    let scrollParent;
    (0,runtime_core_esm_bundler/* watch */.YP)(isIntersecting, val => {
      if (val) {
        scrollParent = getScrollParent(intersectionRef.value);
        scrollParent = scrollParent === document.scrollingElement ? document : scrollParent;
        scrollParent.addEventListener('scroll', onScroll, {
          passive: true
        });
        onScroll();
      } else {
        scrollParent.removeEventListener('scroll', onScroll);
      }
    });
    (0,runtime_core_esm_bundler/* onBeforeUnmount */.Jd)(() => {
      var _scrollParent;

      (_scrollParent = scrollParent) == null ? void 0 : _scrollParent.removeEventListener('scroll', onScroll);
    });
    let frame = -1;

    function onScroll() {
      if (!isIntersecting.value) return;
      cancelAnimationFrame(frame);
      frame = requestAnimationFrame(() => {
        var _root$value2, _scrollParent$clientH, _scrollParent$scrollT;

        const el = ((_root$value2 = root.value) == null ? void 0 : _root$value2.$el).querySelector('.v-img__img');
        if (!el) return;
        const rect = intersectionRef.value.getBoundingClientRect();
        const scrollHeight = (_scrollParent$clientH = scrollParent.clientHeight) != null ? _scrollParent$clientH : window.innerHeight;
        const scrollPos = (_scrollParent$scrollT = scrollParent.scrollTop) != null ? _scrollParent$scrollT : window.scrollY;
        const top = rect.top + scrollPos;
        const progress = (scrollPos + scrollHeight - top) / (rect.height + scrollHeight);
        const translate = floor((rect.height * +props.scale - rect.height) * (-progress + 0.5));
        el.style.setProperty('transform', `translateY(${translate}px) scale(${props.scale})`);
      });
    }

    return () => (0,runtime_core_esm_bundler/* createVNode */.Wm)(VImg, {
      "class": ['v-parallax', {
        'v-parallax--active': isIntersecting.value
      }],
      "ref": root,
      "cover": true,
      "onLoadstart": onScroll,
      "onLoad": onScroll
    }, slots);
  }

});
//# sourceMappingURL=VParallax.mjs.map
;// CONCATENATED MODULE: ./node_modules/vuetify/lib/components/VParallax/index.mjs

//# sourceMappingURL=index.mjs.map
;// CONCATENATED MODULE: ./node_modules/vuetify/lib/components/VProgressCircular/VProgressCircular.css
// extracted by mini-css-extract-plugin

;// CONCATENATED MODULE: ./node_modules/vuetify/lib/components/VProgressCircular/VProgressCircular.mjs

// Styles
 // Composables






 // Utilities


 // Types

const VProgressCircular = (0,defineComponent/* defineComponent */.a)({
  name: 'VProgressCircular',
  props: {
    bgColor: String,
    color: String,
    indeterminate: [Boolean, String],
    modelValue: {
      type: [Number, String],
      default: 0
    },
    rotate: {
      type: [Number, String],
      default: 0
    },
    width: {
      type: [Number, String],
      default: 4
    },
    ...makeSizeProps(),
    ...makeTagProps({
      tag: 'div'
    }),
    ...(0,composables_theme/* makeThemeProps */.x$)()
  },

  setup(props, _ref) {
    let {
      slots
    } = _ref;
    const MAGIC_RADIUS_CONSTANT = 20;
    const CIRCUMFERENCE = 2 * Math.PI * MAGIC_RADIUS_CONSTANT;
    const root = (0,reactivity_esm_bundler/* ref */.iH)();
    const {
      themeClasses
    } = (0,composables_theme/* provideTheme */.ER)(props);
    const {
      sizeClasses,
      sizeStyles
    } = useSize(props);
    const {
      textColorClasses,
      textColorStyles
    } = useTextColor((0,reactivity_esm_bundler/* toRef */.Vh)(props, 'color'));
    const {
      textColorClasses: underlayColorClasses,
      textColorStyles: underlayColorStyles
    } = useTextColor((0,reactivity_esm_bundler/* toRef */.Vh)(props, 'bgColor'));
    const {
      intersectionRef,
      isIntersecting
    } = useIntersectionObserver();
    const {
      resizeRef,
      contentRect
    } = useResizeObserver();
    const normalizedValue = (0,runtime_core_esm_bundler/* computed */.Fl)(() => Math.max(0, Math.min(100, parseFloat(props.modelValue))));
    const width = (0,runtime_core_esm_bundler/* computed */.Fl)(() => Number(props.width));
    const size = (0,runtime_core_esm_bundler/* computed */.Fl)(() => {
      // Get size from element if size prop value is small, large etc
      return sizeStyles.value ? Number(props.size) : contentRect.value ? contentRect.value.width : Math.max(width.value, 32);
    });
    const diameter = (0,runtime_core_esm_bundler/* computed */.Fl)(() => MAGIC_RADIUS_CONSTANT / (1 - width.value / size.value) * 2);
    const strokeWidth = (0,runtime_core_esm_bundler/* computed */.Fl)(() => width.value / size.value * diameter.value);
    const strokeDashOffset = (0,runtime_core_esm_bundler/* computed */.Fl)(() => (0,helpers/* convertToUnit */.kb)((100 - normalizedValue.value) / 100 * CIRCUMFERENCE));
    (0,runtime_core_esm_bundler/* watchEffect */.m0)(() => {
      intersectionRef.value = root.value;
      resizeRef.value = root.value;
    });
    return () => (0,runtime_core_esm_bundler/* createVNode */.Wm)(props.tag, {
      "ref": root,
      "class": ['v-progress-circular', {
        'v-progress-circular--indeterminate': !!props.indeterminate,
        'v-progress-circular--visible': isIntersecting.value,
        'v-progress-circular--disable-shrink': props.indeterminate === 'disable-shrink'
      }, themeClasses.value, sizeClasses.value, textColorClasses.value],
      "style": [sizeStyles.value, textColorStyles.value],
      "role": "progressbar",
      "aria-valuemin": "0",
      "aria-valuemax": "100",
      "aria-valuenow": props.indeterminate ? undefined : normalizedValue.value
    }, {
      default: () => [(0,runtime_core_esm_bundler/* createVNode */.Wm)("svg", {
        "style": {
          transform: `rotate(calc(-90deg + ${Number(props.rotate)}deg))`
        },
        "xmlns": "http://www.w3.org/2000/svg",
        "viewBox": `0 0 ${diameter.value} ${diameter.value}`
      }, [(0,runtime_core_esm_bundler/* createVNode */.Wm)("circle", {
        "class": ['v-progress-circular__underlay', underlayColorClasses.value],
        "style": underlayColorStyles.value,
        "fill": "transparent",
        "cx": "50%",
        "cy": "50%",
        "r": MAGIC_RADIUS_CONSTANT,
        "stroke-width": strokeWidth.value,
        "stroke-dasharray": CIRCUMFERENCE,
        "stroke-dashoffset": 0
      }, null), (0,runtime_core_esm_bundler/* createVNode */.Wm)("circle", {
        "class": "v-progress-circular__overlay",
        "fill": "transparent",
        "cx": "50%",
        "cy": "50%",
        "r": MAGIC_RADIUS_CONSTANT,
        "stroke-width": strokeWidth.value,
        "stroke-dasharray": CIRCUMFERENCE,
        "stroke-dashoffset": strokeDashOffset.value
      }, null)]), slots.default && (0,runtime_core_esm_bundler/* createVNode */.Wm)("div", {
        "class": "v-progress-circular__content"
      }, [slots.default({
        value: normalizedValue.value
      })])]
    });
  }

});
//# sourceMappingURL=VProgressCircular.mjs.map
;// CONCATENATED MODULE: ./node_modules/vuetify/lib/components/VProgressCircular/index.mjs

//# sourceMappingURL=index.mjs.map
;// CONCATENATED MODULE: ./node_modules/vuetify/lib/components/VProgressLinear/index.mjs

//# sourceMappingURL=index.mjs.map
;// CONCATENATED MODULE: ./node_modules/vuetify/lib/components/VRadio/VRadio.mjs

// Components
 // Utility


const VRadio = (0,defineComponent/* defineComponent */.a)({
  name: 'VRadio',
  props: {
    falseIcon: {
      type: String,
      default: '$radioOff'
    },
    trueIcon: {
      type: String,
      default: '$radioOn'
    }
  },

  setup(props, _ref) {
    let {
      slots
    } = _ref;
    useRender(() => (0,runtime_core_esm_bundler/* createVNode */.Wm)(VSelectionControl, {
      "class": "v-radio",
      "trueIcon": props.trueIcon,
      "falseIcon": props.falseIcon,
      "type": "radio"
    }, slots));
    return {};
  }

});
//# sourceMappingURL=VRadio.mjs.map
;// CONCATENATED MODULE: ./node_modules/vuetify/lib/components/VRadio/index.mjs

//# sourceMappingURL=index.mjs.map
;// CONCATENATED MODULE: ./node_modules/vuetify/lib/components/VRadioGroup/VRadioGroup.css
// extracted by mini-css-extract-plugin

;// CONCATENATED MODULE: ./node_modules/vuetify/lib/components/VRadioGroup/VRadioGroup.mjs

// Styles
 // Components




 // Utility



const VRadioGroup = (0,defineComponent/* defineComponent */.a)({
  name: 'VRadioGroup',
  inheritAttrs: false,
  props: {
    height: {
      type: [Number, String],
      default: 'auto'
    },
    ...makeVInputProps(),
    ...makeSelectionControlProps(),
    trueIcon: {
      type: String,
      default: '$radioOn'
    },
    falseIcon: {
      type: String,
      default: '$radioOff'
    },
    type: {
      type: String,
      default: 'radio'
    }
  },

  setup(props, _ref) {
    let {
      attrs,
      slots
    } = _ref;
    const uid = (0,helpers/* getUid */.sq)();
    const id = (0,runtime_core_esm_bundler/* computed */.Fl)(() => props.id || `radio-group-${uid}`);
    useRender(() => {
      const [inputAttrs, controlAttrs] = (0,helpers/* filterInputAttrs */.An)(attrs);
      const [inputProps, _1] = filterInputProps(props);
      const [controlProps, _2] = filterControlProps(props);
      const label = slots.label ? slots.label({
        label: props.label,
        props: {
          for: id.value
        }
      }) : props.label;
      return (0,runtime_core_esm_bundler/* createVNode */.Wm)(VInput, (0,runtime_core_esm_bundler/* mergeProps */.dG)({
        "class": "v-radio-group"
      }, inputAttrs, inputProps), { ...slots,
        default: _ref2 => {
          let {
            isDisabled,
            isReadonly
          } = _ref2;
          return (0,runtime_core_esm_bundler/* createVNode */.Wm)(runtime_core_esm_bundler/* Fragment */.HY, null, [label && (0,runtime_core_esm_bundler/* createVNode */.Wm)(VLabel, {
            "for": id.value
          }, {
            default: () => [label]
          }), (0,runtime_core_esm_bundler/* createVNode */.Wm)(VSelectionControlGroup, (0,runtime_core_esm_bundler/* mergeProps */.dG)(controlProps, {
            "id": id.value,
            "trueIcon": props.trueIcon,
            "falseIcon": props.falseIcon,
            "type": props.type,
            "disabled": isDisabled.value,
            "readonly": isReadonly.value
          }, controlAttrs), slots)]);
        }
      });
    });
    return {};
  }

});
//# sourceMappingURL=VRadioGroup.mjs.map
;// CONCATENATED MODULE: ./node_modules/vuetify/lib/components/VRadioGroup/index.mjs

//# sourceMappingURL=index.mjs.map
;// CONCATENATED MODULE: ./node_modules/vuetify/lib/components/VRangeSlider/VRangeSlider.mjs

// Styles
 // Components



 // Composables



 // Utilities


 // Types


const VRangeSlider = (0,defineComponent/* defineComponent */.a)({
  name: 'VRangeSlider',
  props: { ...makeFocusProps(),
    ...makeVInputProps(),
    ...makeSliderProps(),
    strict: Boolean,
    modelValue: {
      type: Array,
      default: () => [0, 0]
    }
  },
  emits: {
    'update:focused': value => true,
    'update:modelValue': value => true
  },

  setup(props, _ref) {
    let {
      slots,
      attrs
    } = _ref;
    const startThumbRef = (0,reactivity_esm_bundler/* ref */.iH)();
    const stopThumbRef = (0,reactivity_esm_bundler/* ref */.iH)();
    const inputRef = (0,reactivity_esm_bundler/* ref */.iH)();

    function getActiveThumb(e) {
      if (!startThumbRef.value || !stopThumbRef.value) return;
      const startOffset = slider_getOffset(e, startThumbRef.value.$el, props.direction);
      const stopOffset = slider_getOffset(e, stopThumbRef.value.$el, props.direction);
      const a = Math.abs(startOffset);
      const b = Math.abs(stopOffset);
      return a < b || a === b && startOffset < 0 ? startThumbRef.value.$el : stopThumbRef.value.$el;
    }

    const {
      min,
      max,
      mousePressed,
      roundValue,
      onSliderMousedown,
      onSliderTouchstart,
      trackContainerRef,
      position,
      hasLabels,
      activeThumbRef
    } = useSlider({
      /* eslint-disable @typescript-eslint/no-use-before-define */
      props,
      handleSliderMouseUp: newValue => {
        var _startThumbRef$value;

        model.value = activeThumbRef.value === ((_startThumbRef$value = startThumbRef.value) == null ? void 0 : _startThumbRef$value.$el) ? [newValue, model.value[1]] : [model.value[0], newValue];
      },
      handleMouseMove: newValue => {
        var _startThumbRef$value3;

        const [start, stop] = model.value;

        if (!props.strict && start === stop && start !== min.value) {
          var _stopThumbRef$value, _startThumbRef$value2, _activeThumbRef$value;

          activeThumbRef.value = newValue > start ? (_stopThumbRef$value = stopThumbRef.value) == null ? void 0 : _stopThumbRef$value.$el : (_startThumbRef$value2 = startThumbRef.value) == null ? void 0 : _startThumbRef$value2.$el;
          (_activeThumbRef$value = activeThumbRef.value) == null ? void 0 : _activeThumbRef$value.focus();
        }

        if (activeThumbRef.value === ((_startThumbRef$value3 = startThumbRef.value) == null ? void 0 : _startThumbRef$value3.$el)) {
          model.value = [Math.min(newValue, stop), stop];
        } else {
          model.value = [start, Math.max(start, newValue)];
        }
      },
      getActiveThumb
      /* eslint-enable @typescript-eslint/no-use-before-define */

    });
    const model = useProxiedModel(props, 'modelValue', undefined, arr => {
      if (!arr || !arr.length) return [0, 0];
      return arr.map(value => roundValue(value));
    });
    const {
      isFocused,
      focus,
      blur
    } = useFocus(props);
    const trackStart = (0,runtime_core_esm_bundler/* computed */.Fl)(() => position(model.value[0]));
    const trackStop = (0,runtime_core_esm_bundler/* computed */.Fl)(() => position(model.value[1]));
    return () => {
      const [inputProps, _] = filterInputProps(props);
      return (0,runtime_core_esm_bundler/* createVNode */.Wm)(VInput, (0,runtime_core_esm_bundler/* mergeProps */.dG)({
        "class": ['v-slider', 'v-range-slider', {
          'v-slider--has-labels': !!slots['tick-label'] || hasLabels.value,
          'v-slider--focused': isFocused.value,
          'v-slider--pressed': mousePressed.value,
          'v-slider--disabled': props.disabled
        }],
        "ref": inputRef
      }, inputProps, {
        "focused": isFocused.value
      }), { ...slots,
        default: _ref2 => {
          var _startThumbRef$value4, _stopThumbRef$value4;

          let {
            id
          } = _ref2;
          return (0,runtime_core_esm_bundler/* createVNode */.Wm)("div", {
            "class": "v-slider__container",
            "onMousedown": onSliderMousedown,
            "onTouchstartPassive": onSliderTouchstart
          }, [(0,runtime_core_esm_bundler/* createVNode */.Wm)("input", {
            "id": `${id.value}_start`,
            "name": props.name || id.value,
            "disabled": props.disabled,
            "readonly": props.readonly,
            "tabindex": "-1",
            "value": model.value[0]
          }, null), (0,runtime_core_esm_bundler/* createVNode */.Wm)("input", {
            "id": `${id.value}_stop`,
            "name": props.name || id.value,
            "disabled": props.disabled,
            "readonly": props.readonly,
            "tabindex": "-1",
            "value": model.value[1]
          }, null), (0,runtime_core_esm_bundler/* createVNode */.Wm)(VSliderTrack, {
            "ref": trackContainerRef,
            "start": trackStart.value,
            "stop": trackStop.value
          }, {
            'tick-label': slots['tick-label']
          }), (0,runtime_core_esm_bundler/* createVNode */.Wm)(VSliderThumb, {
            "ref": startThumbRef,
            "focused": isFocused && activeThumbRef.value === ((_startThumbRef$value4 = startThumbRef.value) == null ? void 0 : _startThumbRef$value4.$el),
            "modelValue": model.value[0],
            "onUpdate:modelValue": v => model.value = [v, model.value[1]],
            "onFocus": e => {
              var _startThumbRef$value5, _stopThumbRef$value2;

              focus();
              activeThumbRef.value = (_startThumbRef$value5 = startThumbRef.value) == null ? void 0 : _startThumbRef$value5.$el; // Make sure second thumb is focused if
              // the thumbs are on top of each other
              // and they are both at minimum value
              // but only if focused from outside.

              if (model.value[0] === model.value[1] && model.value[1] === min.value && e.relatedTarget !== ((_stopThumbRef$value2 = stopThumbRef.value) == null ? void 0 : _stopThumbRef$value2.$el)) {
                var _startThumbRef$value6, _stopThumbRef$value3;

                (_startThumbRef$value6 = startThumbRef.value) == null ? void 0 : _startThumbRef$value6.$el.blur();
                (_stopThumbRef$value3 = stopThumbRef.value) == null ? void 0 : _stopThumbRef$value3.$el.focus();
              }
            },
            "onBlur": () => {
              blur();
              activeThumbRef.value = undefined;
            },
            "min": min.value,
            "max": model.value[1],
            "position": trackStart.value
          }, {
            'thumb-label': slots['thumb-label']
          }), (0,runtime_core_esm_bundler/* createVNode */.Wm)(VSliderThumb, {
            "ref": stopThumbRef,
            "focused": isFocused && activeThumbRef.value === ((_stopThumbRef$value4 = stopThumbRef.value) == null ? void 0 : _stopThumbRef$value4.$el),
            "modelValue": model.value[1],
            "onUpdate:modelValue": v => model.value = [model.value[0], v],
            "onFocus": e => {
              var _stopThumbRef$value5, _startThumbRef$value7;

              focus();
              activeThumbRef.value = (_stopThumbRef$value5 = stopThumbRef.value) == null ? void 0 : _stopThumbRef$value5.$el; // Make sure first thumb is focused if
              // the thumbs are on top of each other
              // and they are both at maximum value
              // but only if focused from outside.

              if (model.value[0] === model.value[1] && model.value[0] === max.value && e.relatedTarget !== ((_startThumbRef$value7 = startThumbRef.value) == null ? void 0 : _startThumbRef$value7.$el)) {
                var _stopThumbRef$value6, _startThumbRef$value8;

                (_stopThumbRef$value6 = stopThumbRef.value) == null ? void 0 : _stopThumbRef$value6.$el.blur();
                (_startThumbRef$value8 = startThumbRef.value) == null ? void 0 : _startThumbRef$value8.$el.focus();
              }
            },
            "onBlur": () => {
              blur();
              activeThumbRef.value = undefined;
            },
            "min": model.value[0],
            "max": max.value,
            "position": trackStop.value
          }, {
            'thumb-label': slots['thumb-label']
          })]);
        }
      });
    };
  }

});
//# sourceMappingURL=VRangeSlider.mjs.map
;// CONCATENATED MODULE: ./node_modules/vuetify/lib/components/VRangeSlider/index.mjs

//# sourceMappingURL=index.mjs.map
;// CONCATENATED MODULE: ./node_modules/vuetify/lib/components/VRating/VRating.css
// extracted by mini-css-extract-plugin

;// CONCATENATED MODULE: ./node_modules/vuetify/lib/components/VRating/VRating.mjs

// Styles
 // Components

 // Composables






 // Utilities


 // Types

const VRating = (0,defineComponent/* genericComponent */.e)()({
  name: 'VRating',
  props: {
    name: String,
    itemAriaLabel: {
      type: String,
      default: '$vuetify.rating.ariaLabel.item'
    },
    activeColor: String,
    color: String,
    clearable: Boolean,
    disabled: Boolean,
    emptyIcon: {
      type: String,
      default: '$ratingEmpty'
    },
    fullIcon: {
      type: String,
      default: '$ratingFull'
    },
    halfIncrements: Boolean,
    hover: Boolean,
    length: {
      type: [Number, String],
      default: 5
    },
    readonly: Boolean,
    modelValue: {
      type: Number,
      default: 0
    },
    itemLabels: Array,
    itemLabelPosition: {
      type: String,
      default: 'top',
      validator: v => ['top', 'bottom'].includes(v)
    },
    ripple: Boolean,
    ...makeDensityProps(),
    ...makeSizeProps(),
    ...makeTagProps(),
    ...(0,composables_theme/* makeThemeProps */.x$)()
  },
  emits: {
    'update:modelValue': value => true
  },

  setup(props, _ref) {
    let {
      slots
    } = _ref;
    const {
      t
    } = (0,locale/* useLocale */.bU)();
    const {
      themeClasses
    } = (0,composables_theme/* provideTheme */.ER)(props);
    const rating = useProxiedModel(props, 'modelValue');
    const range = (0,runtime_core_esm_bundler/* computed */.Fl)(() => (0,helpers/* createRange */.MT)(Number(props.length), 1));
    const increments = (0,runtime_core_esm_bundler/* computed */.Fl)(() => range.value.flatMap(v => props.halfIncrements ? [v - 0.5, v] : [v]));
    const hoverIndex = (0,reactivity_esm_bundler/* ref */.iH)(-1);
    const focusIndex = (0,reactivity_esm_bundler/* ref */.iH)(-1);
    const firstRef = (0,reactivity_esm_bundler/* ref */.iH)();
    let isClicking = false;
    const itemState = (0,runtime_core_esm_bundler/* computed */.Fl)(() => increments.value.map(value => {
      var _props$activeColor;

      const isHovering = props.hover && hoverIndex.value > -1;
      const isFilled = rating.value >= value;
      const isHovered = hoverIndex.value >= value;
      const isFullIcon = isHovering ? isHovered : isFilled;
      const icon = isFullIcon ? props.fullIcon : props.emptyIcon;
      const activeColor = (_props$activeColor = props.activeColor) != null ? _props$activeColor : props.color;
      const color = isFilled || isHovered ? activeColor : props.color;
      return {
        isFilled,
        isHovered,
        icon,
        color
      };
    }));
    const eventState = (0,runtime_core_esm_bundler/* computed */.Fl)(() => [0, ...increments.value].map(value => {
      function onMouseenter() {
        hoverIndex.value = value;
      }

      function onMouseleave() {
        hoverIndex.value = -1;
      }

      function onFocus() {
        if (value === 0 && rating.value === 0) {
          var _firstRef$value;

          (_firstRef$value = firstRef.value) == null ? void 0 : _firstRef$value.focus();
        } else {
          focusIndex.value = value;
        }
      }

      function onBlur() {
        if (!isClicking) focusIndex.value = -1;
      }

      function onClick() {
        if (props.disabled || props.readonly) return;
        rating.value = rating.value === value && props.clearable ? 0 : value;
      }

      return {
        onMouseenter: props.hover ? onMouseenter : undefined,
        onMouseleave: props.hover ? onMouseleave : undefined,
        onFocus,
        onBlur,
        onClick
      };
    }));

    function onMousedown() {
      isClicking = true;
    }

    function onMouseup() {
      isClicking = false;
    }

    const name = (0,runtime_core_esm_bundler/* computed */.Fl)(() => {
      var _props$name;

      return (_props$name = props.name) != null ? _props$name : `v-rating-${(0,helpers/* getUid */.sq)()}`;
    });

    function VRatingItem(_ref2) {
      var _itemState$value$inde, _itemState$value$inde2;

      let {
        value,
        index,
        showStar = true
      } = _ref2;
      const {
        onMouseenter,
        onMouseleave,
        onFocus,
        onBlur,
        onClick
      } = eventState.value[index + 1];
      const id = `${name.value}-${String(value).replace('.', '-')}`;
      const btnProps = {
        color: (_itemState$value$inde = itemState.value[index]) == null ? void 0 : _itemState$value$inde.color,
        density: props.density,
        disabled: props.disabled,
        icon: (_itemState$value$inde2 = itemState.value[index]) == null ? void 0 : _itemState$value$inde2.icon,
        ripple: props.ripple,
        size: props.size,
        tag: 'span',
        variant: 'plain'
      };
      return (0,runtime_core_esm_bundler/* createVNode */.Wm)(runtime_core_esm_bundler/* Fragment */.HY, null, [(0,runtime_core_esm_bundler/* createVNode */.Wm)("label", {
        "for": id,
        "class": {
          'v-rating__item--half': props.halfIncrements && value % 1 > 0,
          'v-rating__item--full': props.halfIncrements && value % 1 === 0
        },
        "onMousedown": onMousedown,
        "onMouseup": onMouseup,
        "onMouseenter": onMouseenter,
        "onMouseleave": onMouseleave
      }, [(0,runtime_core_esm_bundler/* createVNode */.Wm)("span", {
        "class": "v-rating__hidden"
      }, [t(props.itemAriaLabel, value, props.length)]), !showStar ? undefined : slots.item ? slots.item({ ...itemState.value[index],
        props: btnProps,
        value,
        index
      }) : (0,runtime_core_esm_bundler/* createVNode */.Wm)(VBtn, btnProps, null)]), (0,runtime_core_esm_bundler/* createVNode */.Wm)("input", {
        "class": "v-rating__hidden",
        "name": name.value,
        "id": id,
        "type": "radio",
        "value": value,
        "checked": rating.value === value,
        "onClick": onClick,
        "onFocus": onFocus,
        "onBlur": onBlur,
        "ref": index === 0 ? firstRef : undefined,
        "readonly": props.readonly,
        "disabled": props.disabled
      }, null)]);
    }

    function createLabel(labelProps) {
      if (slots['item-label']) return slots['item-label'](labelProps);
      if (labelProps.label) return (0,runtime_core_esm_bundler/* createVNode */.Wm)("span", null, [labelProps.label]);
      return (0,runtime_core_esm_bundler/* createVNode */.Wm)("span", null, [(0,runtime_core_esm_bundler/* createTextVNode */.Uk)("\xA0")]);
    }

    return () => {
      var _props$itemLabels;

      const hasLabels = !!((_props$itemLabels = props.itemLabels) != null && _props$itemLabels.length) || slots['item-label'];
      return (0,runtime_core_esm_bundler/* createVNode */.Wm)(props.tag, {
        "class": ['v-rating', {
          'v-rating--hover': props.hover,
          'v-rating--readonly': props.readonly
        }, themeClasses.value]
      }, {
        default: () => [(0,runtime_core_esm_bundler/* createVNode */.Wm)(VRatingItem, {
          "value": 0,
          "index": -1,
          "showStar": false
        }, null), range.value.map((value, i) => {
          var _props$itemLabels2, _props$itemLabels3;

          return (0,runtime_core_esm_bundler/* createVNode */.Wm)("div", {
            "class": "v-rating__wrapper"
          }, [hasLabels && props.itemLabelPosition === 'top' ? createLabel({
            value,
            index: i,
            label: (_props$itemLabels2 = props.itemLabels) == null ? void 0 : _props$itemLabels2[i]
          }) : undefined, (0,runtime_core_esm_bundler/* createVNode */.Wm)("div", {
            "class": ['v-rating__item', {
              'v-rating__item--focused': Math.ceil(focusIndex.value) === value
            }]
          }, [props.halfIncrements ? (0,runtime_core_esm_bundler/* createVNode */.Wm)(runtime_core_esm_bundler/* Fragment */.HY, null, [(0,runtime_core_esm_bundler/* createVNode */.Wm)(VRatingItem, {
            "value": value - 0.5,
            "index": i * 2
          }, null), (0,runtime_core_esm_bundler/* createVNode */.Wm)(VRatingItem, {
            "value": value,
            "index": i * 2 + 1
          }, null)]) : (0,runtime_core_esm_bundler/* createVNode */.Wm)(VRatingItem, {
            "value": value,
            "index": i
          }, null)]), hasLabels && props.itemLabelPosition === 'bottom' ? createLabel({
            value,
            index: i,
            label: (_props$itemLabels3 = props.itemLabels) == null ? void 0 : _props$itemLabels3[i]
          }) : undefined]);
        })]
      });
    };
  }

});
//# sourceMappingURL=VRating.mjs.map
;// CONCATENATED MODULE: ./node_modules/vuetify/lib/components/VRating/index.mjs

//# sourceMappingURL=index.mjs.map
;// CONCATENATED MODULE: ./node_modules/vuetify/lib/components/VResponsive/index.mjs

//# sourceMappingURL=index.mjs.map
;// CONCATENATED MODULE: ./node_modules/vuetify/lib/components/VSelect/index.mjs

//# sourceMappingURL=index.mjs.map
;// CONCATENATED MODULE: ./node_modules/vuetify/lib/components/VSelectionControl/index.mjs

//# sourceMappingURL=index.mjs.map
;// CONCATENATED MODULE: ./node_modules/vuetify/lib/components/VSelectionControlGroup/index.mjs

//# sourceMappingURL=index.mjs.map
;// CONCATENATED MODULE: ./node_modules/vuetify/lib/components/VSheet/index.mjs

//# sourceMappingURL=index.mjs.map
;// CONCATENATED MODULE: ./node_modules/vuetify/lib/components/VSlideGroup/VSlideGroup.css
// extracted by mini-css-extract-plugin

;// CONCATENATED MODULE: ./node_modules/vuetify/lib/components/VSlideGroup/helpers.mjs
function bias(val) {
  const c = 0.501;
  const x = Math.abs(val);
  return Math.sign(val) * (x / ((1 / c - 2) * (1 - x) + 1));
}
function calculateUpdatedOffset(_ref) {
  let {
    selectedElement,
    containerSize,
    contentSize,
    isRtl,
    currentScrollOffset,
    isHorizontal
  } = _ref;
  const clientSize = isHorizontal ? selectedElement.clientWidth : selectedElement.clientHeight;
  const offsetStart = isHorizontal ? selectedElement.offsetLeft : selectedElement.offsetTop;
  const adjustedOffsetStart = isRtl ? contentSize - offsetStart - clientSize : offsetStart;

  if (isRtl) {
    currentScrollOffset = -currentScrollOffset;
  }

  const totalSize = containerSize + currentScrollOffset;
  const itemOffset = clientSize + adjustedOffsetStart;
  const additionalOffset = clientSize * 0.4;

  if (adjustedOffsetStart <= currentScrollOffset) {
    currentScrollOffset = Math.max(adjustedOffsetStart - additionalOffset, 0);
  } else if (totalSize <= itemOffset) {
    currentScrollOffset = Math.min(currentScrollOffset - (totalSize - itemOffset - additionalOffset), contentSize - containerSize);
  }

  return isRtl ? -currentScrollOffset : currentScrollOffset;
}
function calculateCenteredOffset(_ref2) {
  let {
    selectedElement,
    containerSize,
    contentSize,
    isRtl,
    isHorizontal
  } = _ref2;
  const clientSize = isHorizontal ? selectedElement.clientWidth : selectedElement.clientHeight;
  const offsetStart = isHorizontal ? selectedElement.offsetLeft : selectedElement.offsetTop;

  if (isRtl) {
    const offsetCentered = contentSize - offsetStart - clientSize / 2 - containerSize / 2;
    return -Math.min(contentSize - containerSize, Math.max(0, offsetCentered));
  } else {
    const offsetCentered = offsetStart + clientSize / 2 - containerSize / 2;
    return Math.min(contentSize - containerSize, Math.max(0, offsetCentered));
  }
}
//# sourceMappingURL=helpers.mjs.map
;// CONCATENATED MODULE: ./node_modules/vuetify/lib/components/VSlideGroup/VSlideGroup.mjs

// Styles
 // Components


 // Composables





 // Utilities



 // Types

const VSlideGroupSymbol = Symbol.for('vuetify:v-slide-group');
const VSlideGroup = (0,defineComponent/* defineComponent */.a)({
  name: 'VSlideGroup',
  props: {
    centerActive: Boolean,
    direction: {
      type: String,
      default: 'horizontal'
    },
    symbol: {
      type: null,
      default: VSlideGroupSymbol
    },
    nextIcon: {
      type: String,
      default: '$next'
    },
    prevIcon: {
      type: String,
      default: '$prev'
    },
    showArrows: {
      type: [Boolean, String],
      validator: v => typeof v === 'boolean' || ['always', 'desktop', 'mobile'].includes(v)
    },
    ...makeTagProps(),
    ...makeGroupProps({
      selectedClass: 'v-slide-group-item--active'
    })
  },
  emits: {
    'update:modelValue': value => true
  },

  setup(props, _ref) {
    let {
      slots
    } = _ref;
    const {
      isRtl
    } = (0,rtl/* useRtl */.Vw)();
    const {
      mobile
    } = (0,display/* useDisplay */.AW)();
    const group = useGroup(props, props.symbol);
    const isOverflowing = (0,reactivity_esm_bundler/* ref */.iH)(false);
    const scrollOffset = (0,reactivity_esm_bundler/* ref */.iH)(0);
    const containerSize = (0,reactivity_esm_bundler/* ref */.iH)(0);
    const contentSize = (0,reactivity_esm_bundler/* ref */.iH)(0);
    const isHorizontal = (0,runtime_core_esm_bundler/* computed */.Fl)(() => props.direction === 'horizontal');
    const {
      resizeRef: containerRef,
      contentRect: containerRect
    } = useResizeObserver();
    const {
      resizeRef: contentRef,
      contentRect
    } = useResizeObserver();
    (0,runtime_core_esm_bundler/* watchEffect */.m0)(() => {
      if (!containerRect.value || !contentRect.value) return;
      const sizeProperty = isHorizontal.value ? 'width' : 'height';
      containerSize.value = containerRect.value[sizeProperty];
      contentSize.value = contentRect.value[sizeProperty];
      isOverflowing.value = containerSize.value + 1 < contentSize.value;
    });
    const firstSelectedIndex = (0,runtime_core_esm_bundler/* computed */.Fl)(() => {
      if (!group.selected.value.length) return -1;
      return group.items.value.findIndex(item => item.id === group.selected.value[0]);
    });
    const lastSelectedIndex = (0,runtime_core_esm_bundler/* computed */.Fl)(() => {
      if (!group.selected.value.length) return -1;
      return group.items.value.findIndex(item => item.id === group.selected.value[group.selected.value.length - 1]);
    });
    (0,runtime_core_esm_bundler/* watch */.YP)(group.selected, () => {
      if (firstSelectedIndex.value < 0 || !contentRef.value) return; // TODO: Is this too naive? Should we store element references in group composable?

      const selectedElement = contentRef.value.children[lastSelectedIndex.value];

      if (firstSelectedIndex.value === 0 || !isOverflowing.value) {
        scrollOffset.value = 0;
      } else if (props.centerActive) {
        scrollOffset.value = calculateCenteredOffset({
          selectedElement,
          containerSize: containerSize.value,
          contentSize: contentSize.value,
          isRtl: isRtl.value,
          isHorizontal: isHorizontal.value
        });
      } else if (isOverflowing.value) {
        scrollOffset.value = calculateUpdatedOffset({
          selectedElement,
          containerSize: containerSize.value,
          contentSize: contentSize.value,
          isRtl: isRtl.value,
          currentScrollOffset: scrollOffset.value,
          isHorizontal: isHorizontal.value
        });
      }
    });
    let firstOverflow = true;
    (0,runtime_core_esm_bundler/* watch */.YP)(isOverflowing, () => {
      if (!firstOverflow || !contentRef.value || firstSelectedIndex.value < 0) return;
      firstOverflow = false; // TODO: Is this too naive? Should we store element references in group composable?

      const selectedElement = contentRef.value.children[firstSelectedIndex.value];
      scrollOffset.value = calculateCenteredOffset({
        selectedElement,
        containerSize: containerSize.value,
        contentSize: contentSize.value,
        isRtl: isRtl.value,
        isHorizontal: isHorizontal.value
      });
    });
    const disableTransition = (0,reactivity_esm_bundler/* ref */.iH)(false);
    let startTouch = 0;
    let startOffset = 0;

    function onTouchstart(e) {
      const sizeProperty = isHorizontal.value ? 'clientX' : 'clientY';
      startOffset = scrollOffset.value;
      startTouch = e.touches[0][sizeProperty];
      disableTransition.value = true;
    }

    function onTouchmove(e) {
      if (!isOverflowing.value) return;
      const sizeProperty = isHorizontal.value ? 'clientX' : 'clientY';
      scrollOffset.value = startOffset + startTouch - e.touches[0][sizeProperty];
    }

    function onTouchend(e) {
      const maxScrollOffset = contentSize.value - containerSize.value;

      if (isRtl.value) {
        if (scrollOffset.value > 0 || !isOverflowing.value) {
          scrollOffset.value = 0;
        } else if (scrollOffset.value <= -maxScrollOffset) {
          scrollOffset.value = -maxScrollOffset;
        }
      } else {
        if (scrollOffset.value < 0 || !isOverflowing.value) {
          scrollOffset.value = 0;
        } else if (scrollOffset.value >= maxScrollOffset) {
          scrollOffset.value = maxScrollOffset;
        }
      }

      disableTransition.value = false;
    }

    function onScroll() {
      containerRef.value && (containerRef.value.scrollLeft = 0);
    }

    const isFocused = (0,reactivity_esm_bundler/* ref */.iH)(false);

    function onFocusin(e) {
      isFocused.value = true;
      if (!isOverflowing.value || !contentRef.value) return; // Focused element is likely to be the root of an item, so a
      // breadth-first search will probably find it in the first iteration

      for (const el of e.composedPath()) {
        for (const item of contentRef.value.children) {
          if (item === el) {
            scrollOffset.value = calculateUpdatedOffset({
              selectedElement: item,
              containerSize: containerSize.value,
              contentSize: contentSize.value,
              isRtl: isRtl.value,
              currentScrollOffset: scrollOffset.value,
              isHorizontal: isHorizontal.value
            });
            return;
          }
        }
      }
    }

    function onFocusout(e) {
      isFocused.value = false;
    }

    function onFocus(e) {
      var _contentRef$value;

      if (!isFocused.value && !(e.relatedTarget && (_contentRef$value = contentRef.value) != null && _contentRef$value.contains(e.relatedTarget))) focus();
    }

    function onKeydown(e) {
      if (!contentRef.value) return;

      if (e.key === (isHorizontal.value ? 'ArrowRight' : 'ArrowDown')) {
        focus('next');
      } else if (e.key === (isHorizontal.value ? 'ArrowLeft' : 'ArrowUp')) {
        focus('prev');
      } else if (e.key === 'Home') {
        focus('first');
      } else if (e.key === 'End') {
        focus('last');
      }
    }

    function focus(location) {
      if (!contentRef.value) return;

      if (!location) {
        var _focusable$;

        contentRef.value.querySelector('[tabindex]');
        const focusable = [...contentRef.value.querySelectorAll('button, [href], input, select, textarea, [tabindex]:not([tabindex="-1"])')].filter(el => !el.hasAttribute('disabled'));
        (_focusable$ = focusable[0]) == null ? void 0 : _focusable$.focus();
      } else if (location === 'next') {
        var _contentRef$value$que;

        const el = (_contentRef$value$que = contentRef.value.querySelector(':focus')) == null ? void 0 : _contentRef$value$que.nextElementSibling;
        if (el) el.focus();else focus('first');
      } else if (location === 'prev') {
        var _contentRef$value$que2;

        const el = (_contentRef$value$que2 = contentRef.value.querySelector(':focus')) == null ? void 0 : _contentRef$value$que2.previousElementSibling;
        if (el) el.focus();else focus('last');
      } else if (location === 'first') {
        var _contentRef$value$fir;

        (_contentRef$value$fir = contentRef.value.firstElementChild) == null ? void 0 : _contentRef$value$fir.focus();
      } else if (location === 'last') {
        var _contentRef$value$las;

        (_contentRef$value$las = contentRef.value.lastElementChild) == null ? void 0 : _contentRef$value$las.focus();
      }
    }

    function scrollTo(location) {
      const sign = isRtl.value ? -1 : 1;
      const newAbosluteOffset = sign * scrollOffset.value + (location === 'prev' ? -1 : 1) * containerSize.value;
      scrollOffset.value = sign * (0,helpers/* clamp */.uZ)(newAbosluteOffset, 0, contentSize.value - containerSize.value);
    }

    const contentStyles = (0,runtime_core_esm_bundler/* computed */.Fl)(() => {
      const scrollAmount = scrollOffset.value <= 0 ? bias(-scrollOffset.value) : scrollOffset.value > contentSize.value - containerSize.value ? -(contentSize.value - containerSize.value) + bias(contentSize.value - containerSize.value - scrollOffset.value) : -scrollOffset.value;
      return {
        transform: `translate${isHorizontal.value ? 'X' : 'Y'}(${scrollAmount}px)`,
        transition: disableTransition.value ? 'none' : '',
        willChange: disableTransition.value ? 'transform' : ''
      };
    });
    const slotProps = (0,runtime_core_esm_bundler/* computed */.Fl)(() => ({
      next: group.next,
      prev: group.prev,
      select: group.select,
      isSelected: group.isSelected
    }));
    const hasAffixes = (0,runtime_core_esm_bundler/* computed */.Fl)(() => {
      switch (props.showArrows) {
        // Always show arrows on desktop & mobile
        case 'always':
          return true;
        // Always show arrows on desktop

        case 'desktop':
          return !mobile.value;
        // Show arrows on mobile when overflowing.
        // This matches the default 2.2 behavior

        case true:
          return isOverflowing.value || Math.abs(scrollOffset.value) > 0;
        // Always show on mobile

        case 'mobile':
          return mobile.value || isOverflowing.value || Math.abs(scrollOffset.value) > 0;
        // https://material.io/components/tabs#scrollable-tabs
        // Always show arrows when
        // overflowed on desktop

        default:
          return !mobile.value && (isOverflowing.value || Math.abs(scrollOffset.value) > 0);
      }
    });
    const hasPrev = (0,runtime_core_esm_bundler/* computed */.Fl)(() => {
      return hasAffixes.value && scrollOffset.value > 0;
    });
    const hasNext = (0,runtime_core_esm_bundler/* computed */.Fl)(() => {
      if (!hasAffixes.value) return false; // Check one scroll ahead to know the width of right-most item

      return contentSize.value > Math.abs(scrollOffset.value) + containerSize.value;
    });
    useRender(() => {
      var _slots$prev, _slots$prev2, _slots$default, _slots$next, _slots$next2;

      return (0,runtime_core_esm_bundler/* createVNode */.Wm)(props.tag, {
        "class": ['v-slide-group', {
          'v-slide-group--vertical': !isHorizontal.value,
          'v-slide-group--has-affixes': hasAffixes.value,
          'v-slide-group--is-overflowing': isOverflowing.value
        }],
        "tabindex": isFocused.value || group.selected.value.length ? -1 : 0,
        "onFocus": onFocus
      }, {
        default: () => [hasAffixes.value && (0,runtime_core_esm_bundler/* createVNode */.Wm)("div", {
          "class": ['v-slide-group__prev', {
            'v-slide-group__prev--disabled': !hasPrev.value
          }],
          "onClick": () => scrollTo('prev')
        }, [(_slots$prev = (_slots$prev2 = slots.prev) == null ? void 0 : _slots$prev2.call(slots, slotProps.value)) != null ? _slots$prev : (0,runtime_core_esm_bundler/* createVNode */.Wm)(VFadeTransition, null, {
          default: () => [(0,runtime_core_esm_bundler/* createVNode */.Wm)(VIcon, {
            "icon": props.prevIcon
          }, null)]
        })]), (0,runtime_core_esm_bundler/* createVNode */.Wm)("div", {
          "ref": containerRef,
          "class": "v-slide-group__container",
          "onScroll": onScroll
        }, [(0,runtime_core_esm_bundler/* createVNode */.Wm)("div", {
          "ref": contentRef,
          "class": "v-slide-group__content",
          "style": contentStyles.value,
          "onTouchstartPassive": onTouchstart,
          "onTouchmovePassive": onTouchmove,
          "onTouchendPassive": onTouchend,
          "onFocusin": onFocusin,
          "onFocusout": onFocusout,
          "onKeydown": onKeydown
        }, [(_slots$default = slots.default) == null ? void 0 : _slots$default.call(slots, slotProps.value)])]), hasAffixes.value && (0,runtime_core_esm_bundler/* createVNode */.Wm)("div", {
          "class": ['v-slide-group__next', {
            'v-slide-group__next--disabled': !hasNext.value
          }],
          "onClick": () => scrollTo('next')
        }, [(_slots$next = (_slots$next2 = slots.next) == null ? void 0 : _slots$next2.call(slots, slotProps.value)) != null ? _slots$next : (0,runtime_core_esm_bundler/* createVNode */.Wm)(VFadeTransition, null, {
          default: () => [(0,runtime_core_esm_bundler/* createVNode */.Wm)(VIcon, {
            "icon": props.nextIcon
          }, null)]
        })])]
      });
    });
    return {
      selected: group.selected,
      scrollTo,
      scrollOffset,
      focus
    };
  }

});
//# sourceMappingURL=VSlideGroup.mjs.map
;// CONCATENATED MODULE: ./node_modules/vuetify/lib/components/VSlideGroup/VSlideGroupItem.mjs
// Composables

 // Utilities


const VSlideGroupItem = (0,defineComponent/* defineComponent */.a)({
  name: 'VSlideGroupItem',
  props: { ...makeGroupItemProps()
  },

  setup(props, _ref) {
    let {
      slots
    } = _ref;
    const slideGroupItem = useGroupItem(props, VSlideGroupSymbol);
    return () => {
      var _slots$default;

      return (_slots$default = slots.default) == null ? void 0 : _slots$default.call(slots, {
        isSelected: slideGroupItem.isSelected.value,
        select: slideGroupItem.select,
        toggle: slideGroupItem.toggle,
        selectedClass: slideGroupItem.selectedClass.value
      });
    };
  }

});
//# sourceMappingURL=VSlideGroupItem.mjs.map
;// CONCATENATED MODULE: ./node_modules/vuetify/lib/components/VSlideGroup/index.mjs


//# sourceMappingURL=index.mjs.map
;// CONCATENATED MODULE: ./node_modules/vuetify/lib/components/VSlider/index.mjs

//# sourceMappingURL=index.mjs.map
;// CONCATENATED MODULE: ./node_modules/vuetify/lib/components/VSnackbar/VSnackbar.css
// extracted by mini-css-extract-plugin

;// CONCATENATED MODULE: ./node_modules/vuetify/lib/components/VSnackbar/VSnackbar.mjs

// Styles
 // Components


 // Composables




 // Utilities




const VSnackbar = (0,defineComponent/* defineComponent */.a)({
  name: 'VSnackbar',
  props: {
    app: Boolean,
    centered: Boolean,
    contentClass: {
      type: String,
      default: ''
    },
    multiLine: Boolean,
    timeout: {
      type: [Number, String],
      default: 5000
    },
    vertical: Boolean,
    modelValue: Boolean,
    ...makePositionProps(),
    ...makeRoundedProps(),
    ...makeVariantProps(),
    ...makeTransitionProps({
      transition: 'v-snackbar-transition'
    })
  },
  emits: {
    'update:modelValue': v => true
  },

  setup(props, _ref) {
    let {
      slots
    } = _ref;
    const isActive = useProxiedModel(props, 'modelValue');
    const {
      positionClasses,
      positionStyles
    } = usePosition(props);
    const {
      colorClasses,
      colorStyles,
      variantClasses
    } = useVariant(props);
    const {
      roundedClasses
    } = useRounded(props);
    (0,runtime_core_esm_bundler/* watch */.YP)(isActive, startTimeout);
    (0,runtime_core_esm_bundler/* watch */.YP)(() => props.timeout, startTimeout);
    (0,runtime_core_esm_bundler/* onMounted */.bv)(() => {
      if (isActive.value) startTimeout();
    });
    let activeTimeout = -1;

    function startTimeout() {
      window.clearTimeout(activeTimeout);
      const timeout = Number(props.timeout);
      if (!isActive.value || timeout === -1) return;
      activeTimeout = window.setTimeout(() => {
        isActive.value = false;
      }, timeout);
    }

    function onPointerenter() {
      window.clearTimeout(activeTimeout);
    }

    useRender(() => {
      var _slots$default, _slots$actions;

      return (0,runtime_core_esm_bundler/* createVNode */.Wm)(VOverlay, {
        "modelValue": isActive.value,
        "onUpdate:modelValue": $event => isActive.value = $event,
        "class": ['v-snackbar', {
          'v-snackbar--active': isActive.value,
          'v-snackbar--bottom': props.bottom || !props.top,
          'v-snackbar--centered': props.centered,
          'v-snackbar--end': props.right,
          'v-snackbar--multi-line': props.multiLine && !props.vertical,
          'v-snackbar--start': props.left,
          'v-snackbar--top': props.top,
          'v-snackbar--vertical': props.vertical
        }, positionClasses.value],
        "style": [colorStyles.value, positionStyles.value],
        "persistent": true,
        "noClickAnimation": true,
        "scrim": false,
        "scrollStrategy": "none",
        "transition": props.transition
      }, {
        default: () => [(0,runtime_core_esm_bundler/* createVNode */.Wm)("div", {
          "class": ['v-snackbar__wrapper', colorClasses.value, roundedClasses.value, variantClasses.value],
          "onPointerenter": onPointerenter,
          "onPointerleave": startTimeout
        }, [genOverlays(false, 'v-snackbar'), slots.default && (0,runtime_core_esm_bundler/* createVNode */.Wm)("div", {
          "class": ['v-snackbar__content', props.contentClass],
          "role": "status",
          "aria-live": "polite"
        }, [(_slots$default = slots.default) == null ? void 0 : _slots$default.call(slots)]), slots.actions && (0,runtime_core_esm_bundler/* createVNode */.Wm)(VDefaultsProvider, {
          "defaults": {
            VBtn: {
              variant: 'text',
              ripple: false
            }
          }
        }, {
          default: () => [(0,runtime_core_esm_bundler/* createVNode */.Wm)("div", {
            "class": "v-snackbar__actions"
          }, [(_slots$actions = slots.actions) == null ? void 0 : _slots$actions.call(slots)])]
        })])],
        activator: slots.activator
      });
    });
  }

});
//# sourceMappingURL=VSnackbar.mjs.map
;// CONCATENATED MODULE: ./node_modules/vuetify/lib/components/VSnackbar/index.mjs

//# sourceMappingURL=index.mjs.map
;// CONCATENATED MODULE: ./node_modules/vuetify/lib/components/VSwitch/VSwitch.css
// extracted by mini-css-extract-plugin

;// CONCATENATED MODULE: ./node_modules/vuetify/lib/components/VSwitch/VSwitch.mjs

// Styles
 // Components



 // Composables


 // Utility



const VSwitch = (0,defineComponent/* defineComponent */.a)({
  name: 'VSwitch',
  inheritAttrs: false,
  props: {
    indeterminate: Boolean,
    inset: Boolean,
    flat: Boolean,
    loading: {
      type: [Boolean, String],
      default: false
    },
    ...makeVInputProps(),
    ...makeSelectionControlProps()
  },
  emits: {
    'update:indeterminate': val => true
  },

  setup(props, _ref) {
    let {
      attrs,
      slots
    } = _ref;
    const indeterminate = useProxiedModel(props, 'indeterminate');
    const {
      loaderClasses
    } = useLoader(props);
    const loaderColor = (0,runtime_core_esm_bundler/* computed */.Fl)(() => {
      return typeof props.loading === 'string' && props.loading !== '' ? props.loading : props.color;
    });

    function onChange() {
      if (indeterminate.value) {
        indeterminate.value = false;
      }
    }

    useRender(() => {
      const [inputAttrs, controlAttrs] = (0,helpers/* filterInputAttrs */.An)(attrs);
      const [inputProps, _1] = filterInputProps(props);
      const [controlProps, _2] = filterControlProps(props);
      const control = (0,reactivity_esm_bundler/* ref */.iH)();

      function onClick() {
        var _control$value, _control$value$input;

        (_control$value = control.value) == null ? void 0 : (_control$value$input = _control$value.input) == null ? void 0 : _control$value$input.click();
      }

      return (0,runtime_core_esm_bundler/* createVNode */.Wm)(VInput, (0,runtime_core_esm_bundler/* mergeProps */.dG)({
        "class": ['v-switch', {
          'v-switch--inset': props.inset
        }, {
          'v-switch--indeterminate': indeterminate.value
        }, loaderClasses.value]
      }, inputAttrs, inputProps), { ...slots,
        default: _ref2 => {
          let {
            isDisabled,
            isReadonly,
            isValid
          } = _ref2;
          return (0,runtime_core_esm_bundler/* createVNode */.Wm)(VSelectionControl, (0,runtime_core_esm_bundler/* mergeProps */.dG)({
            "ref": control
          }, controlProps, {
            "type": "checkbox",
            "onUpdate:modelValue": onChange,
            "aria-checked": indeterminate.value ? 'mixed' : undefined,
            "disabled": isDisabled.value,
            "readonly": isReadonly.value
          }, controlAttrs), { ...slots,
            default: () => (0,runtime_core_esm_bundler/* createVNode */.Wm)("div", {
              "class": "v-switch__track",
              "onClick": onClick
            }, null),
            input: _ref3 => {
              let {
                textColorClasses
              } = _ref3;
              return (0,runtime_core_esm_bundler/* createVNode */.Wm)("div", {
                "class": ['v-switch__thumb', textColorClasses.value]
              }, [props.loading && (0,runtime_core_esm_bundler/* createVNode */.Wm)(LoaderSlot, {
                "name": "v-switch",
                "active": true,
                "color": isValid.value === false ? undefined : loaderColor.value
              }, {
                default: slotProps => slots.loader ? slots.loader(slotProps) : (0,runtime_core_esm_bundler/* createVNode */.Wm)(VProgressCircular, {
                  "active": slotProps.isActive,
                  "color": slotProps.color,
                  "indeterminate": true,
                  "size": "16",
                  "width": "2"
                }, null)
              })]);
            }
          });
        }
      });
    });
    return {};
  }

});
//# sourceMappingURL=VSwitch.mjs.map
;// CONCATENATED MODULE: ./node_modules/vuetify/lib/components/VSwitch/index.mjs

//# sourceMappingURL=index.mjs.map
;// CONCATENATED MODULE: ./node_modules/vuetify/lib/components/VSystemBar/VSystemBar.css
// extracted by mini-css-extract-plugin

;// CONCATENATED MODULE: ./node_modules/vuetify/lib/components/VSystemBar/VSystemBar.mjs

// Styles
 // Composables







 // Utilities



const VSystemBar = (0,defineComponent/* defineComponent */.a)({
  name: 'VSystemBar',
  props: {
    color: String,
    height: [Number, String],
    window: Boolean,
    ...makeElevationProps(),
    ...makeLayoutItemProps(),
    ...makeRoundedProps(),
    ...makeTagProps(),
    ...(0,composables_theme/* makeThemeProps */.x$)()
  },

  setup(props, _ref) {
    let {
      slots
    } = _ref;
    const {
      themeClasses
    } = (0,composables_theme/* provideTheme */.ER)(props);
    const {
      backgroundColorClasses,
      backgroundColorStyles
    } = useBackgroundColor((0,reactivity_esm_bundler/* toRef */.Vh)(props, 'color'));
    const {
      elevationClasses
    } = useElevation(props);
    const {
      roundedClasses
    } = useRounded(props);
    const height = (0,runtime_core_esm_bundler/* computed */.Fl)(() => {
      var _props$height;

      return ((_props$height = props.height) != null ? _props$height : props.window) ? 32 : 24;
    });
    const {
      layoutItemStyles
    } = useLayoutItem({
      id: props.name,
      priority: (0,runtime_core_esm_bundler/* computed */.Fl)(() => parseInt(props.priority, 10)),
      position: (0,reactivity_esm_bundler/* ref */.iH)('top'),
      layoutSize: height,
      elementSize: height,
      active: (0,runtime_core_esm_bundler/* computed */.Fl)(() => true),
      absolute: (0,reactivity_esm_bundler/* toRef */.Vh)(props, 'absolute')
    });
    (0,composables_defaults/* provideDefaults */.AF)({
      VBtn: {
        variant: 'text',
        density: 'compact'
      }
    }, {
      scoped: true
    });
    return () => (0,runtime_core_esm_bundler/* createVNode */.Wm)(props.tag, {
      "class": ['v-system-bar', {
        'v-system-bar--window': props.window
      }, themeClasses.value, backgroundColorClasses.value, elevationClasses.value, roundedClasses.value],
      "style": [backgroundColorStyles.value, layoutItemStyles.value]
    }, slots);
  }

});
//# sourceMappingURL=VSystemBar.mjs.map
;// CONCATENATED MODULE: ./node_modules/vuetify/lib/components/VSystemBar/index.mjs

//# sourceMappingURL=index.mjs.map
;// CONCATENATED MODULE: ./node_modules/vuetify/lib/components/VTabs/VTabs.css
// extracted by mini-css-extract-plugin

;// CONCATENATED MODULE: ./node_modules/vuetify/lib/components/VTabs/VTab.css
// extracted by mini-css-extract-plugin

;// CONCATENATED MODULE: ./node_modules/vuetify/lib/components/VTabs/shared.mjs
const VTabsSymbol = Symbol.for('vuetify:v-tabs');
//# sourceMappingURL=shared.mjs.map
;// CONCATENATED MODULE: ./node_modules/vuetify/lib/components/VTabs/VTab.mjs

// Styles
 // Components

 // Composables





 // Utilities



 // Types

const VTab = (0,defineComponent/* defineComponent */.a)({
  name: 'VTab',
  props: {
    fixed: Boolean,
    icon: [Boolean, String],
    prependIcon: String,
    appendIcon: String,
    stacked: Boolean,
    title: String,
    ripple: {
      type: Boolean,
      default: true
    },
    color: String,
    sliderColor: String,
    hideSlider: Boolean,
    direction: {
      type: String,
      default: 'horizontal'
    },
    ...makeTagProps(),
    ...makeRouterProps(),
    ...makeGroupItemProps({
      selectedClass: 'v-tab--selected'
    }),
    ...(0,composables_theme/* makeThemeProps */.x$)()
  },

  setup(props, _ref) {
    let {
      slots,
      attrs
    } = _ref;
    const {
      textColorClasses: sliderColorClasses,
      textColorStyles: sliderColorStyles
    } = useTextColor(props, 'sliderColor');
    const isHorizontal = (0,runtime_core_esm_bundler/* computed */.Fl)(() => props.direction === 'horizontal');
    const isSelected = (0,reactivity_esm_bundler/* ref */.iH)(false);
    const rootEl = (0,reactivity_esm_bundler/* ref */.iH)();
    const sliderEl = (0,reactivity_esm_bundler/* ref */.iH)();

    function updateSlider(_ref2) {
      let {
        value
      } = _ref2;
      isSelected.value = value;

      if (value) {
        var _rootEl$value, _rootEl$value$$el$par;

        const prevEl = (_rootEl$value = rootEl.value) == null ? void 0 : (_rootEl$value$$el$par = _rootEl$value.$el.parentElement) == null ? void 0 : _rootEl$value$$el$par.querySelector('.v-tab--selected .v-tab__slider');
        const nextEl = sliderEl.value;
        if (!prevEl || !nextEl) return;
        const color = getComputedStyle(prevEl).color;
        const prevBox = prevEl.getBoundingClientRect();
        const nextBox = nextEl.getBoundingClientRect();
        const xy = isHorizontal.value ? 'x' : 'y';
        const XY = isHorizontal.value ? 'X' : 'Y';
        const rightBottom = isHorizontal.value ? 'right' : 'bottom';
        const widthHeight = isHorizontal.value ? 'width' : 'height';
        const prevPos = prevBox[xy];
        const nextPos = nextBox[xy];
        const delta = prevPos > nextPos ? prevBox[rightBottom] - nextBox[rightBottom] : prevBox[xy] - nextBox[xy];
        const origin = Math.sign(delta) > 0 ? isHorizontal.value ? 'right' : 'bottom' : Math.sign(delta) < 0 ? isHorizontal.value ? 'left' : 'top' : 'center';
        const size = Math.abs(delta) + (Math.sign(delta) < 0 ? prevBox[widthHeight] : nextBox[widthHeight]);
        const scale = size / Math.max(prevBox[widthHeight], nextBox[widthHeight]);
        const initialScale = prevBox[widthHeight] / nextBox[widthHeight];
        const sigma = 1.5;
        nextEl.animate({
          backgroundColor: [color, ''],
          transform: [`translate${XY}(${delta}px) scale${XY}(${initialScale})`, `translate${XY}(${delta / sigma}px) scale${XY}(${(scale - 1) / sigma + 1})`, ''],
          transformOrigin: Array(3).fill(origin)
        }, {
          duration: 225,
          easing: standardEasing
        });
      }
    }

    useRender(() => {
      const [btnProps] = (0,helpers/* pick */.ei)(props, ['href', 'to', 'replace', 'icon', 'stacked', 'prependIcon', 'appendIcon', 'ripple', 'theme', 'disabled', 'selectedClass', 'value', 'color']);
      return (0,runtime_core_esm_bundler/* createVNode */.Wm)(VBtn, (0,runtime_core_esm_bundler/* mergeProps */.dG)({
        "_as": "VTab",
        "symbol": VTabsSymbol,
        "ref": rootEl,
        "class": ['v-tab'],
        "tabindex": isSelected.value ? 0 : -1,
        "role": "tab",
        "aria-selected": String(isSelected.value),
        "block": props.fixed,
        "maxWidth": props.fixed ? 300 : undefined,
        "variant": "text",
        "rounded": 0
      }, btnProps, attrs, {
        "onGroup:selected": updateSlider
      }), {
        default: () => [slots.default ? slots.default() : props.title, !props.hideSlider && (0,runtime_core_esm_bundler/* createVNode */.Wm)("div", {
          "ref": sliderEl,
          "class": ['v-tab__slider', sliderColorClasses.value],
          "style": sliderColorStyles.value
        }, null)]
      });
    });
    return {};
  }

});
//# sourceMappingURL=VTab.mjs.map
;// CONCATENATED MODULE: ./node_modules/vuetify/lib/components/VTabs/VTabs.mjs

// Styles
 // Components


 // Composables




 // Utilities



 // Types

function VTabs_parseItems(items) {
  if (!items) return [];
  return items.map(item => {
    if (typeof item === 'string') return {
      title: item,
      value: item
    };
    return item;
  });
}

const VTabs = (0,defineComponent/* defineComponent */.a)({
  name: 'VTabs',
  props: {
    alignWithTitle: Boolean,
    color: String,
    direction: {
      type: String,
      default: 'horizontal'
    },
    fixedTabs: Boolean,
    items: {
      type: Array,
      default: () => []
    },
    stacked: Boolean,
    backgroundColor: String,
    centered: Boolean,
    grow: Boolean,
    height: {
      type: [Number, String],
      default: undefined
    },
    hideSlider: Boolean,
    optional: Boolean,
    end: Boolean,
    sliderColor: String,
    modelValue: null,
    ...makeDensityProps(),
    ...makeTagProps()
  },
  emits: {
    'update:modelValue': v => true
  },

  setup(props, _ref) {
    let {
      slots,
      emit
    } = _ref;
    const parsedItems = (0,runtime_core_esm_bundler/* computed */.Fl)(() => VTabs_parseItems(props.items));
    const {
      densityClasses
    } = useDensity(props);
    const {
      backgroundColorClasses,
      backgroundColorStyles
    } = useBackgroundColor((0,reactivity_esm_bundler/* toRef */.Vh)(props, 'backgroundColor'));
    (0,composables_defaults/* provideDefaults */.AF)({
      VTab: {
        color: (0,reactivity_esm_bundler/* toRef */.Vh)(props, 'color'),
        direction: (0,reactivity_esm_bundler/* toRef */.Vh)(props, 'direction'),
        stacked: (0,reactivity_esm_bundler/* toRef */.Vh)(props, 'stacked'),
        fixed: (0,reactivity_esm_bundler/* toRef */.Vh)(props, 'fixedTabs'),
        sliderColor: (0,reactivity_esm_bundler/* toRef */.Vh)(props, 'sliderColor'),
        hideSlider: (0,reactivity_esm_bundler/* toRef */.Vh)(props, 'hideSlider')
      }
    });
    return () => (0,runtime_core_esm_bundler/* createVNode */.Wm)(VSlideGroup, {
      "class": ['v-tabs', `v-tabs--${props.direction}`, {
        'v-tabs--align-with-title': props.alignWithTitle,
        'v-tabs--centered': props.centered,
        'v-tabs--fixed-tabs': props.fixedTabs,
        'v-tabs--grow': props.grow,
        'v-tabs--end': props.end,
        'v-tabs--stacked': props.stacked
      }, densityClasses.value, backgroundColorClasses.value],
      "style": backgroundColorStyles.value,
      "role": "tablist",
      "symbol": VTabsSymbol,
      "mandatory": "force",
      "direction": props.direction,
      "modelValue": props.modelValue,
      "onUpdate:modelValue": v => emit('update:modelValue', v)
    }, {
      default: () => [slots.default ? slots.default() : parsedItems.value.map(item => (0,runtime_core_esm_bundler/* createVNode */.Wm)(VTab, (0,runtime_core_esm_bundler/* mergeProps */.dG)(item, {
        "key": item.title
      }), null))]
    });
  }

});
//# sourceMappingURL=VTabs.mjs.map
;// CONCATENATED MODULE: ./node_modules/vuetify/lib/components/VTabs/index.mjs


//# sourceMappingURL=index.mjs.map
;// CONCATENATED MODULE: ./node_modules/vuetify/lib/components/VTable/VTable.css
// extracted by mini-css-extract-plugin

;// CONCATENATED MODULE: ./node_modules/vuetify/lib/components/VTable/VTable.mjs

// Styles
 // Composables


 // Utilities



const VTable = (0,defineComponent/* defineComponent */.a)({
  name: 'VTable',
  props: {
    fixedHeader: Boolean,
    fixedFooter: Boolean,
    height: [Number, String],
    ...makeDensityProps(),
    ...(0,composables_theme/* makeThemeProps */.x$)(),
    ...makeTagProps()
  },

  setup(props, _ref) {
    let {
      slots
    } = _ref;
    const {
      themeClasses
    } = (0,composables_theme/* provideTheme */.ER)(props);
    const {
      densityClasses
    } = useDensity(props);
    return () => {
      var _slots$top, _slots$default, _slots$bottom;

      return (0,runtime_core_esm_bundler/* createVNode */.Wm)(props.tag, {
        "class": ['v-table', {
          'v-table--fixed-height': !!props.height,
          'v-table--fixed-header': props.fixedHeader,
          'v-table--fixed-footer': props.fixedFooter,
          'v-table--has-top': !!slots.top,
          'v-table--has-bottom': !!slots.bottom
        }, themeClasses.value, densityClasses.value]
      }, {
        default: () => [(_slots$top = slots.top) == null ? void 0 : _slots$top.call(slots), slots.default && (0,runtime_core_esm_bundler/* createVNode */.Wm)("div", {
          "class": "v-table__wrapper",
          "style": {
            height: (0,helpers/* convertToUnit */.kb)(props.height)
          }
        }, [(0,runtime_core_esm_bundler/* createVNode */.Wm)("table", null, [(_slots$default = slots.default) == null ? void 0 : _slots$default.call(slots)])]), (_slots$bottom = slots.bottom) == null ? void 0 : _slots$bottom.call(slots)]
      });
    };
  }

});
//# sourceMappingURL=VTable.mjs.map
;// CONCATENATED MODULE: ./node_modules/vuetify/lib/components/VTable/index.mjs

//# sourceMappingURL=index.mjs.map
;// CONCATENATED MODULE: ./node_modules/vuetify/lib/components/VTextarea/VTextarea.css
// extracted by mini-css-extract-plugin

;// CONCATENATED MODULE: ./node_modules/vuetify/lib/components/VTextarea/VTextarea.mjs

// Styles
 // Components




 // Composables


 // Directives

 // Utilities


 // Types

const VTextarea = (0,defineComponent/* defineComponent */.a)({
  name: 'VTextarea',
  directives: {
    Intersect: intersect/* default */.Z
  },
  inheritAttrs: false,
  props: {
    autoGrow: Boolean,
    autofocus: Boolean,
    counter: [Boolean, Number, String],
    counterValue: Function,
    hint: String,
    persistentHint: Boolean,
    prefix: String,
    placeholder: String,
    persistentPlaceholder: Boolean,
    persistentCounter: Boolean,
    noResize: Boolean,
    rows: {
      type: [Number, String],
      default: 5,
      validator: v => !isNaN(parseFloat(v))
    },
    maxRows: {
      type: [Number, String],
      validator: v => !isNaN(parseFloat(v))
    },
    suffix: String,
    ...makeVInputProps(),
    ...makeVFieldProps()
  },
  emits: {
    'click:clear': e => true,
    'click:control': e => true,
    'update:modelValue': val => true
  },

  setup(props, _ref) {
    let {
      attrs,
      emit,
      slots
    } = _ref;
    const model = useProxiedModel(props, 'modelValue');
    const counterValue = (0,runtime_core_esm_bundler/* computed */.Fl)(() => {
      return typeof props.counterValue === 'function' ? props.counterValue(model.value) : (model.value || '').toString().length;
    });
    const max = (0,runtime_core_esm_bundler/* computed */.Fl)(() => {
      if (attrs.maxlength) return attrs.maxlength;
      if (!props.counter || typeof props.counter !== 'number' && typeof props.counter !== 'string') return undefined;
      return props.counter;
    });

    function onIntersect(isIntersecting, entries) {
      var _entries$0$target, _entries$0$target$foc;

      if (!props.autofocus || !isIntersecting) return;
      (_entries$0$target = entries[0].target) == null ? void 0 : (_entries$0$target$foc = _entries$0$target.focus) == null ? void 0 : _entries$0$target$foc.call(_entries$0$target);
    }

    const vInputRef = (0,reactivity_esm_bundler/* ref */.iH)();
    const vFieldRef = (0,reactivity_esm_bundler/* ref */.iH)();
    const isFocused = (0,reactivity_esm_bundler/* ref */.iH)(false);
    const controlHeight = (0,reactivity_esm_bundler/* ref */.iH)('auto');
    const textareaRef = (0,reactivity_esm_bundler/* ref */.iH)();
    const isActive = (0,runtime_core_esm_bundler/* computed */.Fl)(() => isFocused.value || props.persistentPlaceholder);
    const messages = (0,runtime_core_esm_bundler/* computed */.Fl)(() => {
      return props.messages.length ? props.messages : isActive.value || props.persistentHint ? props.hint : '';
    });

    function onFocus() {
      if (textareaRef.value !== document.activeElement) {
        var _textareaRef$value;

        (_textareaRef$value = textareaRef.value) == null ? void 0 : _textareaRef$value.focus();
      }

      if (!isFocused.value) isFocused.value = true;
    }

    function onControlClick(e) {
      onFocus();
      emit('click:control', e);
    }

    function onClear(e) {
      e.stopPropagation();
      onFocus();
      (0,runtime_core_esm_bundler/* nextTick */.Y3)(() => {
        model.value = '';
        emit('click:clear', e);
      });
    }

    const sizerRef = (0,reactivity_esm_bundler/* ref */.iH)();

    function calculateInputHeight() {
      if (!props.autoGrow) return;
      (0,runtime_core_esm_bundler/* nextTick */.Y3)(() => {
        if (!sizerRef.value) return;
        const style = getComputedStyle(sizerRef.value);
        const padding = parseFloat(style.getPropertyValue('--v-field-padding-top')) + parseFloat(style.getPropertyValue('--v-field-padding-bottom'));
        const height = sizerRef.value.scrollHeight;
        const lineHeight = parseFloat(style.lineHeight);
        const minHeight = parseFloat(props.rows) * lineHeight + padding;
        const maxHeight = parseFloat(props.maxRows) * lineHeight + padding || Infinity;
        controlHeight.value = (0,helpers/* convertToUnit */.kb)(Math.min(maxHeight, Math.max(minHeight, height != null ? height : 0)));
      });
    }

    (0,runtime_core_esm_bundler/* onMounted */.bv)(calculateInputHeight);
    (0,runtime_core_esm_bundler/* watch */.YP)(model, calculateInputHeight);
    (0,runtime_core_esm_bundler/* watch */.YP)(() => props.rows, calculateInputHeight);
    (0,runtime_core_esm_bundler/* watch */.YP)(() => props.maxRows, calculateInputHeight);
    let observer;
    (0,runtime_core_esm_bundler/* watch */.YP)(sizerRef, val => {
      if (val) {
        observer = new ResizeObserver(calculateInputHeight);
        observer.observe(sizerRef.value);
      } else {
        var _observer;

        (_observer = observer) == null ? void 0 : _observer.disconnect();
      }
    });
    (0,runtime_core_esm_bundler/* onBeforeUnmount */.Jd)(() => {
      var _observer2;

      (_observer2 = observer) == null ? void 0 : _observer2.disconnect();
    });
    useRender(() => {
      const hasCounter = !!(slots.counter || props.counter || props.counterValue);
      const [rootAttrs, inputAttrs] = (0,helpers/* filterInputAttrs */.An)(attrs);
      const [{
        modelValue: _,
        ...inputProps
      }] = filterInputProps(props);
      const [fieldProps] = filterFieldProps(props);
      return (0,runtime_core_esm_bundler/* createVNode */.Wm)(VInput, (0,runtime_core_esm_bundler/* mergeProps */.dG)({
        "modelValue": model.value,
        "onUpdate:modelValue": $event => model.value = $event,
        "class": ['v-textarea', {
          'v-textarea--prefixed': props.prefix,
          'v-textarea--suffixed': props.suffix,
          'v-textarea--auto-grow': props.autoGrow,
          'v-textarea--no-resize': props.noResize || props.autoGrow
        }]
      }, rootAttrs, inputProps, {
        "messages": messages.value
      }), { ...slots,
        default: _ref2 => {
          let {
            isDisabled,
            isDirty,
            isReadonly,
            isValid
          } = _ref2;
          return (0,runtime_core_esm_bundler/* createVNode */.Wm)(VField, (0,runtime_core_esm_bundler/* mergeProps */.dG)({
            "style": {
              '--v-input-control-height': controlHeight.value
            },
            "onClick:control": onControlClick,
            "onClick:clear": onClear,
            "role": "textbox"
          }, fieldProps, {
            "active": isActive.value || isDirty.value,
            "dirty": isDirty.value || props.dirty,
            "focused": isFocused.value,
            "error": isValid.value === false
          }), { ...slots,
            default: _ref3 => {
              let {
                props: {
                  class: fieldClass,
                  ...slotProps
                }
              } = _ref3;
              return (0,runtime_core_esm_bundler/* createVNode */.Wm)(runtime_core_esm_bundler/* Fragment */.HY, null, [props.prefix && (0,runtime_core_esm_bundler/* createVNode */.Wm)("span", {
                "class": "v-text-field__prefix"
              }, [props.prefix]), (0,runtime_core_esm_bundler/* withDirectives */.wy)((0,runtime_core_esm_bundler/* createVNode */.Wm)("textarea", (0,runtime_core_esm_bundler/* mergeProps */.dG)({
                "ref": textareaRef,
                "class": fieldClass,
                "onUpdate:modelValue": $event => model.value = $event,
                "autofocus": props.autofocus,
                "readonly": isReadonly.value,
                "disabled": isDisabled.value,
                "placeholder": props.placeholder,
                "rows": props.rows,
                "name": props.name,
                "onFocus": onFocus,
                "onBlur": () => isFocused.value = false
              }, slotProps, inputAttrs), null), [[runtime_dom_esm_bundler/* vModelText */.nr, model.value], [(0,runtime_core_esm_bundler/* resolveDirective */.Q2)("intersect"), {
                handler: onIntersect
              }, null, {
                once: true
              }]]), props.autoGrow && (0,runtime_core_esm_bundler/* withDirectives */.wy)((0,runtime_core_esm_bundler/* createVNode */.Wm)("textarea", {
                "class": [fieldClass, 'v-textarea__sizer'],
                "onUpdate:modelValue": $event => model.value = $event,
                "ref": sizerRef,
                "readonly": true,
                "aria-hidden": "true"
              }, null), [[runtime_dom_esm_bundler/* vModelText */.nr, model.value]]), props.suffix && (0,runtime_core_esm_bundler/* createVNode */.Wm)("span", {
                "class": "v-text-field__suffix"
              }, [props.suffix])]);
            }
          });
        },
        details: hasCounter ? () => (0,runtime_core_esm_bundler/* createVNode */.Wm)(runtime_core_esm_bundler/* Fragment */.HY, null, [(0,runtime_core_esm_bundler/* createVNode */.Wm)("span", null, null), (0,runtime_core_esm_bundler/* createVNode */.Wm)(VCounter, {
          "active": props.persistentCounter || isFocused.value,
          "value": counterValue.value,
          "max": max.value
        }, slots.counter)]) : undefined
      });
    });
    return useForwardRef({}, vInputRef, vFieldRef, textareaRef);
  }

});
//# sourceMappingURL=VTextarea.mjs.map
;// CONCATENATED MODULE: ./node_modules/vuetify/lib/components/VTextarea/index.mjs

//# sourceMappingURL=index.mjs.map
;// CONCATENATED MODULE: ./node_modules/vuetify/lib/components/VTextField/index.mjs

//# sourceMappingURL=index.mjs.map
;// CONCATENATED MODULE: ./node_modules/vuetify/lib/components/VThemeProvider/VThemeProvider.css
// extracted by mini-css-extract-plugin

;// CONCATENATED MODULE: ./node_modules/vuetify/lib/components/VThemeProvider/VThemeProvider.mjs

// Styles
 // Composables


 // Utilities


const VThemeProvider = (0,defineComponent/* defineComponent */.a)({
  name: 'VThemeProvider',
  props: {
    withBackground: Boolean,
    ...(0,composables_theme/* makeThemeProps */.x$)(),
    ...makeTagProps()
  },

  setup(props, _ref) {
    let {
      slots
    } = _ref;
    const {
      themeClasses
    } = (0,composables_theme/* provideTheme */.ER)(props);
    return () => {
      var _slots$default, _slots$default2;

      if (!props.withBackground) return (_slots$default = slots.default) == null ? void 0 : _slots$default.call(slots);
      return (0,runtime_core_esm_bundler/* createVNode */.Wm)(props.tag, {
        "class": ['v-theme-provider', themeClasses.value]
      }, {
        default: () => [(_slots$default2 = slots.default) == null ? void 0 : _slots$default2.call(slots)]
      });
    };
  }

});
//# sourceMappingURL=VThemeProvider.mjs.map
;// CONCATENATED MODULE: ./node_modules/vuetify/lib/components/VThemeProvider/index.mjs

//# sourceMappingURL=index.mjs.map
;// CONCATENATED MODULE: ./node_modules/vuetify/lib/components/VTimeline/VTimeline.css
// extracted by mini-css-extract-plugin

;// CONCATENATED MODULE: ./node_modules/vuetify/lib/components/VTimeline/shared.mjs
const VTimelineSymbol = Symbol.for('vuetify:timeline');
//# sourceMappingURL=shared.mjs.map
;// CONCATENATED MODULE: ./node_modules/vuetify/lib/components/VTimeline/VTimeline.mjs

// Styles
 // Composables



 // Helpers



 // Types

const VTimeline = (0,defineComponent/* defineComponent */.a)({
  name: 'VTimeline',
  props: {
    align: {
      type: String,
      default: 'center',
      validator: v => ['center', 'start'].includes(v)
    },
    direction: {
      type: String,
      default: 'vertical',
      validator: v => ['vertical', 'horizontal'].includes(v)
    },
    side: {
      type: String,
      validator: v => v == null || ['start', 'end'].includes(v)
    },
    lineInset: {
      type: [String, Number],
      default: 0
    },
    lineThickness: {
      type: [String, Number],
      default: 2
    },
    lineColor: String,
    truncateLine: {
      type: String,
      validator: v => ['start', 'end', 'both'].includes(v)
    },
    ...makeDensityProps(),
    ...makeTagProps(),
    ...(0,composables_theme/* makeThemeProps */.x$)()
  },

  setup(props, _ref) {
    let {
      slots
    } = _ref;
    const {
      themeClasses
    } = (0,composables_theme/* provideTheme */.ER)(props);
    const {
      densityClasses
    } = useDensity(props);
    (0,runtime_core_esm_bundler/* provide */.JJ)(VTimelineSymbol, {
      density: (0,reactivity_esm_bundler/* toRef */.Vh)(props, 'density'),
      lineColor: (0,reactivity_esm_bundler/* toRef */.Vh)(props, 'lineColor')
    });
    const sideClass = (0,runtime_core_esm_bundler/* computed */.Fl)(() => {
      const side = props.side ? props.side : props.density !== 'default' ? 'end' : null;
      return side && `v-timeline--side-${side}`;
    });
    const truncateClasses = (0,runtime_core_esm_bundler/* computed */.Fl)(() => {
      const classes = ['v-timeline--truncate-line-start', 'v-timeline--truncate-line-end'];

      switch (props.truncateLine) {
        case 'both':
          return classes;

        case 'start':
          return classes[0];

        case 'end':
          return classes[1];

        default:
          return null;
      }
    });
    return () => {
      var _slots$default;

      return (0,runtime_core_esm_bundler/* createVNode */.Wm)(props.tag, {
        "class": ['v-timeline', `v-timeline--${props.direction}`, `v-timeline--align-${props.align}`, !props.lineInset && truncateClasses.value, {
          'v-timeline--inset-line': !!props.lineInset
        }, themeClasses.value, densityClasses.value, sideClass.value],
        "style": {
          '--v-timeline-line-thickness': (0,helpers/* convertToUnit */.kb)(props.lineThickness),
          '--v-timeline-line-inset': (0,helpers/* convertToUnit */.kb)(props.lineInset)
        }
      }, {
        default: () => [(_slots$default = slots.default) == null ? void 0 : _slots$default.call(slots)]
      });
    };
  }

});
//# sourceMappingURL=VTimeline.mjs.map
;// CONCATENATED MODULE: ./node_modules/vuetify/lib/components/VTimeline/VTimelineDivider.mjs

// Components

 // Composables




 // Utilities



const VTimelineDivider = (0,defineComponent/* defineComponent */.a)({
  name: 'VTimelineDivider',
  props: {
    hideDot: Boolean,
    lineColor: String,
    icon: String,
    iconColor: String,
    fillDot: Boolean,
    dotColor: String,
    ...makeRoundedProps(),
    ...makeSizeProps(),
    ...makeElevationProps()
  },

  setup(props, _ref) {
    let {
      slots
    } = _ref;
    const timeline = (0,runtime_core_esm_bundler/* inject */.f3)(VTimelineSymbol);
    if (!timeline) throw new Error('[Vuetify] Could not find v-timeline provider');
    const {
      sizeClasses,
      sizeStyles
    } = useSize(props, 'v-timeline-divider__dot');
    const {
      backgroundColorStyles,
      backgroundColorClasses
    } = useBackgroundColor((0,reactivity_esm_bundler/* toRef */.Vh)(props, 'dotColor'));
    const {
      backgroundColorStyles: lineColorStyles,
      backgroundColorClasses: lineColorClasses
    } = useBackgroundColor(timeline.lineColor);
    const {
      roundedClasses
    } = useRounded(props, 'v-timeline-divider__dot');
    const {
      elevationClasses
    } = useElevation(props);
    return () => (0,runtime_core_esm_bundler/* createVNode */.Wm)("div", {
      "class": ['v-timeline-divider', {
        'v-timeline-divider--fill-dot': props.fillDot
      }]
    }, [!props.hideDot && (0,runtime_core_esm_bundler/* createVNode */.Wm)("div", {
      "class": ['v-timeline-divider__dot', roundedClasses.value, sizeClasses.value, elevationClasses.value],
      "style": sizeStyles.value
    }, [(0,runtime_core_esm_bundler/* createVNode */.Wm)("div", {
      "class": ['v-timeline-divider__inner-dot', roundedClasses.value, backgroundColorClasses.value],
      "style": backgroundColorStyles.value
    }, [slots.default ? slots.default({
      icon: props.icon,
      iconColor: props.iconColor,
      size: props.size
    }) : props.icon ? (0,runtime_core_esm_bundler/* createVNode */.Wm)(VIcon, {
      "icon": props.icon,
      "color": props.iconColor,
      "size": props.size
    }, null) : undefined])]), (0,runtime_core_esm_bundler/* createVNode */.Wm)("div", {
      "class": ['v-timeline-divider__line', lineColorClasses.value],
      "style": lineColorStyles.value
    }, null)]);
  }

});
//# sourceMappingURL=VTimelineDivider.mjs.map
;// CONCATENATED MODULE: ./node_modules/vuetify/lib/components/VTimeline/VTimelineItem.mjs

// Components

 // Composables




 // Utilities




const VTimelineItem = (0,defineComponent/* defineComponent */.a)({
  name: 'VTimelineItem',
  props: {
    dotColor: String,
    fillDot: Boolean,
    hideDot: Boolean,
    hideOpposite: {
      type: Boolean,
      default: undefined
    },
    icon: String,
    iconColor: String,
    ...makeRoundedProps(),
    ...makeElevationProps(),
    ...makeSizeProps(),
    ...makeTagProps(),
    ...makeDimensionProps()
  },

  setup(props, _ref) {
    let {
      slots
    } = _ref;
    const timeline = (0,runtime_core_esm_bundler/* inject */.f3)(VTimelineSymbol);
    if (!timeline) throw new Error('[Vuetify] Could not find v-timeline provider');
    const {
      dimensionStyles
    } = useDimension(props);
    const dotSize = (0,reactivity_esm_bundler/* ref */.iH)(0);
    const dotRef = (0,reactivity_esm_bundler/* ref */.iH)();
    (0,runtime_core_esm_bundler/* watch */.YP)(dotRef, newValue => {
      var _newValue$$el$querySe, _newValue$$el$querySe2;

      if (!newValue) return;
      dotSize.value = (_newValue$$el$querySe = (_newValue$$el$querySe2 = newValue.$el.querySelector('.v-timeline-divider__dot')) == null ? void 0 : _newValue$$el$querySe2.getBoundingClientRect().width) != null ? _newValue$$el$querySe : 0;
    }, {
      flush: 'post'
    });
    return () => {
      var _slots$default, _slots$opposite;

      return (0,runtime_core_esm_bundler/* createVNode */.Wm)("div", {
        "class": ['v-timeline-item', {
          'v-timeline-item--fill-dot': props.fillDot
        }],
        "style": {
          '--v-timeline-dot-size': (0,helpers/* convertToUnit */.kb)(dotSize.value)
        }
      }, [(0,runtime_core_esm_bundler/* createVNode */.Wm)("div", {
        "class": "v-timeline-item__body",
        "style": dimensionStyles.value
      }, [(_slots$default = slots.default) == null ? void 0 : _slots$default.call(slots)]), (0,runtime_core_esm_bundler/* createVNode */.Wm)(VTimelineDivider, {
        "ref": dotRef,
        "hideDot": props.hideDot,
        "icon": props.icon,
        "iconColor": props.iconColor,
        "size": props.size,
        "elevation": props.elevation,
        "dotColor": props.dotColor,
        "fillDot": props.fillDot,
        "rounded": props.rounded
      }, {
        default: slots.icon
      }), timeline.density.value !== 'compact' && (0,runtime_core_esm_bundler/* createVNode */.Wm)("div", {
        "class": "v-timeline-item__opposite"
      }, [!props.hideOpposite && ((_slots$opposite = slots.opposite) == null ? void 0 : _slots$opposite.call(slots))])]);
    };
  }

});
//# sourceMappingURL=VTimelineItem.mjs.map
;// CONCATENATED MODULE: ./node_modules/vuetify/lib/components/VTimeline/index.mjs


//# sourceMappingURL=index.mjs.map
;// CONCATENATED MODULE: ./node_modules/vuetify/lib/components/VToolbar/VToolbarItems.mjs
// Composables

 // Utilities



const VToolbarItems = (0,defineComponent/* defineComponent */.a)({
  name: 'VToolbarItems',
  props: { ...makeVariantProps({
      variant: 'contained-text'
    })
  },

  setup(props, _ref) {
    let {
      slots
    } = _ref;
    (0,composables_defaults/* provideDefaults */.AF)({
      VBtn: {
        color: (0,reactivity_esm_bundler/* toRef */.Vh)(props, 'color'),
        variant: (0,reactivity_esm_bundler/* toRef */.Vh)(props, 'variant')
      }
    });
    return () => {
      var _slots$default;

      return (_slots$default = slots.default) == null ? void 0 : _slots$default.call(slots);
    };
  }

});
//# sourceMappingURL=VToolbarItems.mjs.map
;// CONCATENATED MODULE: ./node_modules/vuetify/lib/components/VToolbar/index.mjs



//# sourceMappingURL=index.mjs.map
;// CONCATENATED MODULE: ./node_modules/vuetify/lib/components/VTooltip/VTooltip.css
// extracted by mini-css-extract-plugin

;// CONCATENATED MODULE: ./node_modules/vuetify/lib/components/VTooltip/VTooltip.mjs

// Styles
 // Components

 // Composables


 // Utilities


 // Types

const VTooltip = (0,defineComponent/* genericComponent */.e)()({
  name: 'VTooltip',
  inheritAttrs: false,
  props: {
    id: String,
    modelValue: Boolean,
    text: String,
    anchor: {
      type: String,
      default: 'end'
    },
    origin: {
      type: String,
      default: 'auto'
    },
    ...makeTransitionProps({
      transition: false
    })
  },
  emits: {
    'update:modelValue': value => true
  },

  setup(props, _ref) {
    let {
      attrs,
      slots
    } = _ref;
    const isActive = useProxiedModel(props, 'modelValue');
    const uid = (0,helpers/* getUid */.sq)();
    const id = (0,runtime_core_esm_bundler/* computed */.Fl)(() => props.id || `v-tooltip-${uid}`);
    const anchor = (0,runtime_core_esm_bundler/* computed */.Fl)(() => {
      return props.anchor.split(' ').length > 1 ? props.anchor : props.anchor + ' center';
    });
    const origin = (0,runtime_core_esm_bundler/* computed */.Fl)(() => {
      return props.origin === 'auto' || props.origin === 'overlap' || props.origin.split(' ').length > 1 || props.anchor.split(' ').length > 1 ? props.origin : props.origin + ' center';
    });
    const transition = (0,runtime_core_esm_bundler/* computed */.Fl)(() => {
      if (props.transition) return props.transition;
      return isActive.value ? 'scale-transition' : 'fade-transition';
    });
    return () => {
      return (0,runtime_core_esm_bundler/* createVNode */.Wm)(VOverlay, (0,runtime_core_esm_bundler/* mergeProps */.dG)({
        "modelValue": isActive.value,
        "onUpdate:modelValue": $event => isActive.value = $event,
        "class": ['v-tooltip'],
        "id": id.value,
        "transition": transition.value,
        "absolute": true,
        "positionStrategy": "connected",
        "scrollStrategy": "reposition",
        "anchor": anchor.value,
        "origin": origin.value,
        "min-width": 0,
        "offset": 10,
        "scrim": false,
        "persistent": true,
        "open-on-click": false,
        "open-on-hover": true,
        "role": "tooltip",
        "eager": true,
        "activatorProps": {
          'aria-describedby': id.value
        }
      }, attrs), {
        activator: slots.activator,
        default: function () {
          var _slots$default, _slots$default2;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          return (_slots$default = (_slots$default2 = slots.default) == null ? void 0 : _slots$default2.call(slots, ...args)) != null ? _slots$default : props.text;
        }
      });
    };
  }

});
//# sourceMappingURL=VTooltip.mjs.map
;// CONCATENATED MODULE: ./node_modules/vuetify/lib/components/VTooltip/index.mjs

//# sourceMappingURL=index.mjs.map
;// CONCATENATED MODULE: ./node_modules/vuetify/lib/components/VValidation/VValidation.mjs
// Composables
 // Utilities


const VValidation = (0,defineComponent/* defineComponent */.a)({
  name: 'VValidation',
  props: { ...makeValidationProps()
  },
  emits: {
    'update:modelValue': val => true
  },

  setup(props, _ref) {
    let {
      slots
    } = _ref;
    const validation = useValidation(props, 'validation');
    return () => {
      var _slots$default;

      return (_slots$default = slots.default) == null ? void 0 : _slots$default.call(slots, validation);
    };
  }

});
//# sourceMappingURL=VValidation.mjs.map
;// CONCATENATED MODULE: ./node_modules/vuetify/lib/components/VValidation/index.mjs

//# sourceMappingURL=index.mjs.map
;// CONCATENATED MODULE: ./node_modules/vuetify/lib/components/VWindow/index.mjs


//# sourceMappingURL=index.mjs.map
;// CONCATENATED MODULE: ./node_modules/vuetify/lib/components/index.mjs







 // export * from './VBottomSheet'




 // export * from './VCalendar'







 // export * from './VContent'


 // export * from './VData'
// export * from './VDataIterator'
// export * from './VDataTable'
// export * from './VDatePicker'

























 // export * from './VOtpInput'
// export * from './VOverflowBtn'



 // export * from './VPicker'











 // export * from './VSkeletonLoader'



 // export * from './VSparkline'
// export * from './VSpeedDial'
// export * from './VStepper'








 // export * from './VTimePicker'


 // export * from './VTreeview'

 // export * from './VVirtualScroll'



//# sourceMappingURL=index.mjs.map

/***/ }),

/***/ 474:
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "AF": () => (/* binding */ provideDefaults),
/* harmony export */   "qy": () => (/* binding */ useDefaults),
/* harmony export */   "tI": () => (/* binding */ DefaultsSymbol),
/* harmony export */   "yB": () => (/* binding */ createDefaults)
/* harmony export */ });
/* harmony import */ var vue__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(262);
/* harmony import */ var vue__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(252);
/* harmony import */ var _util_helpers_mjs__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(676);
// Utilities

 // Types

const DefaultsSymbol = Symbol.for('vuetify:defaults');
function createDefaults(options) {
  return (0,vue__WEBPACK_IMPORTED_MODULE_0__/* .ref */ .iH)(options != null ? options : {});
}
function useDefaults() {
  const defaults = (0,vue__WEBPACK_IMPORTED_MODULE_1__/* .inject */ .f3)(DefaultsSymbol);
  if (!defaults) throw new Error('[Vuetify] Could not find defaults instance');
  return defaults;
}
function provideDefaults(defaults, options) {
  const injectedDefaults = useDefaults();
  const providedDefaults = (0,vue__WEBPACK_IMPORTED_MODULE_0__/* .ref */ .iH)(defaults);
  const newDefaults = (0,vue__WEBPACK_IMPORTED_MODULE_1__/* .computed */ .Fl)(() => {
    const scoped = (0,vue__WEBPACK_IMPORTED_MODULE_0__/* .unref */ .SU)(options == null ? void 0 : options.scoped);
    const reset = (0,vue__WEBPACK_IMPORTED_MODULE_0__/* .unref */ .SU)(options == null ? void 0 : options.reset);
    const root = (0,vue__WEBPACK_IMPORTED_MODULE_0__/* .unref */ .SU)(options == null ? void 0 : options.root);
    let properties = (0,_util_helpers_mjs__WEBPACK_IMPORTED_MODULE_2__/* .mergeDeep */ .Ee)(providedDefaults.value, {
      prev: injectedDefaults.value
    });
    if (scoped) return properties;

    if (reset || root) {
      const len = Number(reset || Infinity);

      for (let i = 0; i <= len; i++) {
        if (!properties.prev) break;
        properties = properties.prev;
      }

      return properties;
    }

    return (0,_util_helpers_mjs__WEBPACK_IMPORTED_MODULE_2__/* .mergeDeep */ .Ee)(properties.prev, properties);
  });
  (0,vue__WEBPACK_IMPORTED_MODULE_1__/* .provide */ .JJ)(DefaultsSymbol, newDefaults);
  return newDefaults;
}
//# sourceMappingURL=defaults.mjs.map

/***/ }),

/***/ 455:
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "AW": () => (/* binding */ useDisplay),
/* harmony export */   "fT": () => (/* binding */ createDisplay),
/* harmony export */   "x6": () => (/* binding */ DisplaySymbol)
/* harmony export */ });
/* harmony import */ var vue__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(262);
/* harmony import */ var vue__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(252);
/* harmony import */ var _util_index_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(676);
/* harmony import */ var _util_globals_mjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(228);
// Utilities

 // Globals

 // Types

const DisplaySymbol = Symbol.for('vuetify:display');
const defaultDisplayOptions = {
  mobileBreakpoint: 'lg',
  thresholds: {
    xs: 0,
    sm: 600,
    md: 960,
    lg: 1280,
    xl: 1920,
    xxl: 2560
  }
};

const parseDisplayOptions = function () {
  let options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : defaultDisplayOptions;
  return (0,_util_index_mjs__WEBPACK_IMPORTED_MODULE_0__/* .mergeDeep */ .Ee)(defaultDisplayOptions, options);
}; // Cross-browser support as described in:
// https://stackoverflow.com/questions/1248081


function getClientWidth() {
  return _util_globals_mjs__WEBPACK_IMPORTED_MODULE_1__/* .IN_BROWSER */ .BR ? Math.max(document.documentElement.clientWidth, window.innerWidth) : 0; // SSR
}

function getClientHeight() {
  return _util_globals_mjs__WEBPACK_IMPORTED_MODULE_1__/* .IN_BROWSER */ .BR ? Math.max(document.documentElement.clientHeight, window.innerHeight) : 0; // SSR
}

function getPlatform() {
  const userAgent = _util_globals_mjs__WEBPACK_IMPORTED_MODULE_1__/* .IN_BROWSER */ .BR ? window.navigator.userAgent : 'ssr';

  function match(regexp) {
    return Boolean(userAgent.match(regexp));
  }

  const android = match(/android/i);
  const ios = match(/iphone|ipad|ipod/i);
  const cordova = match(/cordova/i);
  const electron = match(/electron/i);
  const chrome = match(/chrome/i);
  const edge = match(/edge/i);
  const firefox = match(/firefox/i);
  const opera = match(/opera/i);
  const win = match(/win/i);
  const mac = match(/mac/i);
  const linux = match(/linux/i);
  const ssr = match(/ssr/i);
  return {
    android,
    ios,
    cordova,
    electron,
    chrome,
    edge,
    firefox,
    opera,
    win,
    mac,
    linux,
    touch: _util_globals_mjs__WEBPACK_IMPORTED_MODULE_1__/* .SUPPORTS_TOUCH */ .sR,
    ssr
  };
}

function createDisplay(options) {
  const {
    thresholds,
    mobileBreakpoint
  } = parseDisplayOptions(options);
  const height = (0,vue__WEBPACK_IMPORTED_MODULE_2__/* .ref */ .iH)(getClientHeight());
  const platform = getPlatform();
  const state = (0,vue__WEBPACK_IMPORTED_MODULE_2__/* .reactive */ .qj)({});
  const width = (0,vue__WEBPACK_IMPORTED_MODULE_2__/* .ref */ .iH)(getClientWidth());

  function onResize() {
    height.value = getClientHeight();
    width.value = getClientWidth();
  } // eslint-disable-next-line max-statements


  (0,vue__WEBPACK_IMPORTED_MODULE_3__/* .watchEffect */ .m0)(() => {
    const xs = width.value < thresholds.sm;
    const sm = width.value < thresholds.md && !xs;
    const md = width.value < thresholds.lg && !(sm || xs);
    const lg = width.value < thresholds.xl && !(md || sm || xs);
    const xl = width.value < thresholds.xxl && !(lg || md || sm || xs);
    const xxl = width.value >= thresholds.xxl;
    const name = xs ? 'xs' : sm ? 'sm' : md ? 'md' : lg ? 'lg' : xl ? 'xl' : 'xxl';
    const breakpointValue = typeof mobileBreakpoint === 'number' ? mobileBreakpoint : thresholds[mobileBreakpoint];
    const mobile = !platform.ssr ? width.value < breakpointValue : platform.android || platform.ios || platform.opera;
    state.xs = xs;
    state.sm = sm;
    state.md = md;
    state.lg = lg;
    state.xl = xl;
    state.xxl = xxl;
    state.smAndUp = !xs;
    state.mdAndUp = !(xs || sm);
    state.lgAndUp = !(xs || sm || md);
    state.xlAndUp = !(xs || sm || md || lg);
    state.smAndDown = !(md || lg || xl || xxl);
    state.mdAndDown = !(lg || xl || xxl);
    state.lgAndDown = !(xl || xxl);
    state.xlAndDown = !xxl;
    state.name = name;
    state.height = height.value;
    state.width = width.value;
    state.mobile = mobile;
    state.mobileBreakpoint = mobileBreakpoint;
    state.platform = platform;
    state.thresholds = thresholds;
  });

  if (_util_globals_mjs__WEBPACK_IMPORTED_MODULE_1__/* .IN_BROWSER */ .BR) {
    window.addEventListener('resize', onResize, {
      passive: true
    });
  }

  return (0,vue__WEBPACK_IMPORTED_MODULE_2__/* .toRefs */ .BK)(state);
}
function useDisplay() {
  const display = (0,vue__WEBPACK_IMPORTED_MODULE_3__/* .inject */ .f3)(DisplaySymbol);
  if (!display) throw new Error('Could not find Vuetify display injection');
  return display;
}
//# sourceMappingURL=display.mjs.map

/***/ }),

/***/ 264:
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "$0": () => (/* binding */ VClassIcon),
/* harmony export */   "$e": () => (/* binding */ VComponentIcon),
/* harmony export */   "YK": () => (/* binding */ IconSymbol),
/* harmony export */   "bi": () => (/* binding */ useIcon),
/* harmony export */   "oX": () => (/* binding */ VSvgIcon),
/* harmony export */   "w8": () => (/* binding */ VLigatureIcon),
/* harmony export */   "xe": () => (/* binding */ defaultSets)
/* harmony export */ });
/* unused harmony export makeIconProps */
/* harmony import */ var vue__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(252);
/* harmony import */ var vue__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(262);
/* harmony import */ var _util_index_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(533);
/* harmony import */ var _util_index_mjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(719);

// Utilities

 // Types

const IconSymbol = Symbol.for('vuetify:icons');
const makeIconProps = (0,_util_index_mjs__WEBPACK_IMPORTED_MODULE_0__/* .propsFactory */ .U)({
  icon: {
    type: [String, Object],
    required: true
  },
  // Could not remove this and use makeTagProps, types complained because it is not required
  tag: {
    type: String,
    required: true
  }
}, 'icon');
const VComponentIcon = (0,_util_index_mjs__WEBPACK_IMPORTED_MODULE_1__/* .defineComponent */ .a)({
  name: 'VComponentIcon',
  props: makeIconProps(),

  setup(props) {
    return () => {
      return (0,vue__WEBPACK_IMPORTED_MODULE_2__/* .createVNode */ .Wm)(props.tag, null, {
        default: () => [(0,vue__WEBPACK_IMPORTED_MODULE_2__/* .createVNode */ .Wm)(props.icon, null, null)]
      });
    };
  }

});
const VSvgIcon = (0,_util_index_mjs__WEBPACK_IMPORTED_MODULE_1__/* .defineComponent */ .a)({
  name: 'VSvgIcon',
  inheritAttrs: false,
  props: makeIconProps(),

  setup(props, _ref) {
    let {
      attrs
    } = _ref;
    return () => {
      return (0,vue__WEBPACK_IMPORTED_MODULE_2__/* .createVNode */ .Wm)(props.tag, (0,vue__WEBPACK_IMPORTED_MODULE_2__/* .mergeProps */ .dG)(attrs, {
        "style": null
      }), {
        default: () => [(0,vue__WEBPACK_IMPORTED_MODULE_2__/* .createVNode */ .Wm)("svg", {
          "class": "v-icon__svg",
          "xmlns": "http://www.w3.org/2000/svg",
          "viewBox": "0 0 24 24",
          "role": "img",
          "aria-hidden": "true"
        }, [(0,vue__WEBPACK_IMPORTED_MODULE_2__/* .createVNode */ .Wm)("path", {
          "d": props.icon
        }, null)])]
      });
    };
  }

});
const VLigatureIcon = (0,_util_index_mjs__WEBPACK_IMPORTED_MODULE_1__/* .defineComponent */ .a)({
  name: 'VLigatureIcon',
  props: makeIconProps(),

  setup(props) {
    return () => {
      return (0,vue__WEBPACK_IMPORTED_MODULE_2__/* .createVNode */ .Wm)(props.tag, null, {
        default: () => [props.icon]
      });
    };
  }

});
const VClassIcon = (0,_util_index_mjs__WEBPACK_IMPORTED_MODULE_1__/* .defineComponent */ .a)({
  name: 'VClassIcon',
  props: makeIconProps(),

  setup(props) {
    return () => {
      return (0,vue__WEBPACK_IMPORTED_MODULE_2__/* .createVNode */ .Wm)(props.tag, {
        "class": props.icon
      }, null);
    };
  }

});
const defaultSets = {
  svg: {
    component: VSvgIcon
  },
  class: {
    component: VClassIcon
  }
}; // Composables

const useIcon = props => {
  const icons = (0,vue__WEBPACK_IMPORTED_MODULE_2__/* .inject */ .f3)(IconSymbol);
  if (!icons) throw new Error('Missing Vuetify Icons provide!');
  const iconData = (0,vue__WEBPACK_IMPORTED_MODULE_2__/* .computed */ .Fl)(() => {
    const iconAlias = (0,vue__WEBPACK_IMPORTED_MODULE_3__/* .isRef */ .dq)(props) ? props.value : props.icon;
    if (!iconAlias) throw new Error('Icon value is undefined or null');
    let icon = iconAlias;

    if (typeof iconAlias === 'string' && iconAlias.includes('$')) {
      var _icons$aliases;

      icon = (_icons$aliases = icons.aliases) == null ? void 0 : _icons$aliases[iconAlias.slice(iconAlias.indexOf('$') + 1)];
    }

    if (!icon) throw new Error(`Could not find aliased icon "${iconAlias}"`);

    if (typeof icon !== 'string') {
      return {
        component: VComponentIcon,
        icon
      };
    }

    const iconSetName = Object.keys(icons.sets).find(setName => typeof icon === 'string' && icon.startsWith(`${setName}:`));
    const iconName = iconSetName ? icon.slice(iconSetName.length + 1) : icon;
    const iconSet = icons.sets[iconSetName != null ? iconSetName : icons.defaultSet];
    return {
      component: iconSet.component,
      icon: iconName
    };
  });
  return {
    iconData
  };
};
//# sourceMappingURL=icons.mjs.map

/***/ }),

/***/ 458:
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {


// EXPORTS
__webpack_require__.d(__webpack_exports__, {
  "uM": () => (/* binding */ LocaleAdapterSymbol),
  "aU": () => (/* binding */ createLocaleAdapter),
  "O4": () => (/* binding */ provideLocale),
  "bU": () => (/* binding */ useLocale)
});

// UNUSED EXPORTS: VuetifyLocaleSymbol, createDefaultLocaleAdapter

// EXTERNAL MODULE: ./node_modules/@vue/runtime-core/dist/runtime-core.esm-bundler.js
var runtime_core_esm_bundler = __webpack_require__(252);
// EXTERNAL MODULE: ./node_modules/@vue/reactivity/dist/reactivity.esm-bundler.js
var reactivity_esm_bundler = __webpack_require__(262);
// EXTERNAL MODULE: ./node_modules/vuetify/lib/util/helpers.mjs
var helpers = __webpack_require__(676);
// EXTERNAL MODULE: ./node_modules/vuetify/lib/util/console.mjs
var console = __webpack_require__(130);
;// CONCATENATED MODULE: ./node_modules/vuetify/lib/locale/en.mjs
/* harmony default export */ const en = ({
  badge: 'Badge',
  close: 'Close',
  dataIterator: {
    noResultsText: 'No matching records found',
    loadingText: 'Loading items...'
  },
  dataTable: {
    itemsPerPageText: 'Rows per page:',
    ariaLabel: {
      sortDescending: 'Sorted descending.',
      sortAscending: 'Sorted ascending.',
      sortNone: 'Not sorted.',
      activateNone: 'Activate to remove sorting.',
      activateDescending: 'Activate to sort descending.',
      activateAscending: 'Activate to sort ascending.'
    },
    sortBy: 'Sort by'
  },
  dataFooter: {
    itemsPerPageText: 'Items per page:',
    itemsPerPageAll: 'All',
    nextPage: 'Next page',
    prevPage: 'Previous page',
    firstPage: 'First page',
    lastPage: 'Last page',
    pageText: '{0}-{1} of {2}'
  },
  datePicker: {
    itemsSelected: '{0} selected',
    nextMonthAriaLabel: 'Next month',
    nextYearAriaLabel: 'Next year',
    prevMonthAriaLabel: 'Previous month',
    prevYearAriaLabel: 'Previous year'
  },
  noDataText: 'No data available',
  carousel: {
    prev: 'Previous visual',
    next: 'Next visual',
    ariaLabel: {
      delimiter: 'Carousel slide {0} of {1}'
    }
  },
  calendar: {
    moreEvents: '{0} more'
  },
  fileInput: {
    counter: '{0} files',
    counterSize: '{0} files ({1} in total)'
  },
  timePicker: {
    am: 'AM',
    pm: 'PM'
  },
  pagination: {
    ariaLabel: {
      root: 'Pagination Navigation',
      next: 'Next page',
      previous: 'Previous page',
      page: 'Goto Page {0}',
      currentPage: 'Page {0}, Current Page',
      first: 'First page',
      last: 'Last page'
    }
  },
  rating: {
    ariaLabel: {
      item: 'Rating {0} of {1}'
    }
  }
});
//# sourceMappingURL=en.mjs.map
;// CONCATENATED MODULE: ./node_modules/vuetify/lib/composables/locale.mjs


 // Types

const LocaleAdapterSymbol = Symbol.for('vuetify:locale-adapter');
const VuetifyLocaleSymbol = Symbol.for('vuetify:locale');
function provideLocale(props) {
  const adapter = (0,runtime_core_esm_bundler/* inject */.f3)(LocaleAdapterSymbol);
  if (!adapter) throw new Error('[Vuetify] Could not find injected locale adapter');
  return adapter.createScope(props);
}
function useLocale() {
  const adapter = (0,runtime_core_esm_bundler/* inject */.f3)(LocaleAdapterSymbol);
  if (!adapter) throw new Error('[Vuetify] Could not find injected locale adapter');
  return adapter.getScope();
}

function isLocaleAdapter(x) {
  return !!x && x.hasOwnProperty('getScope') && x.hasOwnProperty('createScope') && x.hasOwnProperty('createRoot');
}

function createLocaleAdapter(app, options) {
  const adapter = isLocaleAdapter(options) ? options : createDefaultLocaleAdapter(options);
  const rootInstance = adapter.createRoot(app);
  return {
    adapter,
    rootInstance
  };
}
const LANG_PREFIX = '$vuetify.';

const replace = (str, params) => {
  return str.replace(/\{(\d+)\}/g, (match, index) => {
    /* istanbul ignore next */
    return String(params[+index]);
  });
};

const createTranslateFunction = (current, fallback, messages) => {
  return function (key) {
    for (var _len = arguments.length, params = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
      params[_key - 1] = arguments[_key];
    }

    if (!key.startsWith(LANG_PREFIX)) {
      return replace(key, params);
    }

    const shortKey = key.replace(LANG_PREFIX, '');
    const currentLocale = current.value && messages.value[current.value];
    const fallbackLocale = fallback.value && messages.value[fallback.value];
    let str = (0,helpers/* getObjectValueByPath */.vO)(currentLocale, shortKey, null);

    if (!str) {
      (0,console/* consoleWarn */.Kd)(`Translation key "${key}" not found in "${current.value}", trying fallback locale`);
      str = (0,helpers/* getObjectValueByPath */.vO)(fallbackLocale, shortKey, null);
    }

    if (!str) {
      (0,console/* consoleError */.N6)(`Translation key "${key}" not found in fallback`);
      str = key;
    }

    if (typeof str !== 'string') {
      (0,console/* consoleError */.N6)(`Translation key "${key}" has a non-string value`);
      str = key;
    }

    return replace(str, params);
  };
};

function createNumberFunction(current, fallback) {
  return (value, options) => {
    const numberFormat = new Intl.NumberFormat([current.value, fallback.value], options);
    return numberFormat.format(value);
  };
}

function createDefaultLocaleAdapter(options) {
  const createScope = options => {
    const current = (0,reactivity_esm_bundler/* ref */.iH)(options.current);
    const fallback = (0,reactivity_esm_bundler/* ref */.iH)(options.fallback);
    const messages = (0,reactivity_esm_bundler/* ref */.iH)(options.messages);
    return {
      current,
      fallback,
      messages,
      t: createTranslateFunction(current, fallback, messages),
      n: createNumberFunction(current, fallback)
    };
  };

  return {
    createRoot: app => {
      var _options$defaultLocal, _options$fallbackLoca, _options$messages;

      const rootScope = createScope({
        current: (_options$defaultLocal = options == null ? void 0 : options.defaultLocale) != null ? _options$defaultLocal : 'en',
        fallback: (_options$fallbackLoca = options == null ? void 0 : options.fallbackLocale) != null ? _options$fallbackLoca : 'en',
        messages: (_options$messages = options == null ? void 0 : options.messages) != null ? _options$messages : {
          en: en
        }
      });
      app.provide(VuetifyLocaleSymbol, rootScope);
      return rootScope;
    },
    getScope: () => {
      const currentScope = (0,runtime_core_esm_bundler/* inject */.f3)(VuetifyLocaleSymbol);
      if (!currentScope) throw new Error('[Vuetify] Could not find injected locale instance');
      return currentScope;
    },
    createScope: options => {
      const currentScope = (0,runtime_core_esm_bundler/* inject */.f3)(VuetifyLocaleSymbol);
      if (!currentScope) throw new Error('[Vuetify] Could not find injected locale instance');
      const newScope = createScope({
        current: (0,runtime_core_esm_bundler/* computed */.Fl)(() => {
          var _options$locale;

          return (_options$locale = options == null ? void 0 : options.locale) != null ? _options$locale : currentScope.current.value;
        }),
        fallback: (0,runtime_core_esm_bundler/* computed */.Fl)(() => {
          var _options$locale2;

          return (_options$locale2 = options == null ? void 0 : options.locale) != null ? _options$locale2 : currentScope.fallback.value;
        }),
        messages: (0,runtime_core_esm_bundler/* computed */.Fl)(() => {
          var _options$messages2;

          return (_options$messages2 = options == null ? void 0 : options.messages) != null ? _options$messages2 : currentScope.messages.value;
        })
      });
      (0,runtime_core_esm_bundler/* provide */.JJ)(VuetifyLocaleSymbol, newScope);
      return newScope;
    }
  };
}
//# sourceMappingURL=locale.mjs.map

/***/ }),

/***/ 144:
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {


// EXPORTS
__webpack_require__.d(__webpack_exports__, {
  "Cm": () => (/* binding */ RtlSymbol),
  "is": () => (/* binding */ createRtl),
  "zr": () => (/* binding */ provideRtl),
  "Vw": () => (/* binding */ useRtl)
});

// UNUSED EXPORTS: createRtlScope

// EXTERNAL MODULE: ./node_modules/@vue/reactivity/dist/reactivity.esm-bundler.js
var reactivity_esm_bundler = __webpack_require__(262);
// EXTERNAL MODULE: ./node_modules/@vue/runtime-core/dist/runtime-core.esm-bundler.js
var runtime_core_esm_bundler = __webpack_require__(252);
;// CONCATENATED MODULE: ./node_modules/vuetify/lib/locale/index.mjs










































const rtl = {
  af: false,
  ar: true,
  bg: false,
  ca: false,
  ckb: false,
  cs: false,
  de: false,
  el: false,
  en: false,
  es: false,
  et: false,
  fa: false,
  fi: false,
  fr: false,
  hr: false,
  hu: false,
  he: true,
  id: false,
  it: false,
  ja: false,
  ko: false,
  lv: false,
  lt: false,
  nl: false,
  no: false,
  pl: false,
  pt: false,
  ro: false,
  ru: false,
  sk: false,
  sl: false,
  srCyrl: false,
  srLatn: false,
  sv: false,
  th: false,
  tr: false,
  az: false,
  uk: false,
  vi: false,
  zhHans: false,
  zhHant: false
};
//# sourceMappingURL=index.mjs.map
;// CONCATENATED MODULE: ./node_modules/vuetify/lib/composables/rtl.mjs

 // Types

const RtlSymbol = Symbol.for('vuetify:rtl');
function createRtl(localeScope, options) {
  var _options$rtl, _options$defaultRtl;

  return createRtlScope({
    rtl: { ...rtl,
      ...((_options$rtl = options == null ? void 0 : options.rtl) != null ? _options$rtl : {})
    },
    isRtl: (0,reactivity_esm_bundler/* ref */.iH)((_options$defaultRtl = options == null ? void 0 : options.defaultRtl) != null ? _options$defaultRtl : false),
    rtlClasses: (0,reactivity_esm_bundler/* ref */.iH)('')
  }, localeScope);
}
function createRtlScope(currentScope, localeScope, options) {
  const isRtl = (0,runtime_core_esm_bundler/* computed */.Fl)(() => {
    if (typeof (options == null ? void 0 : options.rtl) === 'boolean') return options.rtl;

    if (localeScope.current.value && currentScope.rtl.hasOwnProperty(localeScope.current.value)) {
      return currentScope.rtl[localeScope.current.value];
    }

    return currentScope.isRtl.value;
  });
  return {
    isRtl,
    rtl: currentScope.rtl,
    rtlClasses: (0,runtime_core_esm_bundler/* computed */.Fl)(() => `v-locale--is-${isRtl.value ? 'rtl' : 'ltr'}`)
  };
}
function provideRtl(props, localeScope) {
  const currentScope = (0,runtime_core_esm_bundler/* inject */.f3)(RtlSymbol);
  if (!currentScope) throw new Error('[Vuetify] Could not find injected rtl instance');
  const newScope = createRtlScope(currentScope, localeScope, props);
  (0,runtime_core_esm_bundler/* provide */.JJ)(RtlSymbol, newScope);
  return newScope;
}
function useRtl() {
  const currentScope = (0,runtime_core_esm_bundler/* inject */.f3)(RtlSymbol);
  if (!currentScope) throw new Error('[Vuetify] Could not find injected rtl instance');
  return currentScope;
}
//# sourceMappingURL=rtl.mjs.map

/***/ }),

/***/ 195:
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {


// EXPORTS
__webpack_require__.d(__webpack_exports__, {
  "bo": () => (/* binding */ ThemeSymbol),
  "jG": () => (/* binding */ createTheme),
  "x$": () => (/* binding */ makeThemeProps),
  "ER": () => (/* binding */ provideTheme),
  "Fg": () => (/* binding */ useTheme)
});

// EXTERNAL MODULE: ./node_modules/@vue/reactivity/dist/reactivity.esm-bundler.js
var reactivity_esm_bundler = __webpack_require__(262);
// EXTERNAL MODULE: ./node_modules/@vue/runtime-core/dist/runtime-core.esm-bundler.js
var runtime_core_esm_bundler = __webpack_require__(252);
// EXTERNAL MODULE: ./node_modules/vuetify/lib/util/propsFactory.mjs
var propsFactory = __webpack_require__(533);
// EXTERNAL MODULE: ./node_modules/vuetify/lib/util/helpers.mjs
var helpers = __webpack_require__(676);
// EXTERNAL MODULE: ./node_modules/vuetify/lib/util/colorUtils.mjs + 2 modules
var colorUtils = __webpack_require__(64);
// EXTERNAL MODULE: ./node_modules/vuetify/lib/util/globals.mjs
var globals = __webpack_require__(228);
// EXTERNAL MODULE: ./node_modules/vuetify/lib/util/getCurrentInstance.mjs
var getCurrentInstance = __webpack_require__(83);
;// CONCATENATED MODULE: ./node_modules/vuetify/lib/util/color/APCA.mjs
/**
 * WCAG 3.0 APCA perceptual contrast algorithm from https://github.com/Myndex/SAPC-APCA
 * @licence https://www.w3.org/Consortium/Legal/2015/copyright-software-and-document
 * @see https://www.w3.org/WAI/GL/task-forces/silver/wiki/Visual_Contrast_of_Text_Subgroup
 */
// MAGICAL NUMBERS
// sRGB Conversion to Relative Luminance (Y)
// Transfer Curve (aka "Gamma") for sRGB linearization
// Simple power curve vs piecewise described in docs
// Essentially, 2.4 best models actual display
// characteristics in combination with the total method
const mainTRC = 2.4;
const Rco = 0.2126729; // sRGB Red Coefficient (from matrix)

const Gco = 0.7151522; // sRGB Green Coefficient (from matrix)

const Bco = 0.0721750; // sRGB Blue Coefficient (from matrix)
// For Finding Raw SAPC Contrast from Relative Luminance (Y)
// Constants for SAPC Power Curve Exponents
// One pair for normal text, and one for reverse
// These are the "beating heart" of SAPC

const normBG = 0.55;
const normTXT = 0.58;
const revTXT = 0.57;
const revBG = 0.62; // For Clamping and Scaling Values

const blkThrs = 0.03; // Level that triggers the soft black clamp

const blkClmp = 1.45; // Exponent for the soft black clamp curve

const deltaYmin = 0.0005; // Lint trap

const scaleBoW = 1.25; // Scaling for dark text on light

const scaleWoB = 1.25; // Scaling for light text on dark

const loConThresh = 0.078; // Threshold for new simple offset scale

const loConFactor = 12.82051282051282; // = 1/0.078,

const loConOffset = 0.06; // The simple offset

const loClip = 0.001; // Output clip (lint trap #2)

function APCAcontrast(text, background) {
  // Linearize sRGB
  const Rtxt = ((text >> 16 & 0xff) / 255) ** mainTRC;
  const Gtxt = ((text >> 8 & 0xff) / 255) ** mainTRC;
  const Btxt = ((text >> 0 & 0xff) / 255) ** mainTRC;
  const Rbg = ((background >> 16 & 0xff) / 255) ** mainTRC;
  const Gbg = ((background >> 8 & 0xff) / 255) ** mainTRC;
  const Bbg = ((background >> 0 & 0xff) / 255) ** mainTRC; // Apply the standard coefficients and sum to Y

  let Ytxt = Rtxt * Rco + Gtxt * Gco + Btxt * Bco;
  let Ybg = Rbg * Rco + Gbg * Gco + Bbg * Bco; // Soft clamp Y when near black.
  // Now clamping all colors to prevent crossover errors

  if (Ytxt <= blkThrs) Ytxt += (blkThrs - Ytxt) ** blkClmp;
  if (Ybg <= blkThrs) Ybg += (blkThrs - Ybg) ** blkClmp; // Return 0 Early for extremely low ∆Y (lint trap #1)

  if (Math.abs(Ybg - Ytxt) < deltaYmin) return 0.0; // SAPC CONTRAST

  let outputContrast; // For weighted final values

  if (Ybg > Ytxt) {
    // For normal polarity, black text on white
    // Calculate the SAPC contrast value and scale
    const SAPC = (Ybg ** normBG - Ytxt ** normTXT) * scaleBoW; // NEW! SAPC SmoothScale™
    // Low Contrast Smooth Scale Rollout to prevent polarity reversal
    // and also a low clip for very low contrasts (lint trap #2)
    // much of this is for very low contrasts, less than 10
    // therefore for most reversing needs, only loConOffset is important

    outputContrast = SAPC < loClip ? 0.0 : SAPC < loConThresh ? SAPC - SAPC * loConFactor * loConOffset : SAPC - loConOffset;
  } else {
    // For reverse polarity, light text on dark
    // WoB should always return negative value.
    const SAPC = (Ybg ** revBG - Ytxt ** revTXT) * scaleWoB;
    outputContrast = SAPC > -loClip ? 0.0 : SAPC > -loConThresh ? SAPC - SAPC * loConFactor * loConOffset : SAPC + loConOffset;
  }

  return outputContrast * 100;
}
//# sourceMappingURL=APCA.mjs.map
;// CONCATENATED MODULE: ./node_modules/vuetify/lib/composables/theme.mjs
// Utilities


 // Types

const ThemeSymbol = Symbol.for('vuetify:theme');
const makeThemeProps = (0,propsFactory/* propsFactory */.U)({
  theme: String
}, 'theme');
const defaultThemeOptions = {
  defaultTheme: 'light',
  variations: {
    colors: [],
    lighten: 0,
    darken: 0
  },
  themes: {
    light: {
      dark: false,
      colors: {
        background: '#FFFFFF',
        surface: '#FFFFFF',
        'surface-variant': '#424242',
        'on-surface-variant': '#EEEEEE',
        primary: '#6200EE',
        'primary-darken-1': '#3700B3',
        secondary: '#03DAC6',
        'secondary-darken-1': '#018786',
        error: '#B00020',
        info: '#2196F3',
        success: '#4CAF50',
        warning: '#FB8C00'
      },
      variables: {
        'border-color': '#000000',
        'border-opacity': 0.12,
        'high-emphasis-opacity': 0.87,
        'medium-emphasis-opacity': 0.60,
        'disabled-opacity': 0.38,
        'idle-opacity': 0.04,
        'hover-opacity': 0.04,
        'focus-opacity': 0.12,
        'selected-opacity': 0.08,
        'activated-opacity': 0.12,
        'pressed-opacity': 0.12,
        'dragged-opacity': 0.08,
        'kbd-background-color': '#212529',
        'kbd-color': '#FFFFFF',
        'code-background-color': '#C2C2C2'
      }
    },
    dark: {
      dark: true,
      colors: {
        background: '#121212',
        surface: '#212121',
        'surface-variant': '#BDBDBD',
        'on-surface-variant': '#424242',
        primary: '#BB86FC',
        'primary-darken-1': '#3700B3',
        secondary: '#03DAC5',
        'secondary-darken-1': '#03DAC5',
        error: '#CF6679',
        info: '#2196F3',
        success: '#4CAF50',
        warning: '#FB8C00'
      },
      variables: {
        'border-color': '#FFFFFF',
        'border-opacity': 0.12,
        'high-emphasis-opacity': 0.87,
        'medium-emphasis-opacity': 0.60,
        'disabled-opacity': 0.38,
        'idle-opacity': 0.10,
        'hover-opacity': 0.04,
        'focus-opacity': 0.12,
        'selected-opacity': 0.08,
        'activated-opacity': 0.12,
        'pressed-opacity': 0.16,
        'dragged-opacity': 0.08,
        'kbd-background-color': '#212529',
        'kbd-color': '#FFFFFF',
        'code-background-color': '#B7B7B7'
      }
    }
  }
};

const parseThemeOptions = function () {
  var _options$themes;

  let options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : defaultThemeOptions;
  if (!options) return { ...defaultThemeOptions,
    isDisabled: true
  };
  const themes = Object.entries((_options$themes = options.themes) != null ? _options$themes : {}).reduce((obj, _ref) => {
    var _defaultThemeOptions$, _defaultThemeOptions$2;

    let [key, theme] = _ref;
    const defaultTheme = theme.dark ? (_defaultThemeOptions$ = defaultThemeOptions.themes) == null ? void 0 : _defaultThemeOptions$.dark : (_defaultThemeOptions$2 = defaultThemeOptions.themes) == null ? void 0 : _defaultThemeOptions$2.light;
    obj[key] = (0,helpers/* mergeDeep */.Ee)(defaultTheme, theme);
    return obj;
  }, {});
  return (0,helpers/* mergeDeep */.Ee)(defaultThemeOptions, { ...options,
    themes
  });
}; // Composables


function createTheme(app, options) {
  const head = app._context.provides.usehead;
  const parsedOptions = parseThemeOptions(options);
  const styleEl = (0,reactivity_esm_bundler/* ref */.iH)();
  const current = (0,reactivity_esm_bundler/* ref */.iH)(parsedOptions.defaultTheme);
  const themes = (0,reactivity_esm_bundler/* ref */.iH)(parsedOptions.themes);
  const variations = (0,reactivity_esm_bundler/* ref */.iH)(parsedOptions.variations);
  const computedThemes = (0,runtime_core_esm_bundler/* computed */.Fl)(() => {
    return Object.entries(themes.value).reduce((obj, _ref2) => {
      var _parsedOptions$variat;

      let [name, original] = _ref2;
      const theme = { ...original,
        colors: { ...original.colors,
          ...((_parsedOptions$variat = parsedOptions.variations.colors) != null ? _parsedOptions$variat : []).reduce((obj, color) => {
            return { ...obj,
              ...genColorVariations(color, original.colors[color])
            };
          }, {})
        }
      };

      for (const color of Object.keys(theme.colors)) {
        if (/on-[a-z]/.test(color) || theme.colors[`on-${color}`]) continue;
        const onColor = `on-${color}`;
        const colorVal = (0,colorUtils/* colorToInt */.jx)(theme.colors[color]);
        const blackContrast = Math.abs(APCAcontrast(0, colorVal));
        const whiteContrast = Math.abs(APCAcontrast(0xffffff, colorVal)); // TODO: warn about poor color selections
        // const contrastAsText = Math.abs(APCAcontrast(colorVal, colorToInt(theme.colors.background)))
        // const minContrast = Math.max(blackContrast, whiteContrast)
        // if (minContrast < 60) {
        //   consoleInfo(`${key} theme color ${color} has poor contrast (${minContrast.toFixed()}%)`)
        // } else if (contrastAsText < 60 && !['background', 'surface'].includes(color)) {
        //   consoleInfo(`${key} theme color ${color} has poor contrast as text (${contrastAsText.toFixed()}%)`)
        // }
        // Prefer white text if both have an acceptable contrast ratio

        theme.colors[onColor] = whiteContrast > Math.min(blackContrast, 50) ? '#fff' : '#000';
      }

      obj[name] = theme;
      return obj;
    }, {});
  });

  function genColorVariations(name, color) {
    const obj = {};

    for (const variation of ['lighten', 'darken']) {
      const fn = variation === 'lighten' ? colorUtils/* lighten */.$n : colorUtils/* darken */._j;

      for (const amount of (0,helpers/* createRange */.MT)(variations.value[variation], 1)) {
        obj[`${name}-${variation}-${amount}`] = (0,colorUtils/* intToHex */.I4)(fn((0,colorUtils/* colorToInt */.jx)(color), amount));
      }
    }

    return obj;
  }

  const styles = (0,runtime_core_esm_bundler/* computed */.Fl)(() => {
    const lines = [];

    for (const themeName of Object.keys(computedThemes.value)) {
      const variables = computedThemes.value[themeName].variables;
      lines.push(...createCssClass(`.v-theme--${themeName}`, [...genCssVariables(themeName), ...Object.keys(variables).map(key => {
        const value = variables[key];
        const color = typeof value === 'string' && value.startsWith('#') ? (0,colorUtils/* colorToRGB */.nA)(value) : undefined;
        const rgb = color ? `${color.r}, ${color.g}, ${color.b}` : undefined;
        return `--v-${key}: ${rgb != null ? rgb : value}`;
      })]));
    }

    const colors = new Set(Object.values(computedThemes.value).flatMap(theme => Object.keys(theme.colors)));

    for (const key of colors) {
      if (/on-[a-z]/.test(key)) {
        lines.push(...createCssClass(`.${key}`, [`color: rgb(var(--v-theme-${key})) !important`]));
      } else {
        lines.push(...createCssClass(`.bg-${key}`, [`--v-theme-overlay-multiplier: var(--v-theme-${key}-overlay-multiplier)`, `background: rgb(var(--v-theme-${key})) !important`, `color: rgb(var(--v-theme-on-${key})) !important`]), ...createCssClass(`.text-${key}`, [`color: rgb(var(--v-theme-${key})) !important`]), ...createCssClass(`.border-${key}`, [`--v-border-color: var(--v-theme-${key})`]));
      }
    }

    return lines.map((str, i) => i === 0 ? str : `    ${str}`).join('');
  });

  function genCssVariables(name) {
    const theme = computedThemes.value[name];
    if (!theme) throw new Error(`Could not find theme ${name}`);
    const lightOverlay = theme.dark ? 2 : 1;
    const darkOverlay = theme.dark ? 1 : 2;
    const variables = [];

    for (const [key, value] of Object.entries(theme.colors)) {
      const rgb = (0,colorUtils/* colorToRGB */.nA)(value);
      variables.push(`--v-theme-${key}: ${rgb.r},${rgb.g},${rgb.b}`);

      if (!key.startsWith('on-')) {
        variables.push(`--v-theme-${key}-overlay-multiplier: ${(0,colorUtils/* getLuma */.zT)(value) > 0.18 ? lightOverlay : darkOverlay}`);
      }
    }

    return variables;
  }

  function createCssClass(selector, content) {
    return [`${selector} {\n`, ...content.map(line => `  ${line};\n`), '}\n'];
  }

  if (head) {
    head.addHeadObjs((0,runtime_core_esm_bundler/* computed */.Fl)(() => ({
      style: [{
        children: styles.value,
        type: 'text/css',
        id: 'vuetify-theme-stylesheet'
      }]
    })));

    if (globals/* IN_BROWSER */.BR) {
      (0,runtime_core_esm_bundler/* watchEffect */.m0)(() => head.updateDOM());
    }
  } else {
    (0,runtime_core_esm_bundler/* watch */.YP)(themes, updateStyles, {
      deep: true,
      immediate: true
    });

    function updateStyles() {
      if (parsedOptions.isDisabled) return;
      genStyleElement();
      if (styleEl.value) styleEl.value.innerHTML = styles.value;
    }

    function genStyleElement() {
      if (typeof document === 'undefined' || styleEl.value) return;
      const el = document.createElement('style');
      el.type = 'text/css';
      el.id = 'vuetify-theme-stylesheet';
      styleEl.value = el;
      document.head.appendChild(styleEl.value);
    }
  }

  return {
    isDisabled: parsedOptions.isDisabled,
    themes: computedThemes,
    setTheme: (key, theme) => themes.value[key] = theme,
    getTheme: key => computedThemes.value[key],
    current,
    themeClasses: (0,runtime_core_esm_bundler/* computed */.Fl)(() => parsedOptions.isDisabled ? undefined : `v-theme--${current.value}`),
    styles
  };
}
function provideTheme(props) {
  (0,getCurrentInstance/* getCurrentInstance */.F)('provideTheme');
  const theme = (0,runtime_core_esm_bundler/* inject */.f3)(ThemeSymbol, null);
  if (!theme) throw new Error('Could not find Vuetify theme injection');
  const current = (0,runtime_core_esm_bundler/* computed */.Fl)(() => {
    var _props$theme;

    return (_props$theme = props.theme) != null ? _props$theme : theme == null ? void 0 : theme.current.value;
  });
  const themeClasses = (0,runtime_core_esm_bundler/* computed */.Fl)(() => theme.isDisabled ? undefined : `v-theme--${current.value}`);
  const newTheme = { ...theme,
    current,
    themeClasses
  };
  (0,runtime_core_esm_bundler/* provide */.JJ)(ThemeSymbol, newTheme);
  return newTheme;
}
function useTheme() {
  (0,getCurrentInstance/* getCurrentInstance */.F)('useTheme');
  const theme = (0,runtime_core_esm_bundler/* inject */.f3)(ThemeSymbol, null);
  if (!theme) throw new Error('Could not find Vuetify theme injection');
  return theme;
}
//# sourceMappingURL=theme.mjs.map

/***/ }),

/***/ 258:
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {


// EXPORTS
__webpack_require__.d(__webpack_exports__, {
  "L": () => (/* binding */ ClickOutside)
});

// UNUSED EXPORTS: default

;// CONCATENATED MODULE: ./node_modules/vuetify/lib/util/dom.mjs
/**
 * Returns:
 *  - 'null' if the node is not attached to the DOM
 *  - the root node (HTMLDocument | ShadowRoot) otherwise
 */
function attachedRoot(node) {
  /* istanbul ignore next */
  if (typeof node.getRootNode !== 'function') {
    // Shadow DOM not supported (IE11), lets find the root of this node
    while (node.parentNode) node = node.parentNode; // The root parent is the document if the node is attached to the DOM


    if (node !== document) return null;
    return document;
  }

  const root = node.getRootNode(); // The composed root node is the document if the node is attached to the DOM

  if (root !== document && root.getRootNode({
    composed: true
  }) !== document) return null;
  return root;
}
//# sourceMappingURL=dom.mjs.map
;// CONCATENATED MODULE: ./node_modules/vuetify/lib/directives/click-outside/index.mjs


function defaultConditional() {
  return true;
}

function checkEvent(e, el, binding) {
  // The include element callbacks below can be expensive
  // so we should avoid calling them when we're not active.
  // Explicitly check for false to allow fallback compatibility
  // with non-toggleable components
  if (!e || checkIsActive(e, binding) === false) return false; // If we're clicking inside the shadowroot, then the app root doesn't get the same
  // level of introspection as to _what_ we're clicking. We want to check to see if
  // our target is the shadowroot parent container, and if it is, ignore.

  const root = attachedRoot(el);
  if (typeof ShadowRoot !== 'undefined' && root instanceof ShadowRoot && root.host === e.target) return false; // Check if additional elements were passed to be included in check
  // (click must be outside all included elements, if any)

  const elements = (typeof binding.value === 'object' && binding.value.include || (() => []))(); // Add the root element for the component this directive was defined on


  elements.push(el); // Check if it's a click outside our elements, and then if our callback returns true.
  // Non-toggleable components should take action in their callback and return falsy.
  // Toggleable can return true if it wants to deactivate.
  // Note that, because we're in the capture phase, this callback will occur before
  // the bubbling click event on any outside elements.

  return !elements.some(el => el == null ? void 0 : el.contains(e.target));
}

function checkIsActive(e, binding) {
  const isActive = typeof binding.value === 'object' && binding.value.closeConditional || defaultConditional;
  return isActive(e);
}

function directive(e, el, binding) {
  const handler = typeof binding.value === 'function' ? binding.value : binding.value.handler;
  el._clickOutside.lastMousedownWasOutside && checkEvent(e, el, binding) && setTimeout(() => {
    checkIsActive(e, binding) && handler && handler(e);
  }, 0);
}

function handleShadow(el, callback) {
  const root = attachedRoot(el);
  callback(document);

  if (typeof ShadowRoot !== 'undefined' && root instanceof ShadowRoot) {
    callback(root);
  }
}

const ClickOutside = {
  // [data-app] may not be found
  // if using bind, inserted makes
  // sure that the root element is
  // available, iOS does not support
  // clicks on body
  mounted(el, binding) {
    const onClick = e => directive(e, el, binding);

    const onMousedown = e => {
      el._clickOutside.lastMousedownWasOutside = checkEvent(e, el, binding);
    };

    handleShadow(el, app => {
      app.addEventListener('click', onClick, true);
      app.addEventListener('mousedown', onMousedown, true);
    });

    if (!el._clickOutside) {
      el._clickOutside = {
        lastMousedownWasOutside: true
      };
    }

    el._clickOutside[binding.instance.$.uid] = {
      onClick,
      onMousedown
    };
  },

  unmounted(el, binding) {
    if (!el._clickOutside) return;
    handleShadow(el, app => {
      var _el$_clickOutside;

      if (!app || !((_el$_clickOutside = el._clickOutside) != null && _el$_clickOutside[binding.instance.$.uid])) return;
      const {
        onClick,
        onMousedown
      } = el._clickOutside[binding.instance.$.uid];
      app.removeEventListener('click', onClick, true);
      app.removeEventListener('mousedown', onMousedown, true);
    });
    delete el._clickOutside[binding.instance.$.uid];
  }

};
/* harmony default export */ const click_outside = ((/* unused pure expression or super */ null && (ClickOutside)));
//# sourceMappingURL=index.mjs.map

/***/ }),

/***/ 467:
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

// ESM COMPAT FLAG
__webpack_require__.r(__webpack_exports__);

// EXPORTS
__webpack_require__.d(__webpack_exports__, {
  "ClickOutside": () => (/* reexport */ click_outside/* ClickOutside */.L),
  "Intersect": () => (/* reexport */ intersect/* Intersect */.N),
  "Mutate": () => (/* reexport */ Mutate),
  "Resize": () => (/* reexport */ Resize),
  "Ripple": () => (/* reexport */ ripple/* Ripple */.H),
  "Scroll": () => (/* reexport */ Scroll),
  "Touch": () => (/* reexport */ touch/* Touch */.X)
});

// EXTERNAL MODULE: ./node_modules/vuetify/lib/directives/click-outside/index.mjs + 1 modules
var click_outside = __webpack_require__(258);
// EXTERNAL MODULE: ./node_modules/vuetify/lib/directives/intersect/index.mjs
var intersect = __webpack_require__(137);
;// CONCATENATED MODULE: ./node_modules/vuetify/lib/directives/mutate/index.mjs
// Types
function mounted(el, binding) {
  var _modifierKeys$attr, _modifierKeys$char, _modifierKeys$child, _modifierKeys$sub;

  const modifiers = binding.modifiers || {};
  const value = binding.value;
  const {
    once,
    immediate,
    ...modifierKeys
  } = modifiers;
  const defaultValue = !Object.keys(modifierKeys).length;
  const {
    handler,
    options
  } = typeof value === 'object' ? value : {
    handler: value,
    options: {
      attributes: (_modifierKeys$attr = modifierKeys == null ? void 0 : modifierKeys.attr) != null ? _modifierKeys$attr : defaultValue,
      characterData: (_modifierKeys$char = modifierKeys == null ? void 0 : modifierKeys.char) != null ? _modifierKeys$char : defaultValue,
      childList: (_modifierKeys$child = modifierKeys == null ? void 0 : modifierKeys.child) != null ? _modifierKeys$child : defaultValue,
      subtree: (_modifierKeys$sub = modifierKeys == null ? void 0 : modifierKeys.sub) != null ? _modifierKeys$sub : defaultValue
    }
  };
  const observer = new MutationObserver(function () {
    let mutations = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];
    let observer = arguments.length > 1 ? arguments[1] : undefined;
    handler == null ? void 0 : handler(mutations, observer);
    if (once) unmounted(el, binding);
  });
  if (immediate) handler == null ? void 0 : handler([], observer);
  el._mutate = Object(el._mutate);
  el._mutate[binding.instance.$.uid] = {
    observer
  };
  observer.observe(el, options);
}

function unmounted(el, binding) {
  var _el$_mutate;

  if (!((_el$_mutate = el._mutate) != null && _el$_mutate[binding.instance.$.uid])) return;

  el._mutate[binding.instance.$.uid].observer.disconnect();

  delete el._mutate[binding.instance.$.uid];
}

const Mutate = {
  mounted,
  unmounted
};
/* harmony default export */ const mutate = ((/* unused pure expression or super */ null && (Mutate)));
//# sourceMappingURL=index.mjs.map
;// CONCATENATED MODULE: ./node_modules/vuetify/lib/directives/resize/index.mjs
function resize_mounted(el, binding) {
  var _binding$modifiers, _binding$modifiers2;

  const handler = binding.value;
  const options = {
    passive: !((_binding$modifiers = binding.modifiers) != null && _binding$modifiers.active)
  };
  window.addEventListener('resize', handler, options);
  el._onResize = Object(el._onResize);
  el._onResize[binding.instance.$.uid] = {
    handler,
    options
  };

  if (!((_binding$modifiers2 = binding.modifiers) != null && _binding$modifiers2.quiet)) {
    handler();
  }
}

function resize_unmounted(el, binding) {
  var _el$_onResize;

  if (!((_el$_onResize = el._onResize) != null && _el$_onResize[binding.instance.$.uid])) return;
  const {
    handler,
    options
  } = el._onResize[binding.instance.$.uid];
  window.removeEventListener('resize', handler, options);
  delete el._onResize[binding.instance.$.uid];
}

const Resize = {
  mounted: resize_mounted,
  unmounted: resize_unmounted
};
/* harmony default export */ const resize = ((/* unused pure expression or super */ null && (Resize)));
//# sourceMappingURL=index.mjs.map
// EXTERNAL MODULE: ./node_modules/vuetify/lib/directives/ripple/index.mjs + 1 modules
var ripple = __webpack_require__(902);
;// CONCATENATED MODULE: ./node_modules/vuetify/lib/directives/scroll/index.mjs
function scroll_mounted(el, binding) {
  var _binding$modifiers;

  const {
    self = false
  } = (_binding$modifiers = binding.modifiers) != null ? _binding$modifiers : {};
  const value = binding.value;
  const options = typeof value === 'object' && value.options || {
    passive: true
  };
  const handler = typeof value === 'function' || 'handleEvent' in value ? value : value.handler;
  const target = self ? el : binding.arg ? document.querySelector(binding.arg) : window;
  if (!target) return;
  target.addEventListener('scroll', handler, options);
  el._onScroll = Object(el._onScroll);
  el._onScroll[binding.instance.$.uid] = {
    handler,
    options,
    // Don't reference self
    target: self ? undefined : target
  };
}

function scroll_unmounted(el, binding) {
  var _el$_onScroll;

  if (!((_el$_onScroll = el._onScroll) != null && _el$_onScroll[binding.instance.$.uid])) return;
  const {
    handler,
    options,
    target = el
  } = el._onScroll[binding.instance.$.uid];
  target.removeEventListener('scroll', handler, options);
  delete el._onScroll[binding.instance.$.uid];
}

function updated(el, binding) {
  if (binding.value === binding.oldValue) return;
  scroll_unmounted(el, binding);
  scroll_mounted(el, binding);
}

const Scroll = {
  mounted: scroll_mounted,
  unmounted: scroll_unmounted,
  updated
};
/* harmony default export */ const directives_scroll = ((/* unused pure expression or super */ null && (Scroll)));
//# sourceMappingURL=index.mjs.map
// EXTERNAL MODULE: ./node_modules/vuetify/lib/directives/touch/index.mjs
var touch = __webpack_require__(842);
;// CONCATENATED MODULE: ./node_modules/vuetify/lib/directives/index.mjs
 // export { Color } from './color'







//# sourceMappingURL=index.mjs.map

/***/ }),

/***/ 137:
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "N": () => (/* binding */ Intersect),
/* harmony export */   "Z": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _util_index_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(228);
// Utils
 // Types

function mounted(el, binding) {
  if (!_util_index_mjs__WEBPACK_IMPORTED_MODULE_0__/* .SUPPORTS_INTERSECTION */ .cu) return;
  const modifiers = binding.modifiers || {};
  const value = binding.value;
  const {
    handler,
    options
  } = typeof value === 'object' ? value : {
    handler: value,
    options: {}
  };
  const observer = new IntersectionObserver(function () {
    var _el$_observe;

    let entries = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];
    let observer = arguments.length > 1 ? arguments[1] : undefined;

    const _observe = (_el$_observe = el._observe) == null ? void 0 : _el$_observe[binding.instance.$.uid];

    if (!_observe) return; // Just in case, should never fire

    const isIntersecting = entries.some(entry => entry.isIntersecting); // If is not quiet or has already been
    // initted, invoke the user callback

    if (handler && (!modifiers.quiet || _observe.init) && (!modifiers.once || isIntersecting || _observe.init)) {
      handler(isIntersecting, entries, observer);
    }

    if (isIntersecting && modifiers.once) unmounted(el, binding);else _observe.init = true;
  }, options);
  el._observe = Object(el._observe);
  el._observe[binding.instance.$.uid] = {
    init: false,
    observer
  };
  observer.observe(el);
}

function unmounted(el, binding) {
  var _el$_observe2;

  const observe = (_el$_observe2 = el._observe) == null ? void 0 : _el$_observe2[binding.instance.$.uid];
  if (!observe) return;
  observe.observer.unobserve(el);
  delete el._observe[binding.instance.$.uid];
}

const Intersect = {
  mounted,
  unmounted
};
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (Intersect);
//# sourceMappingURL=index.mjs.map

/***/ }),

/***/ 902:
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {


// EXPORTS
__webpack_require__.d(__webpack_exports__, {
  "H": () => (/* binding */ Ripple),
  "Z": () => (/* binding */ ripple)
});

;// CONCATENATED MODULE: ./node_modules/vuetify/lib/directives/ripple/VRipple.css
// extracted by mini-css-extract-plugin

// EXTERNAL MODULE: ./node_modules/vuetify/lib/util/helpers.mjs
var helpers = __webpack_require__(676);
;// CONCATENATED MODULE: ./node_modules/vuetify/lib/directives/ripple/index.mjs
// Styles
 // Utilities

 // Types

const stopSymbol = Symbol('rippleStop');
const DELAY_RIPPLE = 80;

function transform(el, value) {
  el.style.transform = value;
  el.style.webkitTransform = value;
}

function opacity(el, value) {
  el.style.opacity = `calc(${value} * var(--v-theme-overlay-multiplier))`;
}

function isTouchEvent(e) {
  return e.constructor.name === 'TouchEvent';
}

function isKeyboardEvent(e) {
  return e.constructor.name === 'KeyboardEvent';
}

const calculate = function (e, el) {
  var _el$_ripple;

  let value = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
  let localX = 0;
  let localY = 0;

  if (!isKeyboardEvent(e)) {
    const offset = el.getBoundingClientRect();
    const target = isTouchEvent(e) ? e.touches[e.touches.length - 1] : e;
    localX = target.clientX - offset.left;
    localY = target.clientY - offset.top;
  }

  let radius = 0;
  let scale = 0.3;

  if ((_el$_ripple = el._ripple) != null && _el$_ripple.circle) {
    scale = 0.15;
    radius = el.clientWidth / 2;
    radius = value.center ? radius : radius + Math.sqrt((localX - radius) ** 2 + (localY - radius) ** 2) / 4;
  } else {
    radius = Math.sqrt(el.clientWidth ** 2 + el.clientHeight ** 2) / 2;
  }

  const centerX = `${(el.clientWidth - radius * 2) / 2}px`;
  const centerY = `${(el.clientHeight - radius * 2) / 2}px`;
  const x = value.center ? centerX : `${localX - radius}px`;
  const y = value.center ? centerY : `${localY - radius}px`;
  return {
    radius,
    scale,
    x,
    y,
    centerX,
    centerY
  };
};

const ripples = {
  /* eslint-disable max-statements */
  show(e, el) {
    var _el$_ripple2;

    let value = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};

    if (!(el != null && (_el$_ripple2 = el._ripple) != null && _el$_ripple2.enabled)) {
      return;
    }

    const container = document.createElement('span');
    const animation = document.createElement('span');
    container.appendChild(animation);
    container.className = 'v-ripple__container';

    if (value.class) {
      container.className += ` ${value.class}`;
    }

    const {
      radius,
      scale,
      x,
      y,
      centerX,
      centerY
    } = calculate(e, el, value);
    const size = `${radius * 2}px`;
    animation.className = 'v-ripple__animation';
    animation.style.width = size;
    animation.style.height = size;
    el.appendChild(container);
    const computed = window.getComputedStyle(el);

    if (computed && computed.position === 'static') {
      el.style.position = 'relative';
      el.dataset.previousPosition = 'static';
    }

    animation.classList.add('v-ripple__animation--enter');
    animation.classList.add('v-ripple__animation--visible');
    transform(animation, `translate(${x}, ${y}) scale3d(${scale},${scale},${scale})`);
    opacity(animation, 0);
    animation.dataset.activated = String(performance.now());
    setTimeout(() => {
      animation.classList.remove('v-ripple__animation--enter');
      animation.classList.add('v-ripple__animation--in');
      transform(animation, `translate(${centerX}, ${centerY}) scale3d(1,1,1)`);
      opacity(animation, 0.08);
    }, 0);
  },

  hide(el) {
    var _el$_ripple3;

    if (!(el != null && (_el$_ripple3 = el._ripple) != null && _el$_ripple3.enabled)) return;
    const ripples = el.getElementsByClassName('v-ripple__animation');
    if (ripples.length === 0) return;
    const animation = ripples[ripples.length - 1];
    if (animation.dataset.isHiding) return;else animation.dataset.isHiding = 'true';
    const diff = performance.now() - Number(animation.dataset.activated);
    const delay = Math.max(250 - diff, 0);
    setTimeout(() => {
      animation.classList.remove('v-ripple__animation--in');
      animation.classList.add('v-ripple__animation--out');
      opacity(animation, 0);
      setTimeout(() => {
        const ripples = el.getElementsByClassName('v-ripple__animation');

        if (ripples.length === 1 && el.dataset.previousPosition) {
          el.style.position = el.dataset.previousPosition;
          delete el.dataset.previousPosition;
        }

        animation.parentNode && el.removeChild(animation.parentNode);
      }, 300);
    }, delay);
  }

};

function isRippleEnabled(value) {
  return typeof value === 'undefined' || !!value;
}

function rippleShow(e) {
  const value = {};
  const element = e.currentTarget;
  if (!(element != null && element._ripple) || element._ripple.touched || e[stopSymbol]) return; // Don't allow the event to trigger ripples on any other elements

  e[stopSymbol] = true;

  if (isTouchEvent(e)) {
    element._ripple.touched = true;
    element._ripple.isTouch = true;
  } else {
    // It's possible for touch events to fire
    // as mouse events on Android/iOS, this
    // will skip the event call if it has
    // already been registered as touch
    if (element._ripple.isTouch) return;
  }

  value.center = element._ripple.centered || isKeyboardEvent(e);

  if (element._ripple.class) {
    value.class = element._ripple.class;
  }

  if (isTouchEvent(e)) {
    // already queued that shows or hides the ripple
    if (element._ripple.showTimerCommit) return;

    element._ripple.showTimerCommit = () => {
      ripples.show(e, element, value);
    };

    element._ripple.showTimer = window.setTimeout(() => {
      var _element$_ripple;

      if (element != null && (_element$_ripple = element._ripple) != null && _element$_ripple.showTimerCommit) {
        element._ripple.showTimerCommit();

        element._ripple.showTimerCommit = null;
      }
    }, DELAY_RIPPLE);
  } else {
    ripples.show(e, element, value);
  }
}

function rippleStop(e) {
  e[stopSymbol] = true;
}

function rippleHide(e) {
  const element = e.currentTarget;
  if (!element || !element._ripple) return;
  window.clearTimeout(element._ripple.showTimer); // The touch interaction occurs before the show timer is triggered.
  // We still want to show ripple effect.

  if (e.type === 'touchend' && element._ripple.showTimerCommit) {
    element._ripple.showTimerCommit();

    element._ripple.showTimerCommit = null; // re-queue ripple hiding

    element._ripple.showTimer = window.setTimeout(() => {
      rippleHide(e);
    });
    return;
  }

  window.setTimeout(() => {
    if (element._ripple) {
      element._ripple.touched = false;
    }
  });
  ripples.hide(element);
}

function rippleCancelShow(e) {
  const element = e.currentTarget;
  if (!element || !element._ripple) return;

  if (element._ripple.showTimerCommit) {
    element._ripple.showTimerCommit = null;
  }

  window.clearTimeout(element._ripple.showTimer);
}

let keyboardRipple = false;

function keyboardRippleShow(e) {
  if (!keyboardRipple && (e.keyCode === helpers/* keyCodes.enter */.Do.enter || e.keyCode === helpers/* keyCodes.space */.Do.space)) {
    keyboardRipple = true;
    rippleShow(e);
  }
}

function keyboardRippleHide(e) {
  keyboardRipple = false;
  rippleHide(e);
}

function focusRippleHide(e) {
  if (keyboardRipple) {
    keyboardRipple = false;
    rippleHide(e);
  }
}

function updateRipple(el, binding, wasEnabled) {
  var _el$_ripple4;

  const {
    value,
    modifiers
  } = binding;
  const enabled = isRippleEnabled(value);

  if (!enabled) {
    ripples.hide(el);
  }

  el._ripple = (_el$_ripple4 = el._ripple) != null ? _el$_ripple4 : {};
  el._ripple.enabled = enabled;
  el._ripple.centered = modifiers.center;
  el._ripple.circle = modifiers.circle;

  if ((0,helpers/* isObject */.Kn)(value) && value.class) {
    el._ripple.class = value.class;
  }

  if (enabled && !wasEnabled) {
    if (modifiers.stop) {
      el.addEventListener('touchstart', rippleStop, {
        passive: true
      });
      el.addEventListener('mousedown', rippleStop);
      return;
    }

    el.addEventListener('touchstart', rippleShow, {
      passive: true
    });
    el.addEventListener('touchend', rippleHide, {
      passive: true
    });
    el.addEventListener('touchmove', rippleCancelShow, {
      passive: true
    });
    el.addEventListener('touchcancel', rippleHide);
    el.addEventListener('mousedown', rippleShow);
    el.addEventListener('mouseup', rippleHide);
    el.addEventListener('mouseleave', rippleHide);
    el.addEventListener('keydown', keyboardRippleShow);
    el.addEventListener('keyup', keyboardRippleHide);
    el.addEventListener('blur', focusRippleHide); // Anchor tags can be dragged, causes other hides to fail - #1537

    el.addEventListener('dragstart', rippleHide, {
      passive: true
    });
  } else if (!enabled && wasEnabled) {
    removeListeners(el);
  }
}

function removeListeners(el) {
  el.removeEventListener('mousedown', rippleShow);
  el.removeEventListener('touchstart', rippleShow);
  el.removeEventListener('touchend', rippleHide);
  el.removeEventListener('touchmove', rippleCancelShow);
  el.removeEventListener('touchcancel', rippleHide);
  el.removeEventListener('mouseup', rippleHide);
  el.removeEventListener('mouseleave', rippleHide);
  el.removeEventListener('keydown', keyboardRippleShow);
  el.removeEventListener('keyup', keyboardRippleHide);
  el.removeEventListener('dragstart', rippleHide);
  el.removeEventListener('blur', focusRippleHide);
}

function mounted(el, binding) {
  updateRipple(el, binding, false);
}

function unmounted(el) {
  delete el._ripple;
  removeListeners(el);
}

function updated(el, binding) {
  if (binding.value === binding.oldValue) {
    return;
  }

  const wasEnabled = isRippleEnabled(binding.oldValue);
  updateRipple(el, binding, wasEnabled);
}

const Ripple = {
  mounted,
  unmounted,
  updated
};
/* harmony default export */ const ripple = (Ripple);
//# sourceMappingURL=index.mjs.map

/***/ }),

/***/ 842:
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "X": () => (/* binding */ Touch),
/* harmony export */   "Z": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _util_index_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(676);
// Types
// Utilities


const handleGesture = wrapper => {
  const {
    touchstartX,
    touchendX,
    touchstartY,
    touchendY
  } = wrapper;
  const dirRatio = 0.5;
  const minDistance = 16;
  wrapper.offsetX = touchendX - touchstartX;
  wrapper.offsetY = touchendY - touchstartY;

  if (Math.abs(wrapper.offsetY) < dirRatio * Math.abs(wrapper.offsetX)) {
    wrapper.left && touchendX < touchstartX - minDistance && wrapper.left(wrapper);
    wrapper.right && touchendX > touchstartX + minDistance && wrapper.right(wrapper);
  }

  if (Math.abs(wrapper.offsetX) < dirRatio * Math.abs(wrapper.offsetY)) {
    wrapper.up && touchendY < touchstartY - minDistance && wrapper.up(wrapper);
    wrapper.down && touchendY > touchstartY + minDistance && wrapper.down(wrapper);
  }
};

function touchstart(event, wrapper) {
  var _wrapper$start;

  const touch = event.changedTouches[0];
  wrapper.touchstartX = touch.clientX;
  wrapper.touchstartY = touch.clientY;
  (_wrapper$start = wrapper.start) == null ? void 0 : _wrapper$start.call(wrapper, {
    originalEvent: event,
    ...wrapper
  });
}

function touchend(event, wrapper) {
  var _wrapper$end;

  const touch = event.changedTouches[0];
  wrapper.touchendX = touch.clientX;
  wrapper.touchendY = touch.clientY;
  (_wrapper$end = wrapper.end) == null ? void 0 : _wrapper$end.call(wrapper, {
    originalEvent: event,
    ...wrapper
  });
  handleGesture(wrapper);
}

function touchmove(event, wrapper) {
  var _wrapper$move;

  const touch = event.changedTouches[0];
  wrapper.touchmoveX = touch.clientX;
  wrapper.touchmoveY = touch.clientY;
  (_wrapper$move = wrapper.move) == null ? void 0 : _wrapper$move.call(wrapper, {
    originalEvent: event,
    ...wrapper
  });
}

function createHandlers() {
  let value = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
  const wrapper = {
    touchstartX: 0,
    touchstartY: 0,
    touchendX: 0,
    touchendY: 0,
    touchmoveX: 0,
    touchmoveY: 0,
    offsetX: 0,
    offsetY: 0,
    left: value.left,
    right: value.right,
    up: value.up,
    down: value.down,
    start: value.start,
    move: value.move,
    end: value.end
  };
  return {
    touchstart: e => touchstart(e, wrapper),
    touchend: e => touchend(e, wrapper),
    touchmove: e => touchmove(e, wrapper)
  };
}

function mounted(el, binding) {
  var _value$options, _binding$instance, _target$_touchHandler;

  const value = binding.value;
  const target = value != null && value.parent ? el.parentElement : el;
  const options = (_value$options = value == null ? void 0 : value.options) != null ? _value$options : {
    passive: true
  };
  const uid = (_binding$instance = binding.instance) == null ? void 0 : _binding$instance.$.uid; // TODO: use custom uid generator

  if (!target || !uid) return;
  const handlers = createHandlers(binding.value);
  target._touchHandlers = (_target$_touchHandler = target._touchHandlers) != null ? _target$_touchHandler : Object.create(null);
  target._touchHandlers[uid] = handlers;
  (0,_util_index_mjs__WEBPACK_IMPORTED_MODULE_0__/* .keys */ .XP)(handlers).forEach(eventName => {
    target.addEventListener(eventName, handlers[eventName], options);
  });
}

function unmounted(el, binding) {
  var _binding$value, _binding$instance2;

  const target = (_binding$value = binding.value) != null && _binding$value.parent ? el.parentElement : el;
  const uid = (_binding$instance2 = binding.instance) == null ? void 0 : _binding$instance2.$.uid;
  if (!(target != null && target._touchHandlers) || !uid) return;
  const handlers = target._touchHandlers[uid];
  (0,_util_index_mjs__WEBPACK_IMPORTED_MODULE_0__/* .keys */ .XP)(handlers).forEach(eventName => {
    target.removeEventListener(eventName, handlers[eventName]);
  });
  delete target._touchHandlers[uid];
}

const Touch = {
  mounted,
  unmounted
};
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (Touch);
//# sourceMappingURL=index.mjs.map

/***/ }),

/***/ 935:
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {


// EXPORTS
__webpack_require__.d(__webpack_exports__, {
  "Rd": () => (/* binding */ createVuetify)
});

// UNUSED EXPORTS: provideRtl, useDisplay, useLayout, useRtl, useTheme

// EXTERNAL MODULE: ./node_modules/vuetify/lib/composables/display.mjs
var display = __webpack_require__(455);
// EXTERNAL MODULE: ./node_modules/vuetify/lib/composables/theme.mjs + 1 modules
var theme = __webpack_require__(195);
// EXTERNAL MODULE: ./node_modules/vuetify/lib/composables/icons.mjs
var composables_icons = __webpack_require__(264);
// EXTERNAL MODULE: ./node_modules/vuetify/lib/composables/defaults.mjs
var defaults = __webpack_require__(474);
// EXTERNAL MODULE: ./node_modules/vuetify/lib/composables/locale.mjs + 1 modules
var locale = __webpack_require__(458);
// EXTERNAL MODULE: ./node_modules/vuetify/lib/composables/rtl.mjs + 1 modules
var rtl = __webpack_require__(144);
// EXTERNAL MODULE: ./node_modules/@vue/runtime-core/dist/runtime-core.esm-bundler.js
var runtime_core_esm_bundler = __webpack_require__(252);
;// CONCATENATED MODULE: ./node_modules/vuetify/lib/iconsets/mdi.mjs
// Utilities
 // Components

 // Types

const mdi_aliases = {
  collapse: 'mdi-chevron-up',
  complete: 'mdi-check',
  cancel: 'mdi-close-circle',
  close: 'mdi-close',
  delete: 'mdi-close-circle',
  // delete (e.g. v-chip close)
  clear: 'mdi-close-circle',
  success: 'mdi-check-circle',
  info: 'mdi-information',
  warning: 'mdi-alert-circle',
  error: 'mdi-close-circle',
  prev: 'mdi-chevron-left',
  next: 'mdi-chevron-right',
  checkboxOn: 'mdi-checkbox-marked',
  checkboxOff: 'mdi-checkbox-blank-outline',
  checkboxIndeterminate: 'mdi-minus-box',
  delimiter: 'mdi-circle',
  // for carousel
  sort: 'mdi-arrow-up',
  expand: 'mdi-chevron-down',
  menu: 'mdi-menu',
  subgroup: 'mdi-menu-down',
  dropdown: 'mdi-menu-down',
  radioOn: 'mdi-radiobox-marked',
  radioOff: 'mdi-radiobox-blank',
  edit: 'mdi-pencil',
  ratingEmpty: 'mdi-star-outline',
  ratingFull: 'mdi-star',
  ratingHalf: 'mdi-star-half-full',
  loading: 'mdi-cached',
  first: 'mdi-page-first',
  last: 'mdi-page-last',
  unfold: 'mdi-unfold-more-horizontal',
  file: 'mdi-paperclip',
  plus: 'mdi-plus',
  minus: 'mdi-minus'
};
const mdi = {
  // Not using mergeProps here, functional components merge props by default (?)
  component: props => (0,runtime_core_esm_bundler.h)(composables_icons/* VClassIcon */.$0, { ...props,
    class: 'mdi'
  })
};

//# sourceMappingURL=mdi.mjs.map
// EXTERNAL MODULE: ./node_modules/@vue/reactivity/dist/reactivity.esm-bundler.js
var reactivity_esm_bundler = __webpack_require__(262);
// EXTERNAL MODULE: ./node_modules/vuetify/lib/util/defineComponent.mjs
var defineComponent = __webpack_require__(719);
// EXTERNAL MODULE: ./node_modules/vuetify/lib/util/helpers.mjs
var helpers = __webpack_require__(676);
;// CONCATENATED MODULE: ./node_modules/vuetify/lib/framework.mjs






 // Utilities


 // Types


const createVuetify = function () {
  let options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

  const install = app => {
    const {
      aliases = {},
      components = {},
      directives = {},
      icons = {}
    } = options;

    for (const key in directives) {
      app.directive(key, directives[key]);
    }

    for (const key in components) {
      app.component(key, components[key]);
    }

    for (const key in aliases) {
      app.component(key, (0,defineComponent/* defineComponent */.a)({ ...aliases[key],
        name: key
      }));
    }

    app.provide(defaults/* DefaultsSymbol */.tI, (0,defaults/* createDefaults */.yB)(options.defaults));
    app.provide(display/* DisplaySymbol */.x6, (0,display/* createDisplay */.fT)(options.display));
    app.provide(theme/* ThemeSymbol */.bo, (0,theme/* createTheme */.jG)(app, options.theme));
    app.provide(composables_icons/* IconSymbol */.YK, (0,helpers/* mergeDeep */.Ee)({
      defaultSet: 'mdi',
      sets: { ...composables_icons/* defaultSets */.xe,
        mdi: mdi
      },
      aliases: mdi_aliases
    }, icons));
    const {
      adapter,
      rootInstance
    } = (0,locale/* createLocaleAdapter */.aU)(app, options == null ? void 0 : options.locale);
    app.provide(locale/* LocaleAdapterSymbol */.uM, adapter);
    app.provide(rtl/* RtlSymbol */.Cm, (0,rtl/* createRtl */.is)(rootInstance, options == null ? void 0 : options.locale)); // Vue's inject() can only be used in setup

    function inject(key) {
      var _vm$parent$provides, _vm$parent, _vm$vnode$appContext;

      const vm = this.$;
      const provides = (_vm$parent$provides = (_vm$parent = vm.parent) == null ? void 0 : _vm$parent.provides) != null ? _vm$parent$provides : (_vm$vnode$appContext = vm.vnode.appContext) == null ? void 0 : _vm$vnode$appContext.provides;

      if (provides && key in provides) {
        return provides[key];
      }
    }

    app.mixin({
      computed: {
        $vuetify() {
          return (0,reactivity_esm_bundler/* reactive */.qj)({
            defaults: inject.call(this, defaults/* DefaultsSymbol */.tI),
            display: inject.call(this, display/* DisplaySymbol */.x6),
            theme: inject.call(this, theme/* ThemeSymbol */.bo),
            icons: inject.call(this, composables_icons/* IconSymbol */.YK),
            locale: inject.call(this, locale/* LocaleAdapterSymbol */.uM),
            rtl: inject.call(this, rtl/* RtlSymbol */.Cm)
          });
        }

      }
    });
  };

  return {
    install
  };
};
//# sourceMappingURL=framework.mjs.map

/***/ }),

/***/ 64:
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {


// EXPORTS
__webpack_require__.d(__webpack_exports__, {
  "nk": () => (/* binding */ HSLAtoHSVA),
  "eC": () => (/* binding */ HSVAtoCSS),
  "mM": () => (/* binding */ HSVAtoHSLA),
  "n0": () => (/* binding */ HSVAtoHex),
  "UJ": () => (/* binding */ HSVAtoRGBA),
  "yt": () => (/* binding */ HexToHSVA),
  "Yq": () => (/* binding */ RGBAtoHSVA),
  "jx": () => (/* binding */ colorToInt),
  "nA": () => (/* binding */ colorToRGB),
  "_j": () => (/* binding */ darken),
  "mj": () => (/* binding */ getContrast),
  "zT": () => (/* binding */ getLuma),
  "I4": () => (/* binding */ intToHex),
  "NA": () => (/* binding */ isCssColor),
  "$n": () => (/* binding */ lighten),
  "KQ": () => (/* binding */ parseHex)
});

// UNUSED EXPORTS: HexToRGBA, RGBAtoCSS, RGBAtoHex, RGBtoCSS, RGBtoInt, classToHex, colorToHex, parseGradient

// EXTERNAL MODULE: ./node_modules/vuetify/lib/util/console.mjs
var console = __webpack_require__(130);
// EXTERNAL MODULE: ./node_modules/vuetify/lib/util/helpers.mjs
var helpers = __webpack_require__(676);
;// CONCATENATED MODULE: ./node_modules/vuetify/lib/util/color/transformSRGB.mjs
 // For converting XYZ to sRGB

const srgbForwardMatrix = [[3.2406, -1.5372, -0.4986], [-0.9689, 1.8758, 0.0415], [0.0557, -0.2040, 1.0570]]; // Forward gamma adjust

const srgbForwardTransform = C => C <= 0.0031308 ? C * 12.92 : 1.055 * C ** (1 / 2.4) - 0.055; // For converting sRGB to XYZ


const srgbReverseMatrix = [[0.4124, 0.3576, 0.1805], [0.2126, 0.7152, 0.0722], [0.0193, 0.1192, 0.9505]]; // Reverse gamma adjust

const srgbReverseTransform = C => C <= 0.04045 ? C / 12.92 : ((C + 0.055) / 1.055) ** 2.4;

function fromXYZ(xyz) {
  const rgb = Array(3);
  const transform = srgbForwardTransform;
  const matrix = srgbForwardMatrix; // Matrix transform, then gamma adjustment

  for (let i = 0; i < 3; ++i) {
    rgb[i] = Math.round((0,helpers/* clamp */.uZ)(transform(matrix[i][0] * xyz[0] + matrix[i][1] * xyz[1] + matrix[i][2] * xyz[2])) * 255);
  } // Rescale back to [0, 255]


  return (rgb[0] << 16) + (rgb[1] << 8) + (rgb[2] << 0);
}
function toXYZ(rgb) {
  const xyz = [0, 0, 0];
  const transform = srgbReverseTransform;
  const matrix = srgbReverseMatrix; // Rescale from [0, 255] to [0, 1] then adjust sRGB gamma to linear RGB

  const r = transform((rgb >> 16 & 0xff) / 255);
  const g = transform((rgb >> 8 & 0xff) / 255);
  const b = transform((rgb >> 0 & 0xff) / 255); // Matrix color space transform

  for (let i = 0; i < 3; ++i) {
    xyz[i] = matrix[i][0] * r + matrix[i][1] * g + matrix[i][2] * b;
  }

  return xyz;
}
//# sourceMappingURL=transformSRGB.mjs.map
;// CONCATENATED MODULE: ./node_modules/vuetify/lib/util/color/transformCIELAB.mjs
const delta = 0.20689655172413793; // 6÷29

const cielabForwardTransform = t => t > delta ** 3 ? Math.cbrt(t) : t / (3 * delta ** 2) + 4 / 29;

const cielabReverseTransform = t => t > delta ? t ** 3 : 3 * delta ** 2 * (t - 4 / 29);

function transformCIELAB_fromXYZ(xyz) {
  const transform = cielabForwardTransform;
  const transformedY = transform(xyz[1]);
  return [116 * transformedY - 16, 500 * (transform(xyz[0] / 0.95047) - transformedY), 200 * (transformedY - transform(xyz[2] / 1.08883))];
}
function transformCIELAB_toXYZ(lab) {
  const transform = cielabReverseTransform;
  const Ln = (lab[0] + 16) / 116;
  return [transform(Ln + lab[1] / 500) * 0.95047, transform(Ln), transform(Ln - lab[2] / 200) * 1.08883];
}
//# sourceMappingURL=transformCIELAB.mjs.map
;// CONCATENATED MODULE: ./node_modules/vuetify/lib/util/colorUtils.mjs
// Utilities



 // Types

function isCssColor(color) {
  return !!color && /^(#|var\(--|(rgb|hsl)a?\()/.test(color);
}
function colorToInt(color) {
  let rgb;

  if (typeof color === 'number') {
    rgb = color;
  } else if (typeof color === 'string') {
    let c = color.startsWith('#') ? color.substring(1) : color;

    if (c.length === 3) {
      c = c.split('').map(char => char + char).join('');
    }

    if (c.length !== 6) {
      (0,console/* consoleWarn */.Kd)(`'${color}' is not a valid rgb color`);
    }

    rgb = parseInt(c, 16);
  } else {
    throw new TypeError(`Colors can only be numbers or strings, recieved ${color == null ? color : color.constructor.name} instead`);
  }

  if (rgb < 0) {
    (0,console/* consoleWarn */.Kd)(`Colors cannot be negative: '${color}'`);
    rgb = 0;
  } else if (rgb > 0xffffff || isNaN(rgb)) {
    (0,console/* consoleWarn */.Kd)(`'${color}' is not a valid rgb color`);
    rgb = 0xffffff;
  }

  return rgb;
}
function classToHex(color, colors, currentTheme) {
  const [colorName, colorModifier] = color.toString().trim().replace('-', '').split(' ', 2);
  let hexColor = '';

  if (colorName && colorName in colors) {
    if (colorModifier && colorModifier in colors[colorName]) {
      hexColor = colors[colorName][colorModifier];
    } else if ('base' in colors[colorName]) {
      hexColor = colors[colorName].base;
    }
  } else if (colorName && colorName in currentTheme) {
    hexColor = currentTheme[colorName];
  }

  return hexColor;
}
function intToHex(color) {
  let hexColor = color.toString(16);
  if (hexColor.length < 6) hexColor = '0'.repeat(6 - hexColor.length) + hexColor;
  return '#' + hexColor;
}
function colorToHex(color) {
  return intToHex(colorToInt(color));
}
/**
 * Converts HSVA to RGBA. Based on formula from https://en.wikipedia.org/wiki/HSL_and_HSV
 *
 * @param color HSVA color as an array [0-360, 0-1, 0-1, 0-1]
 */

function HSVAtoRGBA(hsva) {
  const {
    h,
    s,
    v,
    a
  } = hsva;

  const f = n => {
    const k = (n + h / 60) % 6;
    return v - v * s * Math.max(Math.min(k, 4 - k, 1), 0);
  };

  const rgb = [f(5), f(3), f(1)].map(v => Math.round(v * 255));
  return {
    r: rgb[0],
    g: rgb[1],
    b: rgb[2],
    a
  };
}
/**
 * Converts RGBA to HSVA. Based on formula from https://en.wikipedia.org/wiki/HSL_and_HSV
 *
 * @param color RGBA color as an array [0-255, 0-255, 0-255, 0-1]
 */

function RGBAtoHSVA(rgba) {
  if (!rgba) return {
    h: 0,
    s: 1,
    v: 1,
    a: 1
  };
  const r = rgba.r / 255;
  const g = rgba.g / 255;
  const b = rgba.b / 255;
  const max = Math.max(r, g, b);
  const min = Math.min(r, g, b);
  let h = 0;

  if (max !== min) {
    if (max === r) {
      h = 60 * (0 + (g - b) / (max - min));
    } else if (max === g) {
      h = 60 * (2 + (b - r) / (max - min));
    } else if (max === b) {
      h = 60 * (4 + (r - g) / (max - min));
    }
  }

  if (h < 0) h = h + 360;
  const s = max === 0 ? 0 : (max - min) / max;
  const hsv = [h, s, max];
  return {
    h: hsv[0],
    s: hsv[1],
    v: hsv[2],
    a: rgba.a
  };
}
function HSVAtoHSLA(hsva) {
  const {
    h,
    s,
    v,
    a
  } = hsva;
  const l = v - v * s / 2;
  const sprime = l === 1 || l === 0 ? 0 : (v - l) / Math.min(l, 1 - l);
  return {
    h,
    s: sprime,
    l,
    a
  };
}
function HSLAtoHSVA(hsl) {
  const {
    h,
    s,
    l,
    a
  } = hsl;
  const v = l + s * Math.min(l, 1 - l);
  const sprime = v === 0 ? 0 : 2 - 2 * l / v;
  return {
    h,
    s: sprime,
    v,
    a
  };
}
function RGBAtoCSS(rgba) {
  return `rgba(${rgba.r}, ${rgba.g}, ${rgba.b}, ${rgba.a})`;
}
function HSVAtoCSS(hsva) {
  return RGBAtoCSS(HSVAtoRGBA(hsva));
}
function RGBtoCSS(rgba) {
  return RGBAtoCSS({ ...rgba,
    a: 1
  });
}
function RGBAtoHex(rgba) {
  const toHex = v => {
    const h = Math.round(v).toString(16);
    return ('00'.substr(0, 2 - h.length) + h).toUpperCase();
  };

  return `#${[toHex(rgba.r), toHex(rgba.g), toHex(rgba.b), toHex(Math.round(rgba.a * 255))].join('')}`;
}
function HexToRGBA(hex) {
  const rgba = (0,helpers/* chunk */.yo)(hex.slice(1), 2).map(c => parseInt(c, 16));
  return {
    r: rgba[0],
    g: rgba[1],
    b: rgba[2],
    a: Math.round(rgba[3] / 255 * 100) / 100
  };
}
function HexToHSVA(hex) {
  const rgb = HexToRGBA(hex);
  return RGBAtoHSVA(rgb);
}
function HSVAtoHex(hsva) {
  return RGBAtoHex(HSVAtoRGBA(hsva));
}
function parseHex(hex) {
  if (hex.startsWith('#')) {
    hex = hex.slice(1);
  }

  hex = hex.replace(/([^0-9a-f])/gi, 'F');

  if (hex.length === 3 || hex.length === 4) {
    hex = hex.split('').map(x => x + x).join('');
  }

  if (hex.length === 6) {
    hex = (0,helpers/* padEnd */.qy)(hex, 8, 'F');
  } else {
    hex = (0,helpers/* padEnd */.qy)((0,helpers/* padEnd */.qy)(hex, 6), 8, 'F');
  }

  return `#${hex}`.toUpperCase().substr(0, 9);
}
function parseGradient(gradient, colors, currentTheme) {
  return gradient.replace(/([a-z]+(\s[a-z]+-[1-5])?)(?=$|,)/gi, x => {
    return classToHex(x, colors, currentTheme) || x;
  }).replace(/(rgba\()#[0-9a-f]+(?=,)/gi, x => {
    return 'rgba(' + Object.values(HexToRGBA(parseHex(x.replace(/rgba\(/, '')))).slice(0, 3).join(',');
  });
}
function RGBtoInt(rgba) {
  return (rgba.r << 16) + (rgba.g << 8) + rgba.b;
}
function colorToRGB(color) {
  const int = colorToInt(color);
  return {
    r: (int & 0xFF0000) >> 16,
    g: (int & 0xFF00) >> 8,
    b: int & 0xFF
  };
}
function lighten(value, amount) {
  const lab = transformCIELAB_fromXYZ(toXYZ(value)); // TODO: why this false positive?
  // eslint-disable-next-line @typescript-eslint/restrict-plus-operands

  lab[0] = lab[0] + amount * 10;
  return fromXYZ(transformCIELAB_toXYZ(lab));
}
function darken(value, amount) {
  const lab = transformCIELAB_fromXYZ(toXYZ(value));
  lab[0] = lab[0] - amount * 10;
  return fromXYZ(transformCIELAB_toXYZ(lab));
}
/**
 * Calculate the relative luminance of a given color
 * @see https://www.w3.org/TR/WCAG20/#relativeluminancedef
 */

function getLuma(color) {
  const rgb = colorToInt(color);
  return toXYZ(rgb)[1];
}
/**
 * Returns the contrast ratio (1-21) between two colors.
 * @see https://www.w3.org/TR/WCAG20/#contrast-ratiodef
 */

function getContrast(first, second) {
  const l1 = getLuma(first);
  const l2 = getLuma(second);
  const light = Math.max(l1, l2);
  const dark = Math.min(l1, l2);
  return (light + 0.05) / (dark + 0.05);
}
//# sourceMappingURL=colorUtils.mjs.map

/***/ }),

/***/ 130:
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "Kd": () => (/* binding */ consoleWarn),
/* harmony export */   "N6": () => (/* binding */ consoleError)
/* harmony export */ });
/* unused harmony exports consoleInfo, deprecate, breaking, removed */
/* eslint-disable no-console */
// import Vuetify from '../framework'
function createMessage(message, vm, parent) {
  // if (Vuetify.config.silent) return
  if (parent) {
    vm = {
      _isVue: true,
      $parent: parent,
      $options: vm
    };
  }

  if (vm) {
    // Only show each message once per instance
    vm.$_alreadyWarned = vm.$_alreadyWarned || [];
    if (vm.$_alreadyWarned.includes(message)) return;
    vm.$_alreadyWarned.push(message);
  }

  return `[Vuetify] ${message}` + (vm ? generateComponentTrace(vm) : '');
}

function consoleInfo(message, vm, parent) {
  const newMessage = createMessage(message, vm, parent);
  newMessage != null && console.info(newMessage);
}
function consoleWarn(message, vm, parent) {
  const newMessage = createMessage(message, vm, parent);
  newMessage != null && console.warn(newMessage);
}
function consoleError(message, vm, parent) {
  const newMessage = createMessage(message, vm, parent);
  newMessage != null && console.error(newMessage);
}
function deprecate(original, replacement, vm, parent) {
  consoleWarn(`[UPGRADE] '${original}' is deprecated, use '${replacement}' instead.`, vm, parent);
}
function breaking(original, replacement, vm, parent) {
  consoleError(`[BREAKING] '${original}' has been removed, use '${replacement}' instead. For more information, see the upgrade guide https://github.com/vuetifyjs/vuetify/releases/tag/v2.0.0#user-content-upgrade-guide`, vm, parent);
}
function removed(original, vm, parent) {
  consoleWarn(`[REMOVED] '${original}' has been removed. You can safely omit it.`, vm, parent);
}
/**
 * Shamelessly stolen from vuejs/vue/blob/dev/src/core/util/debug.js
 */

const classifyRE = /(?:^|[-_])(\w)/g;

const classify = str => str.replace(classifyRE, c => c.toUpperCase()).replace(/[-_]/g, '');

function formatComponentName(vm, includeFile) {
  if (vm.$root === vm) {
    return '<Root>';
  }

  const options = typeof vm === 'function' && vm.cid != null ? vm.options : vm._isVue ? vm.$options || vm.constructor.options : vm || {};
  let name = options.name || options._componentTag;
  const file = options.__file;

  if (!name && file) {
    const match = file.match(/([^/\\]+)\.vue$/);
    name = match == null ? void 0 : match[1];
  }

  return (name ? `<${classify(name)}>` : `<Anonymous>`) + (file && includeFile !== false ? ` at ${file}` : '');
}

function generateComponentTrace(vm) {
  if (vm._isVue && vm.$parent) {
    const tree = [];
    let currentRecursiveSequence = 0;

    while (vm) {
      if (tree.length > 0) {
        const last = tree[tree.length - 1];

        if (last.constructor === vm.constructor) {
          currentRecursiveSequence++;
          vm = vm.$parent;
          continue;
        } else if (currentRecursiveSequence > 0) {
          tree[tree.length - 1] = [last, currentRecursiveSequence];
          currentRecursiveSequence = 0;
        }
      }

      tree.push(vm);
      vm = vm.$parent;
    }

    return '\n\nfound in\n\n' + tree.map((vm, i) => `${i === 0 ? '---> ' : ' '.repeat(5 + i * 2)}${Array.isArray(vm) // eslint-disable-next-line sonarjs/no-nested-template-literals
    ? `${formatComponentName(vm[0])}... (${vm[1]} recursive calls)` : formatComponentName(vm)}`).join('\n');
  } else {
    return `\n\n(found in ${formatComponentName(vm)})`;
  }
}
//# sourceMappingURL=console.mjs.map

/***/ }),

/***/ 719:
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "a": () => (/* binding */ defineComponent),
/* harmony export */   "e": () => (/* binding */ genericComponent)
/* harmony export */ });
/* harmony import */ var vue__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(252);
/* harmony import */ var vue__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(262);
/* harmony import */ var _console_mjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(130);
/* harmony import */ var _helpers_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(676);
/* harmony import */ var _composables_defaults_mjs__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(474);
// Utils



 // Types

function propIsDefined(vnode, prop) {
  var _vnode$props, _vnode$props2;

  return ((_vnode$props = vnode.props) == null ? void 0 : _vnode$props.hasOwnProperty(prop)) || ((_vnode$props2 = vnode.props) == null ? void 0 : _vnode$props2.hasOwnProperty((0,_helpers_mjs__WEBPACK_IMPORTED_MODULE_0__/* .toKebabCase */ .mA)(prop)));
}

const defineComponent = function defineComponent(options) {
  var _options$_setup;

  options._setup = (_options$_setup = options._setup) != null ? _options$_setup : options.setup;

  if (!options.name) {
    (0,_console_mjs__WEBPACK_IMPORTED_MODULE_1__/* .consoleWarn */ .Kd)('The component is missing an explicit name, unable to generate default prop value');
    return options;
  }

  if (options._setup) {
    var _options$props;

    options.props = (_options$props = options.props) != null ? _options$props : {};
    options.props._as = String;

    options.setup = function setup(props, ctx) {
      const vm = (0,vue__WEBPACK_IMPORTED_MODULE_2__/* .getCurrentInstance */ .FN)();
      const defaults = (0,_composables_defaults_mjs__WEBPACK_IMPORTED_MODULE_3__/* .useDefaults */ .qy)();

      const _subcomponentDefaults = (0,vue__WEBPACK_IMPORTED_MODULE_4__/* .shallowRef */ .XI)();

      const _props = (0,vue__WEBPACK_IMPORTED_MODULE_4__/* .shallowReactive */ .Um)({ ...(0,vue__WEBPACK_IMPORTED_MODULE_4__/* .toRaw */ .IU)(props)
      });

      (0,vue__WEBPACK_IMPORTED_MODULE_2__/* .watchEffect */ .m0)(() => {
        var _props$_as;

        const globalDefaults = defaults.value.global;
        const componentDefaults = defaults.value[(_props$_as = props._as) != null ? _props$_as : options.name];

        if (componentDefaults) {
          const subComponents = Object.entries(componentDefaults).filter(_ref => {
            let [key] = _ref;
            return key.startsWith('V');
          });
          if (subComponents.length) _subcomponentDefaults.value = Object.fromEntries(subComponents);
        }

        for (const prop of Object.keys(props)) {
          let newVal;

          if (propIsDefined(vm.vnode, prop)) {
            newVal = props[prop];
          } else {
            var _ref2, _componentDefaults$pr;

            newVal = (_ref2 = (_componentDefaults$pr = componentDefaults == null ? void 0 : componentDefaults[prop]) != null ? _componentDefaults$pr : globalDefaults == null ? void 0 : globalDefaults[prop]) != null ? _ref2 : props[prop];
          }

          if (_props[prop] !== newVal) {
            _props[prop] = newVal;
          }
        }
      });

      const setupBindings = options._setup(_props, ctx);

      let scope;
      (0,vue__WEBPACK_IMPORTED_MODULE_2__/* .watch */ .YP)(_subcomponentDefaults, (val, oldVal) => {
        if (!val && scope) scope.stop();else if (val && !oldVal) {
          scope = (0,vue__WEBPACK_IMPORTED_MODULE_4__/* .effectScope */ .B)();
          scope.run(() => {
            (0,_composables_defaults_mjs__WEBPACK_IMPORTED_MODULE_3__/* .provideDefaults */ .AF)(val);
          });
        }
      }, {
        immediate: true
      });
      return setupBindings;
    };
  }

  return options;
};
function genericComponent() {
  let exposeDefaults = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : true;
  return options => (exposeDefaults ? defineComponent : vue__WEBPACK_IMPORTED_MODULE_2__/* .defineComponent */ .aZ)(options);
}
//# sourceMappingURL=defineComponent.mjs.map

/***/ }),

/***/ 83:
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "B": () => (/* binding */ getCurrentInstanceName),
/* harmony export */   "F": () => (/* binding */ getCurrentInstance)
/* harmony export */ });
/* harmony import */ var vue__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(252);
/* harmony import */ var _helpers_mjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(676);
// Utilities


function getCurrentInstance(name, message) {
  const vm = (0,vue__WEBPACK_IMPORTED_MODULE_0__/* .getCurrentInstance */ .FN)();

  if (!vm) {
    throw new Error(`[Vuetify] ${name} ${message || 'must be called from inside a setup function'}`);
  }

  return vm;
}
function getCurrentInstanceName() {
  var _getCurrentInstance$t;

  let name = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 'composables';
  return (0,_helpers_mjs__WEBPACK_IMPORTED_MODULE_1__/* .toKebabCase */ .mA)((_getCurrentInstance$t = getCurrentInstance(name).type) == null ? void 0 : _getCurrentInstance$t.name);
}
//# sourceMappingURL=getCurrentInstance.mjs.map

/***/ }),

/***/ 228:
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "BR": () => (/* binding */ IN_BROWSER),
/* harmony export */   "Z1": () => (/* binding */ SUPPORTS_FOCUS_VISIBLE),
/* harmony export */   "cu": () => (/* binding */ SUPPORTS_INTERSECTION),
/* harmony export */   "sR": () => (/* binding */ SUPPORTS_TOUCH)
/* harmony export */ });
/* unused harmony exports IS_NODE, IS_DEBUG, IS_PROD */
const IS_NODE = typeof process !== 'undefined';
const IN_BROWSER = typeof window !== 'undefined';
const IS_DEBUG = IS_NODE && process.env.DEBUG === 'true';
const IS_PROD = IS_NODE && "production" === 'production';
const SUPPORTS_INTERSECTION = IN_BROWSER && 'IntersectionObserver' in window;
const SUPPORTS_TOUCH = IN_BROWSER && ('ontouchstart' in window || window.navigator.maxTouchPoints > 0);
const SUPPORTS_FOCUS_VISIBLE = IN_BROWSER && CSS.supports('selector(:focus-visible)');
//# sourceMappingURL=globals.mjs.map

/***/ }),

/***/ 676:
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "An": () => (/* binding */ filterInputAttrs),
/* harmony export */   "DC": () => (/* binding */ getEventCoordinates),
/* harmony export */   "Do": () => (/* binding */ keyCodes),
/* harmony export */   "Ee": () => (/* binding */ mergeDeep),
/* harmony export */   "FT": () => (/* binding */ wrapInArray),
/* harmony export */   "Kn": () => (/* binding */ isObject),
/* harmony export */   "MT": () => (/* binding */ createRange),
/* harmony export */   "PU": () => (/* binding */ CircularBuffer),
/* harmony export */   "RA": () => (/* binding */ flattenFragments),
/* harmony export */   "XE": () => (/* binding */ humanReadableFileSize),
/* harmony export */   "XP": () => (/* binding */ keys),
/* harmony export */   "bY": () => (/* binding */ findChildrenWithProvide),
/* harmony export */   "ei": () => (/* binding */ pick),
/* harmony export */   "ff": () => (/* binding */ keyValues),
/* harmony export */   "kb": () => (/* binding */ convertToUnit),
/* harmony export */   "mA": () => (/* binding */ toKebabCase),
/* harmony export */   "qF": () => (/* binding */ getPropertyFromItem),
/* harmony export */   "qy": () => (/* binding */ padEnd),
/* harmony export */   "rU": () => (/* binding */ isComponentInstance),
/* harmony export */   "sq": () => (/* binding */ getUid),
/* harmony export */   "uZ": () => (/* binding */ clamp),
/* harmony export */   "vO": () => (/* binding */ getObjectValueByPath),
/* harmony export */   "vZ": () => (/* binding */ deepEqual),
/* harmony export */   "yo": () => (/* binding */ chunk)
/* harmony export */ });
/* unused harmony exports getNestedValue, getZIndex, escapeHTML, filterObjectOnKeys, arrayDiff, groupItems, sortItems, defaultFilter, searchItems, debounce, throttle, getPrefixedSlots, camelizeObjectKeys, fillArray, randomHexColor, findChildren */
/* harmony import */ var vue__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(252);
function _classPrivateFieldInitSpec(obj, privateMap, value) { _checkPrivateRedeclaration(obj, privateMap); privateMap.set(obj, value); }

function _checkPrivateRedeclaration(obj, privateCollection) { if (privateCollection.has(obj)) { throw new TypeError("Cannot initialize the same private elements twice on an object"); } }

function _classPrivateFieldSet(receiver, privateMap, value) { var descriptor = _classExtractFieldDescriptor(receiver, privateMap, "set"); _classApplyDescriptorSet(receiver, descriptor, value); return value; }

function _classApplyDescriptorSet(receiver, descriptor, value) { if (descriptor.set) { descriptor.set.call(receiver, value); } else { if (!descriptor.writable) { throw new TypeError("attempted to set read only private field"); } descriptor.value = value; } }

function _classPrivateFieldGet(receiver, privateMap) { var descriptor = _classExtractFieldDescriptor(receiver, privateMap, "get"); return _classApplyDescriptorGet(receiver, descriptor); }

function _classExtractFieldDescriptor(receiver, privateMap, action) { if (!privateMap.has(receiver)) { throw new TypeError("attempted to " + action + " private field on non-instance"); } return privateMap.get(receiver); }

function _classApplyDescriptorGet(receiver, descriptor) { if (descriptor.get) { return descriptor.get.call(receiver); } return descriptor.value; }

// Utilities
 // Types

function getNestedValue(obj, path, fallback) {
  const last = path.length - 1;
  if (last < 0) return obj === undefined ? fallback : obj;

  for (let i = 0; i < last; i++) {
    if (obj == null) {
      return fallback;
    }

    obj = obj[path[i]];
  }

  if (obj == null) return fallback;
  return obj[path[last]] === undefined ? fallback : obj[path[last]];
}
function deepEqual(a, b) {
  if (a === b) return true;

  if (a instanceof Date && b instanceof Date && a.getTime() !== b.getTime()) {
    // If the values are Date, compare them as timestamps
    return false;
  }

  if (a !== Object(a) || b !== Object(b)) {
    // If the values aren't objects, they were already checked for equality
    return false;
  }

  const props = Object.keys(a);

  if (props.length !== Object.keys(b).length) {
    // Different number of props, don't bother to check
    return false;
  }

  return props.every(p => deepEqual(a[p], b[p]));
}
function getObjectValueByPath(obj, path, fallback) {
  // credit: http://stackoverflow.com/questions/6491463/accessing-nested-javascript-objects-with-string-key#comment55278413_6491621
  if (obj == null || !path || typeof path !== 'string') return fallback;
  if (obj[path] !== undefined) return obj[path];
  path = path.replace(/\[(\w+)\]/g, '.$1'); // convert indexes to properties

  path = path.replace(/^\./, ''); // strip a leading dot

  return getNestedValue(obj, path.split('.'), fallback);
}
function getPropertyFromItem(item, property, fallback) {
  if (property == null) return item === undefined ? fallback : item;
  if (item !== Object(item)) return fallback === undefined ? item : fallback;
  if (typeof property === 'string') return getObjectValueByPath(item, property, fallback);
  if (Array.isArray(property)) return getNestedValue(item, property, fallback);
  if (typeof property !== 'function') return fallback;
  const value = property(item, fallback);
  return typeof value === 'undefined' ? fallback : value;
}
function createRange(length) {
  let start = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;
  return Array.from({
    length
  }, (v, k) => start + k);
}
function getZIndex(el) {
  if (!el || el.nodeType !== Node.ELEMENT_NODE) return 0;
  const index = +window.getComputedStyle(el).getPropertyValue('z-index');
  if (!index) return getZIndex(el.parentNode);
  return index;
}
const tagsToReplace = {
  '&': '&amp;',
  '<': '&lt;',
  '>': '&gt;'
};
function escapeHTML(str) {
  return str.replace(/[&<>]/g, tag => tagsToReplace[tag] || tag);
}
function filterObjectOnKeys(obj, keys) {
  const filtered = {};

  for (let i = 0; i < keys.length; i++) {
    const key = keys[i];

    if (typeof obj[key] !== 'undefined') {
      filtered[key] = obj[key];
    }
  }

  return filtered;
}
function convertToUnit(str) {
  let unit = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'px';

  if (str == null || str === '') {
    return undefined;
  } else if (isNaN(+str)) {
    return String(str);
  } else if (!isFinite(+str)) {
    return undefined;
  } else {
    return `${Number(str)}${unit}`;
  }
}
function isObject(obj) {
  return obj !== null && typeof obj === 'object' && !Array.isArray(obj);
}
function isComponentInstance(obj) {
  return obj == null ? void 0 : obj.$el;
} // KeyboardEvent.keyCode aliases

const keyCodes = Object.freeze({
  enter: 13,
  tab: 9,
  delete: 46,
  esc: 27,
  space: 32,
  up: 38,
  down: 40,
  left: 37,
  right: 39,
  end: 35,
  home: 36,
  del: 46,
  backspace: 8,
  insert: 45,
  pageup: 33,
  pagedown: 34,
  shift: 16
});
const keyValues = Object.freeze({
  enter: 'Enter',
  tab: 'Tab',
  delete: 'Delete',
  esc: 'Escape',
  space: 'Space',
  up: 'ArrowUp',
  down: 'ArrowDown',
  left: 'ArrowLeft',
  right: 'ArrowRight',
  end: 'End',
  home: 'Home',
  del: 'Delete',
  backspace: 'Backspace',
  insert: 'Insert',
  pageup: 'PageUp',
  pagedown: 'PageDown',
  shift: 'Shift'
});
function keys(o) {
  return Object.keys(o);
}
function pick(obj, paths) {
  const found = Object.create(null);
  const rest = Object.create(null);

  for (const key in obj) {
    if (paths.some(path => path instanceof RegExp ? path.test(key) : path === key)) {
      found[key] = obj[key];
    } else {
      rest[key] = obj[key];
    }
  }

  return [found, rest];
}
/**
 * Filter attributes that should be applied to
 * the root element of a an input component. Remaining
 * attributes should be passed to the <input> element inside.
 */

function filterInputAttrs(attrs) {
  return pick(attrs, ['class', 'style', 'id', /^data-/]);
}
/**
 * Returns the set difference of B and A, i.e. the set of elements in B but not in A
 */

function arrayDiff(a, b) {
  const diff = [];

  for (let i = 0; i < b.length; i++) {
    if (!a.includes(b[i])) diff.push(b[i]);
  }

  return diff;
}
function groupItems(items, groupBy, groupDesc) {
  const key = groupBy[0];
  const groups = [];
  let current;

  for (let i = 0; i < items.length; i++) {
    const item = items[i];
    const val = getObjectValueByPath(item, key, null);

    if (current !== val) {
      current = val;
      groups.push({
        name: val != null ? val : '',
        items: []
      });
    }

    groups[groups.length - 1].items.push(item);
  }

  return groups;
}
function wrapInArray(v) {
  return v == null ? [] : Array.isArray(v) ? v : [v];
}
function sortItems(items, sortBy, sortDesc, locale, customSorters) {
  if (sortBy === null || !sortBy.length) return items;
  const stringCollator = new Intl.Collator(locale, {
    sensitivity: 'accent',
    usage: 'sort'
  });
  return items.sort((a, b) => {
    for (let i = 0; i < sortBy.length; i++) {
      const sortKey = sortBy[i];
      let sortA = getObjectValueByPath(a, sortKey);
      let sortB = getObjectValueByPath(b, sortKey);

      if (sortDesc[i]) {
        [sortA, sortB] = [sortB, sortA];
      }

      if (customSorters != null && customSorters[sortKey]) {
        const customResult = customSorters[sortKey](sortA, sortB);
        if (!customResult) continue;
        return customResult;
      } // Check if both cannot be evaluated


      if (sortA === null && sortB === null) {
        continue;
      } // Dates should be compared numerically


      if (sortA instanceof Date && sortB instanceof Date) {
        return sortA.getTime() - sortB.getTime();
      }

      [sortA, sortB] = [sortA, sortB].map(s => (s || '').toString().toLocaleLowerCase());

      if (sortA !== sortB) {
        if (!isNaN(sortA) && !isNaN(sortB)) return Number(sortA) - Number(sortB);
        return stringCollator.compare(sortA, sortB);
      }
    }

    return 0;
  });
}
function defaultFilter(value, search, item) {
  return value != null && search != null && typeof value !== 'boolean' && value.toString().toLocaleLowerCase().indexOf(search.toLocaleLowerCase()) !== -1;
}
function searchItems(items, search) {
  if (!search) return items;
  search = search.toString().toLowerCase();
  if (search.trim() === '') return items;
  return items.filter(item => Object.keys(item).some(key => defaultFilter(getObjectValueByPath(item, key), search, item)));
}
function debounce(fn, delay) {
  let timeoutId = 0;
  return function () {
    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    clearTimeout(timeoutId);
    timeoutId = setTimeout(() => fn(...args), delay);
  };
}
function throttle(fn, limit) {
  let throttling = false;
  return function () {
    if (!throttling) {
      throttling = true;
      setTimeout(() => throttling = false, limit);
      return fn(...arguments);
    }
  };
}

/**
 * Filters slots to only those starting with `prefix`, removing the prefix
 */
function getPrefixedSlots(prefix, slots) {
  return Object.keys(slots).filter(k => k.startsWith(prefix)).reduce((obj, k) => {
    obj[k.replace(prefix, '')] = slots[k];
    return obj;
  }, {});
}
function clamp(value) {
  let min = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;
  let max = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 1;
  return Math.max(min, Math.min(max, value));
}
function padEnd(str, length) {
  let char = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : '0';
  return str + char.repeat(Math.max(0, length - str.length));
}
function chunk(str) {
  let size = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 1;
  const chunked = [];
  let index = 0;

  while (index < str.length) {
    chunked.push(str.substr(index, size));
    index += size;
  }

  return chunked;
}
function humanReadableFileSize(bytes) {
  let base = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 1000;

  if (bytes < base) {
    return `${bytes} B`;
  }

  const prefix = base === 1024 ? ['Ki', 'Mi', 'Gi'] : ['k', 'M', 'G'];
  let unit = -1;

  while (Math.abs(bytes) >= base && unit < prefix.length - 1) {
    bytes /= base;
    ++unit;
  }

  return `${bytes.toFixed(1)} ${prefix[unit]}B`;
}
function camelizeObjectKeys(obj) {
  if (!obj) return {};
  return Object.keys(obj).reduce((o, key) => {
    o[camelize(key)] = obj[key];
    return o;
  }, {});
}
function mergeDeep() {
  let source = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
  let target = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
  let arrayFn = arguments.length > 2 ? arguments[2] : undefined;
  const out = {};

  for (const key in source) {
    out[key] = source[key];
  }

  for (const key in target) {
    const sourceProperty = source[key];
    const targetProperty = target[key]; // Only continue deep merging if
    // both properties are objects

    if (isObject(sourceProperty) && isObject(targetProperty)) {
      out[key] = mergeDeep(sourceProperty, targetProperty, arrayFn);
      continue;
    }

    if (Array.isArray(sourceProperty) && Array.isArray(targetProperty) && arrayFn) {
      out[key] = arrayFn(sourceProperty, targetProperty);
      continue;
    }

    out[key] = targetProperty;
  }

  return out;
}
function fillArray(length, obj) {
  return Array(length).fill(obj);
}
function getUid() {
  return getUid._uid++;
}
getUid._uid = 0;
function flattenFragments(nodes) {
  return nodes.map(node => {
    if (node.type === vue__WEBPACK_IMPORTED_MODULE_0__/* .Fragment */ .HY) {
      return flattenFragments(node.children);
    } else {
      return node;
    }
  }).flat();
}
const randomHexColor = () => {
  const n = (Math.random() * 0xfffff * 1000000).toString(16);
  return '#' + n.slice(0, 6);
};
function toKebabCase() {
  let str = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '';
  return str.replace(/[^a-z]/gi, '-').replace(/\B([A-Z])/g, '-$1').toLowerCase();
}
function findChildren(vnode) {
  if (!vnode || typeof vnode !== 'object') {
    return [];
  }

  if (Array.isArray(vnode)) {
    return vnode.map(child => findChildren(child)).filter(v => v).flat(1);
  } else if (Array.isArray(vnode.children)) {
    return vnode.children.map(child => findChildren(child)).filter(v => v).flat(1);
  } else if (vnode.component) {
    var _vnode$component;

    return [vnode.component, ...findChildren((_vnode$component = vnode.component) == null ? void 0 : _vnode$component.subTree)].filter(v => v).flat(1);
  }

  return [];
}
function findChildrenWithProvide(key, vnode) {
  if (!vnode || typeof vnode !== 'object') return [];

  if (Array.isArray(vnode)) {
    return vnode.map(child => findChildrenWithProvide(key, child)).flat(1);
  } else if (Array.isArray(vnode.children)) {
    return vnode.children.map(child => findChildrenWithProvide(key, child)).flat(1);
  } else if (vnode.component) {
    if (Object.getOwnPropertySymbols(vnode.component.provides).includes(key)) {
      return [vnode.component];
    } else if (vnode.component.subTree) {
      return findChildrenWithProvide(key, vnode.component.subTree).flat(1);
    }
  }

  return [];
}

var _arr = /*#__PURE__*/new WeakMap();

var _pointer = /*#__PURE__*/new WeakMap();

class CircularBuffer {
  constructor(size) {
    _classPrivateFieldInitSpec(this, _arr, {
      writable: true,
      value: []
    });

    _classPrivateFieldInitSpec(this, _pointer, {
      writable: true,
      value: 0
    });

    this.size = size;
  }

  push(val) {
    _classPrivateFieldGet(this, _arr)[_classPrivateFieldGet(this, _pointer)] = val;

    _classPrivateFieldSet(this, _pointer, (_classPrivateFieldGet(this, _pointer) + 1) % this.size);
  }

  values() {
    return _classPrivateFieldGet(this, _arr).slice(_classPrivateFieldGet(this, _pointer)).concat(_classPrivateFieldGet(this, _arr).slice(0, _classPrivateFieldGet(this, _pointer)));
  }

}
function getEventCoordinates(e) {
  if ('touches' in e) {
    return {
      clientX: e.touches[0].clientX,
      clientY: e.touches[0].clientY
    };
  }

  return {
    clientX: e.clientX,
    clientY: e.clientY
  };
}
//# sourceMappingURL=helpers.mjs.map

/***/ }),

/***/ 533:
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "U": () => (/* binding */ propsFactory)
/* harmony export */ });
/**
 * Creates a factory function for props definitions.
 * This is used to define props in a composable then override
 * default values in an implementing component.
 *
 * @example Simplified signature
 * (props: Props) => (defaults?: Record<keyof props, any>) => Props
 *
 * @example Usage
 * const makeProps = propsFactory({
 *   foo: String,
 * })
 *
 * defineComponent({
 *   props: {
 *     ...makeProps({
 *       foo: 'a',
 *     }),
 *   },
 *   setup (props) {
 *     // would be "string | undefined", now "string" because a default has been provided
 *     props.foo
 *   },
 * }
 */
function propsFactory(props, source) {
  return defaults => {
    return Object.keys(props).reduce((obj, prop) => {
      const isObjectDefinition = typeof props[prop] === 'object' && props[prop] != null && !Array.isArray(props[prop]);
      const definition = isObjectDefinition ? props[prop] : {
        type: props[prop]
      };

      if (defaults && prop in defaults) {
        obj[prop] = { ...definition,
          default: defaults[prop]
        };
      } else {
        obj[prop] = definition;
      }

      if (source) {
        obj[prop].source = source;
      }

      return obj;
    }, {});
  };
}
//# sourceMappingURL=propsFactory.mjs.map

/***/ })

}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,